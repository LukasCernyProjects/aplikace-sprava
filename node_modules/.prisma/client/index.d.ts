
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model Nemovitost
 * 
 */
export type Nemovitost = $Result.DefaultSelection<Prisma.$NemovitostPayload>
/**
 * Model Najemnik
 * 
 */
export type Najemnik = $Result.DefaultSelection<Prisma.$NajemnikPayload>
/**
 * Model Platba
 * 
 */
export type Platba = $Result.DefaultSelection<Prisma.$PlatbaPayload>
/**
 * Model Ukol
 * 
 */
export type Ukol = $Result.DefaultSelection<Prisma.$UkolPayload>
/**
 * Model Meridlo
 * 
 */
export type Meridlo = $Result.DefaultSelection<Prisma.$MeridloPayload>
/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model Apartment
 * 
 */
export type Apartment = $Result.DefaultSelection<Prisma.$ApartmentPayload>
/**
 * Model Tenant
 * 
 */
export type Tenant = $Result.DefaultSelection<Prisma.$TenantPayload>

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Nemovitosts
 * const nemovitosts = await prisma.nemovitost.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Nemovitosts
   * const nemovitosts = await prisma.nemovitost.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.nemovitost`: Exposes CRUD operations for the **Nemovitost** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Nemovitosts
    * const nemovitosts = await prisma.nemovitost.findMany()
    * ```
    */
  get nemovitost(): Prisma.NemovitostDelegate<ExtArgs>;

  /**
   * `prisma.najemnik`: Exposes CRUD operations for the **Najemnik** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Najemniks
    * const najemniks = await prisma.najemnik.findMany()
    * ```
    */
  get najemnik(): Prisma.NajemnikDelegate<ExtArgs>;

  /**
   * `prisma.platba`: Exposes CRUD operations for the **Platba** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Platbas
    * const platbas = await prisma.platba.findMany()
    * ```
    */
  get platba(): Prisma.PlatbaDelegate<ExtArgs>;

  /**
   * `prisma.ukol`: Exposes CRUD operations for the **Ukol** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Ukols
    * const ukols = await prisma.ukol.findMany()
    * ```
    */
  get ukol(): Prisma.UkolDelegate<ExtArgs>;

  /**
   * `prisma.meridlo`: Exposes CRUD operations for the **Meridlo** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Meridlos
    * const meridlos = await prisma.meridlo.findMany()
    * ```
    */
  get meridlo(): Prisma.MeridloDelegate<ExtArgs>;

  /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs>;

  /**
   * `prisma.apartment`: Exposes CRUD operations for the **Apartment** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Apartments
    * const apartments = await prisma.apartment.findMany()
    * ```
    */
  get apartment(): Prisma.ApartmentDelegate<ExtArgs>;

  /**
   * `prisma.tenant`: Exposes CRUD operations for the **Tenant** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Tenants
    * const tenants = await prisma.tenant.findMany()
    * ```
    */
  get tenant(): Prisma.TenantDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.22.0
   * Query Engine version: 605197351a3c8bdd595af2d2a9bc3025bca48ea2
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    Nemovitost: 'Nemovitost',
    Najemnik: 'Najemnik',
    Platba: 'Platba',
    Ukol: 'Ukol',
    Meridlo: 'Meridlo',
    User: 'User',
    Apartment: 'Apartment',
    Tenant: 'Tenant'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs, clientOptions: PrismaClientOptions }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], this['params']['clientOptions']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> = {
    meta: {
      modelProps: "nemovitost" | "najemnik" | "platba" | "ukol" | "meridlo" | "user" | "apartment" | "tenant"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      Nemovitost: {
        payload: Prisma.$NemovitostPayload<ExtArgs>
        fields: Prisma.NemovitostFieldRefs
        operations: {
          findUnique: {
            args: Prisma.NemovitostFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NemovitostPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.NemovitostFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NemovitostPayload>
          }
          findFirst: {
            args: Prisma.NemovitostFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NemovitostPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.NemovitostFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NemovitostPayload>
          }
          findMany: {
            args: Prisma.NemovitostFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NemovitostPayload>[]
          }
          create: {
            args: Prisma.NemovitostCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NemovitostPayload>
          }
          createMany: {
            args: Prisma.NemovitostCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.NemovitostCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NemovitostPayload>[]
          }
          delete: {
            args: Prisma.NemovitostDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NemovitostPayload>
          }
          update: {
            args: Prisma.NemovitostUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NemovitostPayload>
          }
          deleteMany: {
            args: Prisma.NemovitostDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.NemovitostUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.NemovitostUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NemovitostPayload>
          }
          aggregate: {
            args: Prisma.NemovitostAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateNemovitost>
          }
          groupBy: {
            args: Prisma.NemovitostGroupByArgs<ExtArgs>
            result: $Utils.Optional<NemovitostGroupByOutputType>[]
          }
          count: {
            args: Prisma.NemovitostCountArgs<ExtArgs>
            result: $Utils.Optional<NemovitostCountAggregateOutputType> | number
          }
        }
      }
      Najemnik: {
        payload: Prisma.$NajemnikPayload<ExtArgs>
        fields: Prisma.NajemnikFieldRefs
        operations: {
          findUnique: {
            args: Prisma.NajemnikFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NajemnikPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.NajemnikFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NajemnikPayload>
          }
          findFirst: {
            args: Prisma.NajemnikFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NajemnikPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.NajemnikFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NajemnikPayload>
          }
          findMany: {
            args: Prisma.NajemnikFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NajemnikPayload>[]
          }
          create: {
            args: Prisma.NajemnikCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NajemnikPayload>
          }
          createMany: {
            args: Prisma.NajemnikCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.NajemnikCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NajemnikPayload>[]
          }
          delete: {
            args: Prisma.NajemnikDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NajemnikPayload>
          }
          update: {
            args: Prisma.NajemnikUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NajemnikPayload>
          }
          deleteMany: {
            args: Prisma.NajemnikDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.NajemnikUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.NajemnikUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NajemnikPayload>
          }
          aggregate: {
            args: Prisma.NajemnikAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateNajemnik>
          }
          groupBy: {
            args: Prisma.NajemnikGroupByArgs<ExtArgs>
            result: $Utils.Optional<NajemnikGroupByOutputType>[]
          }
          count: {
            args: Prisma.NajemnikCountArgs<ExtArgs>
            result: $Utils.Optional<NajemnikCountAggregateOutputType> | number
          }
        }
      }
      Platba: {
        payload: Prisma.$PlatbaPayload<ExtArgs>
        fields: Prisma.PlatbaFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PlatbaFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlatbaPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PlatbaFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlatbaPayload>
          }
          findFirst: {
            args: Prisma.PlatbaFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlatbaPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PlatbaFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlatbaPayload>
          }
          findMany: {
            args: Prisma.PlatbaFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlatbaPayload>[]
          }
          create: {
            args: Prisma.PlatbaCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlatbaPayload>
          }
          createMany: {
            args: Prisma.PlatbaCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.PlatbaCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlatbaPayload>[]
          }
          delete: {
            args: Prisma.PlatbaDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlatbaPayload>
          }
          update: {
            args: Prisma.PlatbaUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlatbaPayload>
          }
          deleteMany: {
            args: Prisma.PlatbaDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PlatbaUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.PlatbaUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlatbaPayload>
          }
          aggregate: {
            args: Prisma.PlatbaAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePlatba>
          }
          groupBy: {
            args: Prisma.PlatbaGroupByArgs<ExtArgs>
            result: $Utils.Optional<PlatbaGroupByOutputType>[]
          }
          count: {
            args: Prisma.PlatbaCountArgs<ExtArgs>
            result: $Utils.Optional<PlatbaCountAggregateOutputType> | number
          }
        }
      }
      Ukol: {
        payload: Prisma.$UkolPayload<ExtArgs>
        fields: Prisma.UkolFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UkolFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UkolPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UkolFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UkolPayload>
          }
          findFirst: {
            args: Prisma.UkolFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UkolPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UkolFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UkolPayload>
          }
          findMany: {
            args: Prisma.UkolFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UkolPayload>[]
          }
          create: {
            args: Prisma.UkolCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UkolPayload>
          }
          createMany: {
            args: Prisma.UkolCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UkolCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UkolPayload>[]
          }
          delete: {
            args: Prisma.UkolDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UkolPayload>
          }
          update: {
            args: Prisma.UkolUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UkolPayload>
          }
          deleteMany: {
            args: Prisma.UkolDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UkolUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.UkolUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UkolPayload>
          }
          aggregate: {
            args: Prisma.UkolAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUkol>
          }
          groupBy: {
            args: Prisma.UkolGroupByArgs<ExtArgs>
            result: $Utils.Optional<UkolGroupByOutputType>[]
          }
          count: {
            args: Prisma.UkolCountArgs<ExtArgs>
            result: $Utils.Optional<UkolCountAggregateOutputType> | number
          }
        }
      }
      Meridlo: {
        payload: Prisma.$MeridloPayload<ExtArgs>
        fields: Prisma.MeridloFieldRefs
        operations: {
          findUnique: {
            args: Prisma.MeridloFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MeridloPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.MeridloFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MeridloPayload>
          }
          findFirst: {
            args: Prisma.MeridloFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MeridloPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.MeridloFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MeridloPayload>
          }
          findMany: {
            args: Prisma.MeridloFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MeridloPayload>[]
          }
          create: {
            args: Prisma.MeridloCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MeridloPayload>
          }
          createMany: {
            args: Prisma.MeridloCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.MeridloCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MeridloPayload>[]
          }
          delete: {
            args: Prisma.MeridloDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MeridloPayload>
          }
          update: {
            args: Prisma.MeridloUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MeridloPayload>
          }
          deleteMany: {
            args: Prisma.MeridloDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.MeridloUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.MeridloUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MeridloPayload>
          }
          aggregate: {
            args: Prisma.MeridloAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateMeridlo>
          }
          groupBy: {
            args: Prisma.MeridloGroupByArgs<ExtArgs>
            result: $Utils.Optional<MeridloGroupByOutputType>[]
          }
          count: {
            args: Prisma.MeridloCountArgs<ExtArgs>
            result: $Utils.Optional<MeridloCountAggregateOutputType> | number
          }
        }
      }
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      Apartment: {
        payload: Prisma.$ApartmentPayload<ExtArgs>
        fields: Prisma.ApartmentFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ApartmentFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ApartmentPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ApartmentFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ApartmentPayload>
          }
          findFirst: {
            args: Prisma.ApartmentFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ApartmentPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ApartmentFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ApartmentPayload>
          }
          findMany: {
            args: Prisma.ApartmentFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ApartmentPayload>[]
          }
          create: {
            args: Prisma.ApartmentCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ApartmentPayload>
          }
          createMany: {
            args: Prisma.ApartmentCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ApartmentCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ApartmentPayload>[]
          }
          delete: {
            args: Prisma.ApartmentDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ApartmentPayload>
          }
          update: {
            args: Prisma.ApartmentUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ApartmentPayload>
          }
          deleteMany: {
            args: Prisma.ApartmentDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ApartmentUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ApartmentUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ApartmentPayload>
          }
          aggregate: {
            args: Prisma.ApartmentAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateApartment>
          }
          groupBy: {
            args: Prisma.ApartmentGroupByArgs<ExtArgs>
            result: $Utils.Optional<ApartmentGroupByOutputType>[]
          }
          count: {
            args: Prisma.ApartmentCountArgs<ExtArgs>
            result: $Utils.Optional<ApartmentCountAggregateOutputType> | number
          }
        }
      }
      Tenant: {
        payload: Prisma.$TenantPayload<ExtArgs>
        fields: Prisma.TenantFieldRefs
        operations: {
          findUnique: {
            args: Prisma.TenantFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TenantPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.TenantFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TenantPayload>
          }
          findFirst: {
            args: Prisma.TenantFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TenantPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.TenantFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TenantPayload>
          }
          findMany: {
            args: Prisma.TenantFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TenantPayload>[]
          }
          create: {
            args: Prisma.TenantCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TenantPayload>
          }
          createMany: {
            args: Prisma.TenantCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.TenantCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TenantPayload>[]
          }
          delete: {
            args: Prisma.TenantDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TenantPayload>
          }
          update: {
            args: Prisma.TenantUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TenantPayload>
          }
          deleteMany: {
            args: Prisma.TenantDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.TenantUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.TenantUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TenantPayload>
          }
          aggregate: {
            args: Prisma.TenantAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateTenant>
          }
          groupBy: {
            args: Prisma.TenantGroupByArgs<ExtArgs>
            result: $Utils.Optional<TenantGroupByOutputType>[]
          }
          count: {
            args: Prisma.TenantCountArgs<ExtArgs>
            result: $Utils.Optional<TenantCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
  }


  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type NemovitostCountOutputType
   */

  export type NemovitostCountOutputType = {
    najemnici: number
  }

  export type NemovitostCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    najemnici?: boolean | NemovitostCountOutputTypeCountNajemniciArgs
  }

  // Custom InputTypes
  /**
   * NemovitostCountOutputType without action
   */
  export type NemovitostCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NemovitostCountOutputType
     */
    select?: NemovitostCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * NemovitostCountOutputType without action
   */
  export type NemovitostCountOutputTypeCountNajemniciArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: NajemnikWhereInput
  }


  /**
   * Count Type NajemnikCountOutputType
   */

  export type NajemnikCountOutputType = {
    platby: number
    meridla: number
    ukoly: number
  }

  export type NajemnikCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    platby?: boolean | NajemnikCountOutputTypeCountPlatbyArgs
    meridla?: boolean | NajemnikCountOutputTypeCountMeridlaArgs
    ukoly?: boolean | NajemnikCountOutputTypeCountUkolyArgs
  }

  // Custom InputTypes
  /**
   * NajemnikCountOutputType without action
   */
  export type NajemnikCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NajemnikCountOutputType
     */
    select?: NajemnikCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * NajemnikCountOutputType without action
   */
  export type NajemnikCountOutputTypeCountPlatbyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PlatbaWhereInput
  }

  /**
   * NajemnikCountOutputType without action
   */
  export type NajemnikCountOutputTypeCountMeridlaArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MeridloWhereInput
  }

  /**
   * NajemnikCountOutputType without action
   */
  export type NajemnikCountOutputTypeCountUkolyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UkolWhereInput
  }


  /**
   * Count Type UserCountOutputType
   */

  export type UserCountOutputType = {
    apartments: number
  }

  export type UserCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    apartments?: boolean | UserCountOutputTypeCountApartmentsArgs
  }

  // Custom InputTypes
  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountApartmentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ApartmentWhereInput
  }


  /**
   * Count Type ApartmentCountOutputType
   */

  export type ApartmentCountOutputType = {
    children: number
    tenants: number
  }

  export type ApartmentCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    children?: boolean | ApartmentCountOutputTypeCountChildrenArgs
    tenants?: boolean | ApartmentCountOutputTypeCountTenantsArgs
  }

  // Custom InputTypes
  /**
   * ApartmentCountOutputType without action
   */
  export type ApartmentCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ApartmentCountOutputType
     */
    select?: ApartmentCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ApartmentCountOutputType without action
   */
  export type ApartmentCountOutputTypeCountChildrenArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ApartmentWhereInput
  }

  /**
   * ApartmentCountOutputType without action
   */
  export type ApartmentCountOutputTypeCountTenantsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TenantWhereInput
  }


  /**
   * Models
   */

  /**
   * Model Nemovitost
   */

  export type AggregateNemovitost = {
    _count: NemovitostCountAggregateOutputType | null
    _avg: NemovitostAvgAggregateOutputType | null
    _sum: NemovitostSumAggregateOutputType | null
    _min: NemovitostMinAggregateOutputType | null
    _max: NemovitostMaxAggregateOutputType | null
  }

  export type NemovitostAvgAggregateOutputType = {
    id: number | null
  }

  export type NemovitostSumAggregateOutputType = {
    id: number | null
  }

  export type NemovitostMinAggregateOutputType = {
    id: number | null
    nazev: string | null
    adresa: string | null
  }

  export type NemovitostMaxAggregateOutputType = {
    id: number | null
    nazev: string | null
    adresa: string | null
  }

  export type NemovitostCountAggregateOutputType = {
    id: number
    nazev: number
    adresa: number
    _all: number
  }


  export type NemovitostAvgAggregateInputType = {
    id?: true
  }

  export type NemovitostSumAggregateInputType = {
    id?: true
  }

  export type NemovitostMinAggregateInputType = {
    id?: true
    nazev?: true
    adresa?: true
  }

  export type NemovitostMaxAggregateInputType = {
    id?: true
    nazev?: true
    adresa?: true
  }

  export type NemovitostCountAggregateInputType = {
    id?: true
    nazev?: true
    adresa?: true
    _all?: true
  }

  export type NemovitostAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Nemovitost to aggregate.
     */
    where?: NemovitostWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Nemovitosts to fetch.
     */
    orderBy?: NemovitostOrderByWithRelationInput | NemovitostOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: NemovitostWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Nemovitosts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Nemovitosts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Nemovitosts
    **/
    _count?: true | NemovitostCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: NemovitostAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: NemovitostSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: NemovitostMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: NemovitostMaxAggregateInputType
  }

  export type GetNemovitostAggregateType<T extends NemovitostAggregateArgs> = {
        [P in keyof T & keyof AggregateNemovitost]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateNemovitost[P]>
      : GetScalarType<T[P], AggregateNemovitost[P]>
  }




  export type NemovitostGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: NemovitostWhereInput
    orderBy?: NemovitostOrderByWithAggregationInput | NemovitostOrderByWithAggregationInput[]
    by: NemovitostScalarFieldEnum[] | NemovitostScalarFieldEnum
    having?: NemovitostScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: NemovitostCountAggregateInputType | true
    _avg?: NemovitostAvgAggregateInputType
    _sum?: NemovitostSumAggregateInputType
    _min?: NemovitostMinAggregateInputType
    _max?: NemovitostMaxAggregateInputType
  }

  export type NemovitostGroupByOutputType = {
    id: number
    nazev: string
    adresa: string
    _count: NemovitostCountAggregateOutputType | null
    _avg: NemovitostAvgAggregateOutputType | null
    _sum: NemovitostSumAggregateOutputType | null
    _min: NemovitostMinAggregateOutputType | null
    _max: NemovitostMaxAggregateOutputType | null
  }

  type GetNemovitostGroupByPayload<T extends NemovitostGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<NemovitostGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof NemovitostGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], NemovitostGroupByOutputType[P]>
            : GetScalarType<T[P], NemovitostGroupByOutputType[P]>
        }
      >
    >


  export type NemovitostSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nazev?: boolean
    adresa?: boolean
    najemnici?: boolean | Nemovitost$najemniciArgs<ExtArgs>
    _count?: boolean | NemovitostCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["nemovitost"]>

  export type NemovitostSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nazev?: boolean
    adresa?: boolean
  }, ExtArgs["result"]["nemovitost"]>

  export type NemovitostSelectScalar = {
    id?: boolean
    nazev?: boolean
    adresa?: boolean
  }

  export type NemovitostInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    najemnici?: boolean | Nemovitost$najemniciArgs<ExtArgs>
    _count?: boolean | NemovitostCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type NemovitostIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $NemovitostPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Nemovitost"
    objects: {
      najemnici: Prisma.$NajemnikPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      nazev: string
      adresa: string
    }, ExtArgs["result"]["nemovitost"]>
    composites: {}
  }

  type NemovitostGetPayload<S extends boolean | null | undefined | NemovitostDefaultArgs> = $Result.GetResult<Prisma.$NemovitostPayload, S>

  type NemovitostCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<NemovitostFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: NemovitostCountAggregateInputType | true
    }

  export interface NemovitostDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Nemovitost'], meta: { name: 'Nemovitost' } }
    /**
     * Find zero or one Nemovitost that matches the filter.
     * @param {NemovitostFindUniqueArgs} args - Arguments to find a Nemovitost
     * @example
     * // Get one Nemovitost
     * const nemovitost = await prisma.nemovitost.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends NemovitostFindUniqueArgs>(args: SelectSubset<T, NemovitostFindUniqueArgs<ExtArgs>>): Prisma__NemovitostClient<$Result.GetResult<Prisma.$NemovitostPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Nemovitost that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {NemovitostFindUniqueOrThrowArgs} args - Arguments to find a Nemovitost
     * @example
     * // Get one Nemovitost
     * const nemovitost = await prisma.nemovitost.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends NemovitostFindUniqueOrThrowArgs>(args: SelectSubset<T, NemovitostFindUniqueOrThrowArgs<ExtArgs>>): Prisma__NemovitostClient<$Result.GetResult<Prisma.$NemovitostPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Nemovitost that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NemovitostFindFirstArgs} args - Arguments to find a Nemovitost
     * @example
     * // Get one Nemovitost
     * const nemovitost = await prisma.nemovitost.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends NemovitostFindFirstArgs>(args?: SelectSubset<T, NemovitostFindFirstArgs<ExtArgs>>): Prisma__NemovitostClient<$Result.GetResult<Prisma.$NemovitostPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Nemovitost that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NemovitostFindFirstOrThrowArgs} args - Arguments to find a Nemovitost
     * @example
     * // Get one Nemovitost
     * const nemovitost = await prisma.nemovitost.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends NemovitostFindFirstOrThrowArgs>(args?: SelectSubset<T, NemovitostFindFirstOrThrowArgs<ExtArgs>>): Prisma__NemovitostClient<$Result.GetResult<Prisma.$NemovitostPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Nemovitosts that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NemovitostFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Nemovitosts
     * const nemovitosts = await prisma.nemovitost.findMany()
     * 
     * // Get first 10 Nemovitosts
     * const nemovitosts = await prisma.nemovitost.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const nemovitostWithIdOnly = await prisma.nemovitost.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends NemovitostFindManyArgs>(args?: SelectSubset<T, NemovitostFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NemovitostPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Nemovitost.
     * @param {NemovitostCreateArgs} args - Arguments to create a Nemovitost.
     * @example
     * // Create one Nemovitost
     * const Nemovitost = await prisma.nemovitost.create({
     *   data: {
     *     // ... data to create a Nemovitost
     *   }
     * })
     * 
     */
    create<T extends NemovitostCreateArgs>(args: SelectSubset<T, NemovitostCreateArgs<ExtArgs>>): Prisma__NemovitostClient<$Result.GetResult<Prisma.$NemovitostPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Nemovitosts.
     * @param {NemovitostCreateManyArgs} args - Arguments to create many Nemovitosts.
     * @example
     * // Create many Nemovitosts
     * const nemovitost = await prisma.nemovitost.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends NemovitostCreateManyArgs>(args?: SelectSubset<T, NemovitostCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Nemovitosts and returns the data saved in the database.
     * @param {NemovitostCreateManyAndReturnArgs} args - Arguments to create many Nemovitosts.
     * @example
     * // Create many Nemovitosts
     * const nemovitost = await prisma.nemovitost.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Nemovitosts and only return the `id`
     * const nemovitostWithIdOnly = await prisma.nemovitost.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends NemovitostCreateManyAndReturnArgs>(args?: SelectSubset<T, NemovitostCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NemovitostPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Nemovitost.
     * @param {NemovitostDeleteArgs} args - Arguments to delete one Nemovitost.
     * @example
     * // Delete one Nemovitost
     * const Nemovitost = await prisma.nemovitost.delete({
     *   where: {
     *     // ... filter to delete one Nemovitost
     *   }
     * })
     * 
     */
    delete<T extends NemovitostDeleteArgs>(args: SelectSubset<T, NemovitostDeleteArgs<ExtArgs>>): Prisma__NemovitostClient<$Result.GetResult<Prisma.$NemovitostPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Nemovitost.
     * @param {NemovitostUpdateArgs} args - Arguments to update one Nemovitost.
     * @example
     * // Update one Nemovitost
     * const nemovitost = await prisma.nemovitost.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends NemovitostUpdateArgs>(args: SelectSubset<T, NemovitostUpdateArgs<ExtArgs>>): Prisma__NemovitostClient<$Result.GetResult<Prisma.$NemovitostPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Nemovitosts.
     * @param {NemovitostDeleteManyArgs} args - Arguments to filter Nemovitosts to delete.
     * @example
     * // Delete a few Nemovitosts
     * const { count } = await prisma.nemovitost.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends NemovitostDeleteManyArgs>(args?: SelectSubset<T, NemovitostDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Nemovitosts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NemovitostUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Nemovitosts
     * const nemovitost = await prisma.nemovitost.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends NemovitostUpdateManyArgs>(args: SelectSubset<T, NemovitostUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Nemovitost.
     * @param {NemovitostUpsertArgs} args - Arguments to update or create a Nemovitost.
     * @example
     * // Update or create a Nemovitost
     * const nemovitost = await prisma.nemovitost.upsert({
     *   create: {
     *     // ... data to create a Nemovitost
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Nemovitost we want to update
     *   }
     * })
     */
    upsert<T extends NemovitostUpsertArgs>(args: SelectSubset<T, NemovitostUpsertArgs<ExtArgs>>): Prisma__NemovitostClient<$Result.GetResult<Prisma.$NemovitostPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Nemovitosts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NemovitostCountArgs} args - Arguments to filter Nemovitosts to count.
     * @example
     * // Count the number of Nemovitosts
     * const count = await prisma.nemovitost.count({
     *   where: {
     *     // ... the filter for the Nemovitosts we want to count
     *   }
     * })
    **/
    count<T extends NemovitostCountArgs>(
      args?: Subset<T, NemovitostCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], NemovitostCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Nemovitost.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NemovitostAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends NemovitostAggregateArgs>(args: Subset<T, NemovitostAggregateArgs>): Prisma.PrismaPromise<GetNemovitostAggregateType<T>>

    /**
     * Group by Nemovitost.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NemovitostGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends NemovitostGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: NemovitostGroupByArgs['orderBy'] }
        : { orderBy?: NemovitostGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, NemovitostGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetNemovitostGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Nemovitost model
   */
  readonly fields: NemovitostFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Nemovitost.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__NemovitostClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    najemnici<T extends Nemovitost$najemniciArgs<ExtArgs> = {}>(args?: Subset<T, Nemovitost$najemniciArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NajemnikPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Nemovitost model
   */ 
  interface NemovitostFieldRefs {
    readonly id: FieldRef<"Nemovitost", 'Int'>
    readonly nazev: FieldRef<"Nemovitost", 'String'>
    readonly adresa: FieldRef<"Nemovitost", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Nemovitost findUnique
   */
  export type NemovitostFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Nemovitost
     */
    select?: NemovitostSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NemovitostInclude<ExtArgs> | null
    /**
     * Filter, which Nemovitost to fetch.
     */
    where: NemovitostWhereUniqueInput
  }

  /**
   * Nemovitost findUniqueOrThrow
   */
  export type NemovitostFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Nemovitost
     */
    select?: NemovitostSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NemovitostInclude<ExtArgs> | null
    /**
     * Filter, which Nemovitost to fetch.
     */
    where: NemovitostWhereUniqueInput
  }

  /**
   * Nemovitost findFirst
   */
  export type NemovitostFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Nemovitost
     */
    select?: NemovitostSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NemovitostInclude<ExtArgs> | null
    /**
     * Filter, which Nemovitost to fetch.
     */
    where?: NemovitostWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Nemovitosts to fetch.
     */
    orderBy?: NemovitostOrderByWithRelationInput | NemovitostOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Nemovitosts.
     */
    cursor?: NemovitostWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Nemovitosts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Nemovitosts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Nemovitosts.
     */
    distinct?: NemovitostScalarFieldEnum | NemovitostScalarFieldEnum[]
  }

  /**
   * Nemovitost findFirstOrThrow
   */
  export type NemovitostFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Nemovitost
     */
    select?: NemovitostSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NemovitostInclude<ExtArgs> | null
    /**
     * Filter, which Nemovitost to fetch.
     */
    where?: NemovitostWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Nemovitosts to fetch.
     */
    orderBy?: NemovitostOrderByWithRelationInput | NemovitostOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Nemovitosts.
     */
    cursor?: NemovitostWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Nemovitosts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Nemovitosts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Nemovitosts.
     */
    distinct?: NemovitostScalarFieldEnum | NemovitostScalarFieldEnum[]
  }

  /**
   * Nemovitost findMany
   */
  export type NemovitostFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Nemovitost
     */
    select?: NemovitostSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NemovitostInclude<ExtArgs> | null
    /**
     * Filter, which Nemovitosts to fetch.
     */
    where?: NemovitostWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Nemovitosts to fetch.
     */
    orderBy?: NemovitostOrderByWithRelationInput | NemovitostOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Nemovitosts.
     */
    cursor?: NemovitostWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Nemovitosts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Nemovitosts.
     */
    skip?: number
    distinct?: NemovitostScalarFieldEnum | NemovitostScalarFieldEnum[]
  }

  /**
   * Nemovitost create
   */
  export type NemovitostCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Nemovitost
     */
    select?: NemovitostSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NemovitostInclude<ExtArgs> | null
    /**
     * The data needed to create a Nemovitost.
     */
    data: XOR<NemovitostCreateInput, NemovitostUncheckedCreateInput>
  }

  /**
   * Nemovitost createMany
   */
  export type NemovitostCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Nemovitosts.
     */
    data: NemovitostCreateManyInput | NemovitostCreateManyInput[]
  }

  /**
   * Nemovitost createManyAndReturn
   */
  export type NemovitostCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Nemovitost
     */
    select?: NemovitostSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Nemovitosts.
     */
    data: NemovitostCreateManyInput | NemovitostCreateManyInput[]
  }

  /**
   * Nemovitost update
   */
  export type NemovitostUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Nemovitost
     */
    select?: NemovitostSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NemovitostInclude<ExtArgs> | null
    /**
     * The data needed to update a Nemovitost.
     */
    data: XOR<NemovitostUpdateInput, NemovitostUncheckedUpdateInput>
    /**
     * Choose, which Nemovitost to update.
     */
    where: NemovitostWhereUniqueInput
  }

  /**
   * Nemovitost updateMany
   */
  export type NemovitostUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Nemovitosts.
     */
    data: XOR<NemovitostUpdateManyMutationInput, NemovitostUncheckedUpdateManyInput>
    /**
     * Filter which Nemovitosts to update
     */
    where?: NemovitostWhereInput
  }

  /**
   * Nemovitost upsert
   */
  export type NemovitostUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Nemovitost
     */
    select?: NemovitostSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NemovitostInclude<ExtArgs> | null
    /**
     * The filter to search for the Nemovitost to update in case it exists.
     */
    where: NemovitostWhereUniqueInput
    /**
     * In case the Nemovitost found by the `where` argument doesn't exist, create a new Nemovitost with this data.
     */
    create: XOR<NemovitostCreateInput, NemovitostUncheckedCreateInput>
    /**
     * In case the Nemovitost was found with the provided `where` argument, update it with this data.
     */
    update: XOR<NemovitostUpdateInput, NemovitostUncheckedUpdateInput>
  }

  /**
   * Nemovitost delete
   */
  export type NemovitostDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Nemovitost
     */
    select?: NemovitostSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NemovitostInclude<ExtArgs> | null
    /**
     * Filter which Nemovitost to delete.
     */
    where: NemovitostWhereUniqueInput
  }

  /**
   * Nemovitost deleteMany
   */
  export type NemovitostDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Nemovitosts to delete
     */
    where?: NemovitostWhereInput
  }

  /**
   * Nemovitost.najemnici
   */
  export type Nemovitost$najemniciArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Najemnik
     */
    select?: NajemnikSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NajemnikInclude<ExtArgs> | null
    where?: NajemnikWhereInput
    orderBy?: NajemnikOrderByWithRelationInput | NajemnikOrderByWithRelationInput[]
    cursor?: NajemnikWhereUniqueInput
    take?: number
    skip?: number
    distinct?: NajemnikScalarFieldEnum | NajemnikScalarFieldEnum[]
  }

  /**
   * Nemovitost without action
   */
  export type NemovitostDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Nemovitost
     */
    select?: NemovitostSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NemovitostInclude<ExtArgs> | null
  }


  /**
   * Model Najemnik
   */

  export type AggregateNajemnik = {
    _count: NajemnikCountAggregateOutputType | null
    _avg: NajemnikAvgAggregateOutputType | null
    _sum: NajemnikSumAggregateOutputType | null
    _min: NajemnikMinAggregateOutputType | null
    _max: NajemnikMaxAggregateOutputType | null
  }

  export type NajemnikAvgAggregateOutputType = {
    id: number | null
    nemovitostId: number | null
    mesicniNajem: number | null
  }

  export type NajemnikSumAggregateOutputType = {
    id: number | null
    nemovitostId: number | null
    mesicniNajem: number | null
  }

  export type NajemnikMinAggregateOutputType = {
    id: number | null
    jmeno: string | null
    email: string | null
    nemovitostId: number | null
    mesicniNajem: number | null
  }

  export type NajemnikMaxAggregateOutputType = {
    id: number | null
    jmeno: string | null
    email: string | null
    nemovitostId: number | null
    mesicniNajem: number | null
  }

  export type NajemnikCountAggregateOutputType = {
    id: number
    jmeno: number
    email: number
    nemovitostId: number
    mesicniNajem: number
    _all: number
  }


  export type NajemnikAvgAggregateInputType = {
    id?: true
    nemovitostId?: true
    mesicniNajem?: true
  }

  export type NajemnikSumAggregateInputType = {
    id?: true
    nemovitostId?: true
    mesicniNajem?: true
  }

  export type NajemnikMinAggregateInputType = {
    id?: true
    jmeno?: true
    email?: true
    nemovitostId?: true
    mesicniNajem?: true
  }

  export type NajemnikMaxAggregateInputType = {
    id?: true
    jmeno?: true
    email?: true
    nemovitostId?: true
    mesicniNajem?: true
  }

  export type NajemnikCountAggregateInputType = {
    id?: true
    jmeno?: true
    email?: true
    nemovitostId?: true
    mesicniNajem?: true
    _all?: true
  }

  export type NajemnikAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Najemnik to aggregate.
     */
    where?: NajemnikWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Najemniks to fetch.
     */
    orderBy?: NajemnikOrderByWithRelationInput | NajemnikOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: NajemnikWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Najemniks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Najemniks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Najemniks
    **/
    _count?: true | NajemnikCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: NajemnikAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: NajemnikSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: NajemnikMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: NajemnikMaxAggregateInputType
  }

  export type GetNajemnikAggregateType<T extends NajemnikAggregateArgs> = {
        [P in keyof T & keyof AggregateNajemnik]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateNajemnik[P]>
      : GetScalarType<T[P], AggregateNajemnik[P]>
  }




  export type NajemnikGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: NajemnikWhereInput
    orderBy?: NajemnikOrderByWithAggregationInput | NajemnikOrderByWithAggregationInput[]
    by: NajemnikScalarFieldEnum[] | NajemnikScalarFieldEnum
    having?: NajemnikScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: NajemnikCountAggregateInputType | true
    _avg?: NajemnikAvgAggregateInputType
    _sum?: NajemnikSumAggregateInputType
    _min?: NajemnikMinAggregateInputType
    _max?: NajemnikMaxAggregateInputType
  }

  export type NajemnikGroupByOutputType = {
    id: number
    jmeno: string
    email: string
    nemovitostId: number
    mesicniNajem: number
    _count: NajemnikCountAggregateOutputType | null
    _avg: NajemnikAvgAggregateOutputType | null
    _sum: NajemnikSumAggregateOutputType | null
    _min: NajemnikMinAggregateOutputType | null
    _max: NajemnikMaxAggregateOutputType | null
  }

  type GetNajemnikGroupByPayload<T extends NajemnikGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<NajemnikGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof NajemnikGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], NajemnikGroupByOutputType[P]>
            : GetScalarType<T[P], NajemnikGroupByOutputType[P]>
        }
      >
    >


  export type NajemnikSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    jmeno?: boolean
    email?: boolean
    nemovitostId?: boolean
    mesicniNajem?: boolean
    nemovitost?: boolean | NemovitostDefaultArgs<ExtArgs>
    platby?: boolean | Najemnik$platbyArgs<ExtArgs>
    meridla?: boolean | Najemnik$meridlaArgs<ExtArgs>
    ukoly?: boolean | Najemnik$ukolyArgs<ExtArgs>
    _count?: boolean | NajemnikCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["najemnik"]>

  export type NajemnikSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    jmeno?: boolean
    email?: boolean
    nemovitostId?: boolean
    mesicniNajem?: boolean
    nemovitost?: boolean | NemovitostDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["najemnik"]>

  export type NajemnikSelectScalar = {
    id?: boolean
    jmeno?: boolean
    email?: boolean
    nemovitostId?: boolean
    mesicniNajem?: boolean
  }

  export type NajemnikInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    nemovitost?: boolean | NemovitostDefaultArgs<ExtArgs>
    platby?: boolean | Najemnik$platbyArgs<ExtArgs>
    meridla?: boolean | Najemnik$meridlaArgs<ExtArgs>
    ukoly?: boolean | Najemnik$ukolyArgs<ExtArgs>
    _count?: boolean | NajemnikCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type NajemnikIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    nemovitost?: boolean | NemovitostDefaultArgs<ExtArgs>
  }

  export type $NajemnikPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Najemnik"
    objects: {
      nemovitost: Prisma.$NemovitostPayload<ExtArgs>
      platby: Prisma.$PlatbaPayload<ExtArgs>[]
      meridla: Prisma.$MeridloPayload<ExtArgs>[]
      ukoly: Prisma.$UkolPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      jmeno: string
      email: string
      nemovitostId: number
      mesicniNajem: number
    }, ExtArgs["result"]["najemnik"]>
    composites: {}
  }

  type NajemnikGetPayload<S extends boolean | null | undefined | NajemnikDefaultArgs> = $Result.GetResult<Prisma.$NajemnikPayload, S>

  type NajemnikCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<NajemnikFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: NajemnikCountAggregateInputType | true
    }

  export interface NajemnikDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Najemnik'], meta: { name: 'Najemnik' } }
    /**
     * Find zero or one Najemnik that matches the filter.
     * @param {NajemnikFindUniqueArgs} args - Arguments to find a Najemnik
     * @example
     * // Get one Najemnik
     * const najemnik = await prisma.najemnik.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends NajemnikFindUniqueArgs>(args: SelectSubset<T, NajemnikFindUniqueArgs<ExtArgs>>): Prisma__NajemnikClient<$Result.GetResult<Prisma.$NajemnikPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Najemnik that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {NajemnikFindUniqueOrThrowArgs} args - Arguments to find a Najemnik
     * @example
     * // Get one Najemnik
     * const najemnik = await prisma.najemnik.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends NajemnikFindUniqueOrThrowArgs>(args: SelectSubset<T, NajemnikFindUniqueOrThrowArgs<ExtArgs>>): Prisma__NajemnikClient<$Result.GetResult<Prisma.$NajemnikPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Najemnik that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NajemnikFindFirstArgs} args - Arguments to find a Najemnik
     * @example
     * // Get one Najemnik
     * const najemnik = await prisma.najemnik.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends NajemnikFindFirstArgs>(args?: SelectSubset<T, NajemnikFindFirstArgs<ExtArgs>>): Prisma__NajemnikClient<$Result.GetResult<Prisma.$NajemnikPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Najemnik that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NajemnikFindFirstOrThrowArgs} args - Arguments to find a Najemnik
     * @example
     * // Get one Najemnik
     * const najemnik = await prisma.najemnik.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends NajemnikFindFirstOrThrowArgs>(args?: SelectSubset<T, NajemnikFindFirstOrThrowArgs<ExtArgs>>): Prisma__NajemnikClient<$Result.GetResult<Prisma.$NajemnikPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Najemniks that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NajemnikFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Najemniks
     * const najemniks = await prisma.najemnik.findMany()
     * 
     * // Get first 10 Najemniks
     * const najemniks = await prisma.najemnik.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const najemnikWithIdOnly = await prisma.najemnik.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends NajemnikFindManyArgs>(args?: SelectSubset<T, NajemnikFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NajemnikPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Najemnik.
     * @param {NajemnikCreateArgs} args - Arguments to create a Najemnik.
     * @example
     * // Create one Najemnik
     * const Najemnik = await prisma.najemnik.create({
     *   data: {
     *     // ... data to create a Najemnik
     *   }
     * })
     * 
     */
    create<T extends NajemnikCreateArgs>(args: SelectSubset<T, NajemnikCreateArgs<ExtArgs>>): Prisma__NajemnikClient<$Result.GetResult<Prisma.$NajemnikPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Najemniks.
     * @param {NajemnikCreateManyArgs} args - Arguments to create many Najemniks.
     * @example
     * // Create many Najemniks
     * const najemnik = await prisma.najemnik.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends NajemnikCreateManyArgs>(args?: SelectSubset<T, NajemnikCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Najemniks and returns the data saved in the database.
     * @param {NajemnikCreateManyAndReturnArgs} args - Arguments to create many Najemniks.
     * @example
     * // Create many Najemniks
     * const najemnik = await prisma.najemnik.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Najemniks and only return the `id`
     * const najemnikWithIdOnly = await prisma.najemnik.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends NajemnikCreateManyAndReturnArgs>(args?: SelectSubset<T, NajemnikCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NajemnikPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Najemnik.
     * @param {NajemnikDeleteArgs} args - Arguments to delete one Najemnik.
     * @example
     * // Delete one Najemnik
     * const Najemnik = await prisma.najemnik.delete({
     *   where: {
     *     // ... filter to delete one Najemnik
     *   }
     * })
     * 
     */
    delete<T extends NajemnikDeleteArgs>(args: SelectSubset<T, NajemnikDeleteArgs<ExtArgs>>): Prisma__NajemnikClient<$Result.GetResult<Prisma.$NajemnikPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Najemnik.
     * @param {NajemnikUpdateArgs} args - Arguments to update one Najemnik.
     * @example
     * // Update one Najemnik
     * const najemnik = await prisma.najemnik.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends NajemnikUpdateArgs>(args: SelectSubset<T, NajemnikUpdateArgs<ExtArgs>>): Prisma__NajemnikClient<$Result.GetResult<Prisma.$NajemnikPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Najemniks.
     * @param {NajemnikDeleteManyArgs} args - Arguments to filter Najemniks to delete.
     * @example
     * // Delete a few Najemniks
     * const { count } = await prisma.najemnik.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends NajemnikDeleteManyArgs>(args?: SelectSubset<T, NajemnikDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Najemniks.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NajemnikUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Najemniks
     * const najemnik = await prisma.najemnik.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends NajemnikUpdateManyArgs>(args: SelectSubset<T, NajemnikUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Najemnik.
     * @param {NajemnikUpsertArgs} args - Arguments to update or create a Najemnik.
     * @example
     * // Update or create a Najemnik
     * const najemnik = await prisma.najemnik.upsert({
     *   create: {
     *     // ... data to create a Najemnik
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Najemnik we want to update
     *   }
     * })
     */
    upsert<T extends NajemnikUpsertArgs>(args: SelectSubset<T, NajemnikUpsertArgs<ExtArgs>>): Prisma__NajemnikClient<$Result.GetResult<Prisma.$NajemnikPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Najemniks.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NajemnikCountArgs} args - Arguments to filter Najemniks to count.
     * @example
     * // Count the number of Najemniks
     * const count = await prisma.najemnik.count({
     *   where: {
     *     // ... the filter for the Najemniks we want to count
     *   }
     * })
    **/
    count<T extends NajemnikCountArgs>(
      args?: Subset<T, NajemnikCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], NajemnikCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Najemnik.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NajemnikAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends NajemnikAggregateArgs>(args: Subset<T, NajemnikAggregateArgs>): Prisma.PrismaPromise<GetNajemnikAggregateType<T>>

    /**
     * Group by Najemnik.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NajemnikGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends NajemnikGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: NajemnikGroupByArgs['orderBy'] }
        : { orderBy?: NajemnikGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, NajemnikGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetNajemnikGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Najemnik model
   */
  readonly fields: NajemnikFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Najemnik.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__NajemnikClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    nemovitost<T extends NemovitostDefaultArgs<ExtArgs> = {}>(args?: Subset<T, NemovitostDefaultArgs<ExtArgs>>): Prisma__NemovitostClient<$Result.GetResult<Prisma.$NemovitostPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    platby<T extends Najemnik$platbyArgs<ExtArgs> = {}>(args?: Subset<T, Najemnik$platbyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PlatbaPayload<ExtArgs>, T, "findMany"> | Null>
    meridla<T extends Najemnik$meridlaArgs<ExtArgs> = {}>(args?: Subset<T, Najemnik$meridlaArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MeridloPayload<ExtArgs>, T, "findMany"> | Null>
    ukoly<T extends Najemnik$ukolyArgs<ExtArgs> = {}>(args?: Subset<T, Najemnik$ukolyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UkolPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Najemnik model
   */ 
  interface NajemnikFieldRefs {
    readonly id: FieldRef<"Najemnik", 'Int'>
    readonly jmeno: FieldRef<"Najemnik", 'String'>
    readonly email: FieldRef<"Najemnik", 'String'>
    readonly nemovitostId: FieldRef<"Najemnik", 'Int'>
    readonly mesicniNajem: FieldRef<"Najemnik", 'Float'>
  }
    

  // Custom InputTypes
  /**
   * Najemnik findUnique
   */
  export type NajemnikFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Najemnik
     */
    select?: NajemnikSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NajemnikInclude<ExtArgs> | null
    /**
     * Filter, which Najemnik to fetch.
     */
    where: NajemnikWhereUniqueInput
  }

  /**
   * Najemnik findUniqueOrThrow
   */
  export type NajemnikFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Najemnik
     */
    select?: NajemnikSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NajemnikInclude<ExtArgs> | null
    /**
     * Filter, which Najemnik to fetch.
     */
    where: NajemnikWhereUniqueInput
  }

  /**
   * Najemnik findFirst
   */
  export type NajemnikFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Najemnik
     */
    select?: NajemnikSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NajemnikInclude<ExtArgs> | null
    /**
     * Filter, which Najemnik to fetch.
     */
    where?: NajemnikWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Najemniks to fetch.
     */
    orderBy?: NajemnikOrderByWithRelationInput | NajemnikOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Najemniks.
     */
    cursor?: NajemnikWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Najemniks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Najemniks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Najemniks.
     */
    distinct?: NajemnikScalarFieldEnum | NajemnikScalarFieldEnum[]
  }

  /**
   * Najemnik findFirstOrThrow
   */
  export type NajemnikFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Najemnik
     */
    select?: NajemnikSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NajemnikInclude<ExtArgs> | null
    /**
     * Filter, which Najemnik to fetch.
     */
    where?: NajemnikWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Najemniks to fetch.
     */
    orderBy?: NajemnikOrderByWithRelationInput | NajemnikOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Najemniks.
     */
    cursor?: NajemnikWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Najemniks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Najemniks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Najemniks.
     */
    distinct?: NajemnikScalarFieldEnum | NajemnikScalarFieldEnum[]
  }

  /**
   * Najemnik findMany
   */
  export type NajemnikFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Najemnik
     */
    select?: NajemnikSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NajemnikInclude<ExtArgs> | null
    /**
     * Filter, which Najemniks to fetch.
     */
    where?: NajemnikWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Najemniks to fetch.
     */
    orderBy?: NajemnikOrderByWithRelationInput | NajemnikOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Najemniks.
     */
    cursor?: NajemnikWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Najemniks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Najemniks.
     */
    skip?: number
    distinct?: NajemnikScalarFieldEnum | NajemnikScalarFieldEnum[]
  }

  /**
   * Najemnik create
   */
  export type NajemnikCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Najemnik
     */
    select?: NajemnikSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NajemnikInclude<ExtArgs> | null
    /**
     * The data needed to create a Najemnik.
     */
    data: XOR<NajemnikCreateInput, NajemnikUncheckedCreateInput>
  }

  /**
   * Najemnik createMany
   */
  export type NajemnikCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Najemniks.
     */
    data: NajemnikCreateManyInput | NajemnikCreateManyInput[]
  }

  /**
   * Najemnik createManyAndReturn
   */
  export type NajemnikCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Najemnik
     */
    select?: NajemnikSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Najemniks.
     */
    data: NajemnikCreateManyInput | NajemnikCreateManyInput[]
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NajemnikIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Najemnik update
   */
  export type NajemnikUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Najemnik
     */
    select?: NajemnikSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NajemnikInclude<ExtArgs> | null
    /**
     * The data needed to update a Najemnik.
     */
    data: XOR<NajemnikUpdateInput, NajemnikUncheckedUpdateInput>
    /**
     * Choose, which Najemnik to update.
     */
    where: NajemnikWhereUniqueInput
  }

  /**
   * Najemnik updateMany
   */
  export type NajemnikUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Najemniks.
     */
    data: XOR<NajemnikUpdateManyMutationInput, NajemnikUncheckedUpdateManyInput>
    /**
     * Filter which Najemniks to update
     */
    where?: NajemnikWhereInput
  }

  /**
   * Najemnik upsert
   */
  export type NajemnikUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Najemnik
     */
    select?: NajemnikSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NajemnikInclude<ExtArgs> | null
    /**
     * The filter to search for the Najemnik to update in case it exists.
     */
    where: NajemnikWhereUniqueInput
    /**
     * In case the Najemnik found by the `where` argument doesn't exist, create a new Najemnik with this data.
     */
    create: XOR<NajemnikCreateInput, NajemnikUncheckedCreateInput>
    /**
     * In case the Najemnik was found with the provided `where` argument, update it with this data.
     */
    update: XOR<NajemnikUpdateInput, NajemnikUncheckedUpdateInput>
  }

  /**
   * Najemnik delete
   */
  export type NajemnikDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Najemnik
     */
    select?: NajemnikSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NajemnikInclude<ExtArgs> | null
    /**
     * Filter which Najemnik to delete.
     */
    where: NajemnikWhereUniqueInput
  }

  /**
   * Najemnik deleteMany
   */
  export type NajemnikDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Najemniks to delete
     */
    where?: NajemnikWhereInput
  }

  /**
   * Najemnik.platby
   */
  export type Najemnik$platbyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Platba
     */
    select?: PlatbaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlatbaInclude<ExtArgs> | null
    where?: PlatbaWhereInput
    orderBy?: PlatbaOrderByWithRelationInput | PlatbaOrderByWithRelationInput[]
    cursor?: PlatbaWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PlatbaScalarFieldEnum | PlatbaScalarFieldEnum[]
  }

  /**
   * Najemnik.meridla
   */
  export type Najemnik$meridlaArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Meridlo
     */
    select?: MeridloSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MeridloInclude<ExtArgs> | null
    where?: MeridloWhereInput
    orderBy?: MeridloOrderByWithRelationInput | MeridloOrderByWithRelationInput[]
    cursor?: MeridloWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MeridloScalarFieldEnum | MeridloScalarFieldEnum[]
  }

  /**
   * Najemnik.ukoly
   */
  export type Najemnik$ukolyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ukol
     */
    select?: UkolSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UkolInclude<ExtArgs> | null
    where?: UkolWhereInput
    orderBy?: UkolOrderByWithRelationInput | UkolOrderByWithRelationInput[]
    cursor?: UkolWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UkolScalarFieldEnum | UkolScalarFieldEnum[]
  }

  /**
   * Najemnik without action
   */
  export type NajemnikDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Najemnik
     */
    select?: NajemnikSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NajemnikInclude<ExtArgs> | null
  }


  /**
   * Model Platba
   */

  export type AggregatePlatba = {
    _count: PlatbaCountAggregateOutputType | null
    _avg: PlatbaAvgAggregateOutputType | null
    _sum: PlatbaSumAggregateOutputType | null
    _min: PlatbaMinAggregateOutputType | null
    _max: PlatbaMaxAggregateOutputType | null
  }

  export type PlatbaAvgAggregateOutputType = {
    id: number | null
    castka: number | null
    najemnikId: number | null
  }

  export type PlatbaSumAggregateOutputType = {
    id: number | null
    castka: number | null
    najemnikId: number | null
  }

  export type PlatbaMinAggregateOutputType = {
    id: number | null
    castka: number | null
    datum: Date | null
    najemnikId: number | null
  }

  export type PlatbaMaxAggregateOutputType = {
    id: number | null
    castka: number | null
    datum: Date | null
    najemnikId: number | null
  }

  export type PlatbaCountAggregateOutputType = {
    id: number
    castka: number
    datum: number
    najemnikId: number
    _all: number
  }


  export type PlatbaAvgAggregateInputType = {
    id?: true
    castka?: true
    najemnikId?: true
  }

  export type PlatbaSumAggregateInputType = {
    id?: true
    castka?: true
    najemnikId?: true
  }

  export type PlatbaMinAggregateInputType = {
    id?: true
    castka?: true
    datum?: true
    najemnikId?: true
  }

  export type PlatbaMaxAggregateInputType = {
    id?: true
    castka?: true
    datum?: true
    najemnikId?: true
  }

  export type PlatbaCountAggregateInputType = {
    id?: true
    castka?: true
    datum?: true
    najemnikId?: true
    _all?: true
  }

  export type PlatbaAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Platba to aggregate.
     */
    where?: PlatbaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Platbas to fetch.
     */
    orderBy?: PlatbaOrderByWithRelationInput | PlatbaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PlatbaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Platbas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Platbas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Platbas
    **/
    _count?: true | PlatbaCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PlatbaAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PlatbaSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PlatbaMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PlatbaMaxAggregateInputType
  }

  export type GetPlatbaAggregateType<T extends PlatbaAggregateArgs> = {
        [P in keyof T & keyof AggregatePlatba]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePlatba[P]>
      : GetScalarType<T[P], AggregatePlatba[P]>
  }




  export type PlatbaGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PlatbaWhereInput
    orderBy?: PlatbaOrderByWithAggregationInput | PlatbaOrderByWithAggregationInput[]
    by: PlatbaScalarFieldEnum[] | PlatbaScalarFieldEnum
    having?: PlatbaScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PlatbaCountAggregateInputType | true
    _avg?: PlatbaAvgAggregateInputType
    _sum?: PlatbaSumAggregateInputType
    _min?: PlatbaMinAggregateInputType
    _max?: PlatbaMaxAggregateInputType
  }

  export type PlatbaGroupByOutputType = {
    id: number
    castka: number
    datum: Date
    najemnikId: number
    _count: PlatbaCountAggregateOutputType | null
    _avg: PlatbaAvgAggregateOutputType | null
    _sum: PlatbaSumAggregateOutputType | null
    _min: PlatbaMinAggregateOutputType | null
    _max: PlatbaMaxAggregateOutputType | null
  }

  type GetPlatbaGroupByPayload<T extends PlatbaGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PlatbaGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PlatbaGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PlatbaGroupByOutputType[P]>
            : GetScalarType<T[P], PlatbaGroupByOutputType[P]>
        }
      >
    >


  export type PlatbaSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    castka?: boolean
    datum?: boolean
    najemnikId?: boolean
    najemnik?: boolean | NajemnikDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["platba"]>

  export type PlatbaSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    castka?: boolean
    datum?: boolean
    najemnikId?: boolean
    najemnik?: boolean | NajemnikDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["platba"]>

  export type PlatbaSelectScalar = {
    id?: boolean
    castka?: boolean
    datum?: boolean
    najemnikId?: boolean
  }

  export type PlatbaInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    najemnik?: boolean | NajemnikDefaultArgs<ExtArgs>
  }
  export type PlatbaIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    najemnik?: boolean | NajemnikDefaultArgs<ExtArgs>
  }

  export type $PlatbaPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Platba"
    objects: {
      najemnik: Prisma.$NajemnikPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      castka: number
      datum: Date
      najemnikId: number
    }, ExtArgs["result"]["platba"]>
    composites: {}
  }

  type PlatbaGetPayload<S extends boolean | null | undefined | PlatbaDefaultArgs> = $Result.GetResult<Prisma.$PlatbaPayload, S>

  type PlatbaCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<PlatbaFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: PlatbaCountAggregateInputType | true
    }

  export interface PlatbaDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Platba'], meta: { name: 'Platba' } }
    /**
     * Find zero or one Platba that matches the filter.
     * @param {PlatbaFindUniqueArgs} args - Arguments to find a Platba
     * @example
     * // Get one Platba
     * const platba = await prisma.platba.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PlatbaFindUniqueArgs>(args: SelectSubset<T, PlatbaFindUniqueArgs<ExtArgs>>): Prisma__PlatbaClient<$Result.GetResult<Prisma.$PlatbaPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Platba that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {PlatbaFindUniqueOrThrowArgs} args - Arguments to find a Platba
     * @example
     * // Get one Platba
     * const platba = await prisma.platba.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PlatbaFindUniqueOrThrowArgs>(args: SelectSubset<T, PlatbaFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PlatbaClient<$Result.GetResult<Prisma.$PlatbaPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Platba that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlatbaFindFirstArgs} args - Arguments to find a Platba
     * @example
     * // Get one Platba
     * const platba = await prisma.platba.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PlatbaFindFirstArgs>(args?: SelectSubset<T, PlatbaFindFirstArgs<ExtArgs>>): Prisma__PlatbaClient<$Result.GetResult<Prisma.$PlatbaPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Platba that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlatbaFindFirstOrThrowArgs} args - Arguments to find a Platba
     * @example
     * // Get one Platba
     * const platba = await prisma.platba.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PlatbaFindFirstOrThrowArgs>(args?: SelectSubset<T, PlatbaFindFirstOrThrowArgs<ExtArgs>>): Prisma__PlatbaClient<$Result.GetResult<Prisma.$PlatbaPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Platbas that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlatbaFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Platbas
     * const platbas = await prisma.platba.findMany()
     * 
     * // Get first 10 Platbas
     * const platbas = await prisma.platba.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const platbaWithIdOnly = await prisma.platba.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends PlatbaFindManyArgs>(args?: SelectSubset<T, PlatbaFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PlatbaPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Platba.
     * @param {PlatbaCreateArgs} args - Arguments to create a Platba.
     * @example
     * // Create one Platba
     * const Platba = await prisma.platba.create({
     *   data: {
     *     // ... data to create a Platba
     *   }
     * })
     * 
     */
    create<T extends PlatbaCreateArgs>(args: SelectSubset<T, PlatbaCreateArgs<ExtArgs>>): Prisma__PlatbaClient<$Result.GetResult<Prisma.$PlatbaPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Platbas.
     * @param {PlatbaCreateManyArgs} args - Arguments to create many Platbas.
     * @example
     * // Create many Platbas
     * const platba = await prisma.platba.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PlatbaCreateManyArgs>(args?: SelectSubset<T, PlatbaCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Platbas and returns the data saved in the database.
     * @param {PlatbaCreateManyAndReturnArgs} args - Arguments to create many Platbas.
     * @example
     * // Create many Platbas
     * const platba = await prisma.platba.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Platbas and only return the `id`
     * const platbaWithIdOnly = await prisma.platba.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends PlatbaCreateManyAndReturnArgs>(args?: SelectSubset<T, PlatbaCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PlatbaPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Platba.
     * @param {PlatbaDeleteArgs} args - Arguments to delete one Platba.
     * @example
     * // Delete one Platba
     * const Platba = await prisma.platba.delete({
     *   where: {
     *     // ... filter to delete one Platba
     *   }
     * })
     * 
     */
    delete<T extends PlatbaDeleteArgs>(args: SelectSubset<T, PlatbaDeleteArgs<ExtArgs>>): Prisma__PlatbaClient<$Result.GetResult<Prisma.$PlatbaPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Platba.
     * @param {PlatbaUpdateArgs} args - Arguments to update one Platba.
     * @example
     * // Update one Platba
     * const platba = await prisma.platba.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PlatbaUpdateArgs>(args: SelectSubset<T, PlatbaUpdateArgs<ExtArgs>>): Prisma__PlatbaClient<$Result.GetResult<Prisma.$PlatbaPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Platbas.
     * @param {PlatbaDeleteManyArgs} args - Arguments to filter Platbas to delete.
     * @example
     * // Delete a few Platbas
     * const { count } = await prisma.platba.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PlatbaDeleteManyArgs>(args?: SelectSubset<T, PlatbaDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Platbas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlatbaUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Platbas
     * const platba = await prisma.platba.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PlatbaUpdateManyArgs>(args: SelectSubset<T, PlatbaUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Platba.
     * @param {PlatbaUpsertArgs} args - Arguments to update or create a Platba.
     * @example
     * // Update or create a Platba
     * const platba = await prisma.platba.upsert({
     *   create: {
     *     // ... data to create a Platba
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Platba we want to update
     *   }
     * })
     */
    upsert<T extends PlatbaUpsertArgs>(args: SelectSubset<T, PlatbaUpsertArgs<ExtArgs>>): Prisma__PlatbaClient<$Result.GetResult<Prisma.$PlatbaPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Platbas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlatbaCountArgs} args - Arguments to filter Platbas to count.
     * @example
     * // Count the number of Platbas
     * const count = await prisma.platba.count({
     *   where: {
     *     // ... the filter for the Platbas we want to count
     *   }
     * })
    **/
    count<T extends PlatbaCountArgs>(
      args?: Subset<T, PlatbaCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PlatbaCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Platba.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlatbaAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PlatbaAggregateArgs>(args: Subset<T, PlatbaAggregateArgs>): Prisma.PrismaPromise<GetPlatbaAggregateType<T>>

    /**
     * Group by Platba.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlatbaGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PlatbaGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PlatbaGroupByArgs['orderBy'] }
        : { orderBy?: PlatbaGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PlatbaGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPlatbaGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Platba model
   */
  readonly fields: PlatbaFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Platba.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PlatbaClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    najemnik<T extends NajemnikDefaultArgs<ExtArgs> = {}>(args?: Subset<T, NajemnikDefaultArgs<ExtArgs>>): Prisma__NajemnikClient<$Result.GetResult<Prisma.$NajemnikPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Platba model
   */ 
  interface PlatbaFieldRefs {
    readonly id: FieldRef<"Platba", 'Int'>
    readonly castka: FieldRef<"Platba", 'Float'>
    readonly datum: FieldRef<"Platba", 'DateTime'>
    readonly najemnikId: FieldRef<"Platba", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Platba findUnique
   */
  export type PlatbaFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Platba
     */
    select?: PlatbaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlatbaInclude<ExtArgs> | null
    /**
     * Filter, which Platba to fetch.
     */
    where: PlatbaWhereUniqueInput
  }

  /**
   * Platba findUniqueOrThrow
   */
  export type PlatbaFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Platba
     */
    select?: PlatbaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlatbaInclude<ExtArgs> | null
    /**
     * Filter, which Platba to fetch.
     */
    where: PlatbaWhereUniqueInput
  }

  /**
   * Platba findFirst
   */
  export type PlatbaFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Platba
     */
    select?: PlatbaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlatbaInclude<ExtArgs> | null
    /**
     * Filter, which Platba to fetch.
     */
    where?: PlatbaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Platbas to fetch.
     */
    orderBy?: PlatbaOrderByWithRelationInput | PlatbaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Platbas.
     */
    cursor?: PlatbaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Platbas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Platbas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Platbas.
     */
    distinct?: PlatbaScalarFieldEnum | PlatbaScalarFieldEnum[]
  }

  /**
   * Platba findFirstOrThrow
   */
  export type PlatbaFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Platba
     */
    select?: PlatbaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlatbaInclude<ExtArgs> | null
    /**
     * Filter, which Platba to fetch.
     */
    where?: PlatbaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Platbas to fetch.
     */
    orderBy?: PlatbaOrderByWithRelationInput | PlatbaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Platbas.
     */
    cursor?: PlatbaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Platbas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Platbas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Platbas.
     */
    distinct?: PlatbaScalarFieldEnum | PlatbaScalarFieldEnum[]
  }

  /**
   * Platba findMany
   */
  export type PlatbaFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Platba
     */
    select?: PlatbaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlatbaInclude<ExtArgs> | null
    /**
     * Filter, which Platbas to fetch.
     */
    where?: PlatbaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Platbas to fetch.
     */
    orderBy?: PlatbaOrderByWithRelationInput | PlatbaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Platbas.
     */
    cursor?: PlatbaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Platbas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Platbas.
     */
    skip?: number
    distinct?: PlatbaScalarFieldEnum | PlatbaScalarFieldEnum[]
  }

  /**
   * Platba create
   */
  export type PlatbaCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Platba
     */
    select?: PlatbaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlatbaInclude<ExtArgs> | null
    /**
     * The data needed to create a Platba.
     */
    data: XOR<PlatbaCreateInput, PlatbaUncheckedCreateInput>
  }

  /**
   * Platba createMany
   */
  export type PlatbaCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Platbas.
     */
    data: PlatbaCreateManyInput | PlatbaCreateManyInput[]
  }

  /**
   * Platba createManyAndReturn
   */
  export type PlatbaCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Platba
     */
    select?: PlatbaSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Platbas.
     */
    data: PlatbaCreateManyInput | PlatbaCreateManyInput[]
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlatbaIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Platba update
   */
  export type PlatbaUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Platba
     */
    select?: PlatbaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlatbaInclude<ExtArgs> | null
    /**
     * The data needed to update a Platba.
     */
    data: XOR<PlatbaUpdateInput, PlatbaUncheckedUpdateInput>
    /**
     * Choose, which Platba to update.
     */
    where: PlatbaWhereUniqueInput
  }

  /**
   * Platba updateMany
   */
  export type PlatbaUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Platbas.
     */
    data: XOR<PlatbaUpdateManyMutationInput, PlatbaUncheckedUpdateManyInput>
    /**
     * Filter which Platbas to update
     */
    where?: PlatbaWhereInput
  }

  /**
   * Platba upsert
   */
  export type PlatbaUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Platba
     */
    select?: PlatbaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlatbaInclude<ExtArgs> | null
    /**
     * The filter to search for the Platba to update in case it exists.
     */
    where: PlatbaWhereUniqueInput
    /**
     * In case the Platba found by the `where` argument doesn't exist, create a new Platba with this data.
     */
    create: XOR<PlatbaCreateInput, PlatbaUncheckedCreateInput>
    /**
     * In case the Platba was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PlatbaUpdateInput, PlatbaUncheckedUpdateInput>
  }

  /**
   * Platba delete
   */
  export type PlatbaDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Platba
     */
    select?: PlatbaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlatbaInclude<ExtArgs> | null
    /**
     * Filter which Platba to delete.
     */
    where: PlatbaWhereUniqueInput
  }

  /**
   * Platba deleteMany
   */
  export type PlatbaDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Platbas to delete
     */
    where?: PlatbaWhereInput
  }

  /**
   * Platba without action
   */
  export type PlatbaDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Platba
     */
    select?: PlatbaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlatbaInclude<ExtArgs> | null
  }


  /**
   * Model Ukol
   */

  export type AggregateUkol = {
    _count: UkolCountAggregateOutputType | null
    _avg: UkolAvgAggregateOutputType | null
    _sum: UkolSumAggregateOutputType | null
    _min: UkolMinAggregateOutputType | null
    _max: UkolMaxAggregateOutputType | null
  }

  export type UkolAvgAggregateOutputType = {
    id: number | null
    najemnikId: number | null
  }

  export type UkolSumAggregateOutputType = {
    id: number | null
    najemnikId: number | null
  }

  export type UkolMinAggregateOutputType = {
    id: number | null
    popis: string | null
    datum: Date | null
    status: string | null
    najemnikId: number | null
  }

  export type UkolMaxAggregateOutputType = {
    id: number | null
    popis: string | null
    datum: Date | null
    status: string | null
    najemnikId: number | null
  }

  export type UkolCountAggregateOutputType = {
    id: number
    popis: number
    datum: number
    status: number
    najemnikId: number
    _all: number
  }


  export type UkolAvgAggregateInputType = {
    id?: true
    najemnikId?: true
  }

  export type UkolSumAggregateInputType = {
    id?: true
    najemnikId?: true
  }

  export type UkolMinAggregateInputType = {
    id?: true
    popis?: true
    datum?: true
    status?: true
    najemnikId?: true
  }

  export type UkolMaxAggregateInputType = {
    id?: true
    popis?: true
    datum?: true
    status?: true
    najemnikId?: true
  }

  export type UkolCountAggregateInputType = {
    id?: true
    popis?: true
    datum?: true
    status?: true
    najemnikId?: true
    _all?: true
  }

  export type UkolAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Ukol to aggregate.
     */
    where?: UkolWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Ukols to fetch.
     */
    orderBy?: UkolOrderByWithRelationInput | UkolOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UkolWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Ukols from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Ukols.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Ukols
    **/
    _count?: true | UkolCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UkolAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UkolSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UkolMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UkolMaxAggregateInputType
  }

  export type GetUkolAggregateType<T extends UkolAggregateArgs> = {
        [P in keyof T & keyof AggregateUkol]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUkol[P]>
      : GetScalarType<T[P], AggregateUkol[P]>
  }




  export type UkolGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UkolWhereInput
    orderBy?: UkolOrderByWithAggregationInput | UkolOrderByWithAggregationInput[]
    by: UkolScalarFieldEnum[] | UkolScalarFieldEnum
    having?: UkolScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UkolCountAggregateInputType | true
    _avg?: UkolAvgAggregateInputType
    _sum?: UkolSumAggregateInputType
    _min?: UkolMinAggregateInputType
    _max?: UkolMaxAggregateInputType
  }

  export type UkolGroupByOutputType = {
    id: number
    popis: string
    datum: Date
    status: string
    najemnikId: number
    _count: UkolCountAggregateOutputType | null
    _avg: UkolAvgAggregateOutputType | null
    _sum: UkolSumAggregateOutputType | null
    _min: UkolMinAggregateOutputType | null
    _max: UkolMaxAggregateOutputType | null
  }

  type GetUkolGroupByPayload<T extends UkolGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UkolGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UkolGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UkolGroupByOutputType[P]>
            : GetScalarType<T[P], UkolGroupByOutputType[P]>
        }
      >
    >


  export type UkolSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    popis?: boolean
    datum?: boolean
    status?: boolean
    najemnikId?: boolean
    najemnik?: boolean | NajemnikDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["ukol"]>

  export type UkolSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    popis?: boolean
    datum?: boolean
    status?: boolean
    najemnikId?: boolean
    najemnik?: boolean | NajemnikDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["ukol"]>

  export type UkolSelectScalar = {
    id?: boolean
    popis?: boolean
    datum?: boolean
    status?: boolean
    najemnikId?: boolean
  }

  export type UkolInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    najemnik?: boolean | NajemnikDefaultArgs<ExtArgs>
  }
  export type UkolIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    najemnik?: boolean | NajemnikDefaultArgs<ExtArgs>
  }

  export type $UkolPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Ukol"
    objects: {
      najemnik: Prisma.$NajemnikPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      popis: string
      datum: Date
      status: string
      najemnikId: number
    }, ExtArgs["result"]["ukol"]>
    composites: {}
  }

  type UkolGetPayload<S extends boolean | null | undefined | UkolDefaultArgs> = $Result.GetResult<Prisma.$UkolPayload, S>

  type UkolCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<UkolFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: UkolCountAggregateInputType | true
    }

  export interface UkolDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Ukol'], meta: { name: 'Ukol' } }
    /**
     * Find zero or one Ukol that matches the filter.
     * @param {UkolFindUniqueArgs} args - Arguments to find a Ukol
     * @example
     * // Get one Ukol
     * const ukol = await prisma.ukol.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UkolFindUniqueArgs>(args: SelectSubset<T, UkolFindUniqueArgs<ExtArgs>>): Prisma__UkolClient<$Result.GetResult<Prisma.$UkolPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Ukol that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {UkolFindUniqueOrThrowArgs} args - Arguments to find a Ukol
     * @example
     * // Get one Ukol
     * const ukol = await prisma.ukol.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UkolFindUniqueOrThrowArgs>(args: SelectSubset<T, UkolFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UkolClient<$Result.GetResult<Prisma.$UkolPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Ukol that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UkolFindFirstArgs} args - Arguments to find a Ukol
     * @example
     * // Get one Ukol
     * const ukol = await prisma.ukol.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UkolFindFirstArgs>(args?: SelectSubset<T, UkolFindFirstArgs<ExtArgs>>): Prisma__UkolClient<$Result.GetResult<Prisma.$UkolPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Ukol that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UkolFindFirstOrThrowArgs} args - Arguments to find a Ukol
     * @example
     * // Get one Ukol
     * const ukol = await prisma.ukol.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UkolFindFirstOrThrowArgs>(args?: SelectSubset<T, UkolFindFirstOrThrowArgs<ExtArgs>>): Prisma__UkolClient<$Result.GetResult<Prisma.$UkolPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Ukols that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UkolFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Ukols
     * const ukols = await prisma.ukol.findMany()
     * 
     * // Get first 10 Ukols
     * const ukols = await prisma.ukol.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const ukolWithIdOnly = await prisma.ukol.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UkolFindManyArgs>(args?: SelectSubset<T, UkolFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UkolPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Ukol.
     * @param {UkolCreateArgs} args - Arguments to create a Ukol.
     * @example
     * // Create one Ukol
     * const Ukol = await prisma.ukol.create({
     *   data: {
     *     // ... data to create a Ukol
     *   }
     * })
     * 
     */
    create<T extends UkolCreateArgs>(args: SelectSubset<T, UkolCreateArgs<ExtArgs>>): Prisma__UkolClient<$Result.GetResult<Prisma.$UkolPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Ukols.
     * @param {UkolCreateManyArgs} args - Arguments to create many Ukols.
     * @example
     * // Create many Ukols
     * const ukol = await prisma.ukol.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UkolCreateManyArgs>(args?: SelectSubset<T, UkolCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Ukols and returns the data saved in the database.
     * @param {UkolCreateManyAndReturnArgs} args - Arguments to create many Ukols.
     * @example
     * // Create many Ukols
     * const ukol = await prisma.ukol.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Ukols and only return the `id`
     * const ukolWithIdOnly = await prisma.ukol.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UkolCreateManyAndReturnArgs>(args?: SelectSubset<T, UkolCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UkolPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Ukol.
     * @param {UkolDeleteArgs} args - Arguments to delete one Ukol.
     * @example
     * // Delete one Ukol
     * const Ukol = await prisma.ukol.delete({
     *   where: {
     *     // ... filter to delete one Ukol
     *   }
     * })
     * 
     */
    delete<T extends UkolDeleteArgs>(args: SelectSubset<T, UkolDeleteArgs<ExtArgs>>): Prisma__UkolClient<$Result.GetResult<Prisma.$UkolPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Ukol.
     * @param {UkolUpdateArgs} args - Arguments to update one Ukol.
     * @example
     * // Update one Ukol
     * const ukol = await prisma.ukol.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UkolUpdateArgs>(args: SelectSubset<T, UkolUpdateArgs<ExtArgs>>): Prisma__UkolClient<$Result.GetResult<Prisma.$UkolPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Ukols.
     * @param {UkolDeleteManyArgs} args - Arguments to filter Ukols to delete.
     * @example
     * // Delete a few Ukols
     * const { count } = await prisma.ukol.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UkolDeleteManyArgs>(args?: SelectSubset<T, UkolDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Ukols.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UkolUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Ukols
     * const ukol = await prisma.ukol.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UkolUpdateManyArgs>(args: SelectSubset<T, UkolUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Ukol.
     * @param {UkolUpsertArgs} args - Arguments to update or create a Ukol.
     * @example
     * // Update or create a Ukol
     * const ukol = await prisma.ukol.upsert({
     *   create: {
     *     // ... data to create a Ukol
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Ukol we want to update
     *   }
     * })
     */
    upsert<T extends UkolUpsertArgs>(args: SelectSubset<T, UkolUpsertArgs<ExtArgs>>): Prisma__UkolClient<$Result.GetResult<Prisma.$UkolPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Ukols.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UkolCountArgs} args - Arguments to filter Ukols to count.
     * @example
     * // Count the number of Ukols
     * const count = await prisma.ukol.count({
     *   where: {
     *     // ... the filter for the Ukols we want to count
     *   }
     * })
    **/
    count<T extends UkolCountArgs>(
      args?: Subset<T, UkolCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UkolCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Ukol.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UkolAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UkolAggregateArgs>(args: Subset<T, UkolAggregateArgs>): Prisma.PrismaPromise<GetUkolAggregateType<T>>

    /**
     * Group by Ukol.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UkolGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UkolGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UkolGroupByArgs['orderBy'] }
        : { orderBy?: UkolGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UkolGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUkolGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Ukol model
   */
  readonly fields: UkolFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Ukol.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UkolClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    najemnik<T extends NajemnikDefaultArgs<ExtArgs> = {}>(args?: Subset<T, NajemnikDefaultArgs<ExtArgs>>): Prisma__NajemnikClient<$Result.GetResult<Prisma.$NajemnikPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Ukol model
   */ 
  interface UkolFieldRefs {
    readonly id: FieldRef<"Ukol", 'Int'>
    readonly popis: FieldRef<"Ukol", 'String'>
    readonly datum: FieldRef<"Ukol", 'DateTime'>
    readonly status: FieldRef<"Ukol", 'String'>
    readonly najemnikId: FieldRef<"Ukol", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Ukol findUnique
   */
  export type UkolFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ukol
     */
    select?: UkolSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UkolInclude<ExtArgs> | null
    /**
     * Filter, which Ukol to fetch.
     */
    where: UkolWhereUniqueInput
  }

  /**
   * Ukol findUniqueOrThrow
   */
  export type UkolFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ukol
     */
    select?: UkolSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UkolInclude<ExtArgs> | null
    /**
     * Filter, which Ukol to fetch.
     */
    where: UkolWhereUniqueInput
  }

  /**
   * Ukol findFirst
   */
  export type UkolFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ukol
     */
    select?: UkolSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UkolInclude<ExtArgs> | null
    /**
     * Filter, which Ukol to fetch.
     */
    where?: UkolWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Ukols to fetch.
     */
    orderBy?: UkolOrderByWithRelationInput | UkolOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Ukols.
     */
    cursor?: UkolWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Ukols from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Ukols.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Ukols.
     */
    distinct?: UkolScalarFieldEnum | UkolScalarFieldEnum[]
  }

  /**
   * Ukol findFirstOrThrow
   */
  export type UkolFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ukol
     */
    select?: UkolSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UkolInclude<ExtArgs> | null
    /**
     * Filter, which Ukol to fetch.
     */
    where?: UkolWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Ukols to fetch.
     */
    orderBy?: UkolOrderByWithRelationInput | UkolOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Ukols.
     */
    cursor?: UkolWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Ukols from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Ukols.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Ukols.
     */
    distinct?: UkolScalarFieldEnum | UkolScalarFieldEnum[]
  }

  /**
   * Ukol findMany
   */
  export type UkolFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ukol
     */
    select?: UkolSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UkolInclude<ExtArgs> | null
    /**
     * Filter, which Ukols to fetch.
     */
    where?: UkolWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Ukols to fetch.
     */
    orderBy?: UkolOrderByWithRelationInput | UkolOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Ukols.
     */
    cursor?: UkolWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Ukols from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Ukols.
     */
    skip?: number
    distinct?: UkolScalarFieldEnum | UkolScalarFieldEnum[]
  }

  /**
   * Ukol create
   */
  export type UkolCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ukol
     */
    select?: UkolSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UkolInclude<ExtArgs> | null
    /**
     * The data needed to create a Ukol.
     */
    data: XOR<UkolCreateInput, UkolUncheckedCreateInput>
  }

  /**
   * Ukol createMany
   */
  export type UkolCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Ukols.
     */
    data: UkolCreateManyInput | UkolCreateManyInput[]
  }

  /**
   * Ukol createManyAndReturn
   */
  export type UkolCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ukol
     */
    select?: UkolSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Ukols.
     */
    data: UkolCreateManyInput | UkolCreateManyInput[]
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UkolIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Ukol update
   */
  export type UkolUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ukol
     */
    select?: UkolSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UkolInclude<ExtArgs> | null
    /**
     * The data needed to update a Ukol.
     */
    data: XOR<UkolUpdateInput, UkolUncheckedUpdateInput>
    /**
     * Choose, which Ukol to update.
     */
    where: UkolWhereUniqueInput
  }

  /**
   * Ukol updateMany
   */
  export type UkolUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Ukols.
     */
    data: XOR<UkolUpdateManyMutationInput, UkolUncheckedUpdateManyInput>
    /**
     * Filter which Ukols to update
     */
    where?: UkolWhereInput
  }

  /**
   * Ukol upsert
   */
  export type UkolUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ukol
     */
    select?: UkolSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UkolInclude<ExtArgs> | null
    /**
     * The filter to search for the Ukol to update in case it exists.
     */
    where: UkolWhereUniqueInput
    /**
     * In case the Ukol found by the `where` argument doesn't exist, create a new Ukol with this data.
     */
    create: XOR<UkolCreateInput, UkolUncheckedCreateInput>
    /**
     * In case the Ukol was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UkolUpdateInput, UkolUncheckedUpdateInput>
  }

  /**
   * Ukol delete
   */
  export type UkolDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ukol
     */
    select?: UkolSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UkolInclude<ExtArgs> | null
    /**
     * Filter which Ukol to delete.
     */
    where: UkolWhereUniqueInput
  }

  /**
   * Ukol deleteMany
   */
  export type UkolDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Ukols to delete
     */
    where?: UkolWhereInput
  }

  /**
   * Ukol without action
   */
  export type UkolDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ukol
     */
    select?: UkolSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UkolInclude<ExtArgs> | null
  }


  /**
   * Model Meridlo
   */

  export type AggregateMeridlo = {
    _count: MeridloCountAggregateOutputType | null
    _avg: MeridloAvgAggregateOutputType | null
    _sum: MeridloSumAggregateOutputType | null
    _min: MeridloMinAggregateOutputType | null
    _max: MeridloMaxAggregateOutputType | null
  }

  export type MeridloAvgAggregateOutputType = {
    id: number | null
    hodnota: number | null
    najemnikId: number | null
  }

  export type MeridloSumAggregateOutputType = {
    id: number | null
    hodnota: number | null
    najemnikId: number | null
  }

  export type MeridloMinAggregateOutputType = {
    id: number | null
    typ: string | null
    hodnota: number | null
    datum: Date | null
    najemnikId: number | null
  }

  export type MeridloMaxAggregateOutputType = {
    id: number | null
    typ: string | null
    hodnota: number | null
    datum: Date | null
    najemnikId: number | null
  }

  export type MeridloCountAggregateOutputType = {
    id: number
    typ: number
    hodnota: number
    datum: number
    najemnikId: number
    _all: number
  }


  export type MeridloAvgAggregateInputType = {
    id?: true
    hodnota?: true
    najemnikId?: true
  }

  export type MeridloSumAggregateInputType = {
    id?: true
    hodnota?: true
    najemnikId?: true
  }

  export type MeridloMinAggregateInputType = {
    id?: true
    typ?: true
    hodnota?: true
    datum?: true
    najemnikId?: true
  }

  export type MeridloMaxAggregateInputType = {
    id?: true
    typ?: true
    hodnota?: true
    datum?: true
    najemnikId?: true
  }

  export type MeridloCountAggregateInputType = {
    id?: true
    typ?: true
    hodnota?: true
    datum?: true
    najemnikId?: true
    _all?: true
  }

  export type MeridloAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Meridlo to aggregate.
     */
    where?: MeridloWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Meridlos to fetch.
     */
    orderBy?: MeridloOrderByWithRelationInput | MeridloOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: MeridloWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Meridlos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Meridlos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Meridlos
    **/
    _count?: true | MeridloCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: MeridloAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: MeridloSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: MeridloMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: MeridloMaxAggregateInputType
  }

  export type GetMeridloAggregateType<T extends MeridloAggregateArgs> = {
        [P in keyof T & keyof AggregateMeridlo]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateMeridlo[P]>
      : GetScalarType<T[P], AggregateMeridlo[P]>
  }




  export type MeridloGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MeridloWhereInput
    orderBy?: MeridloOrderByWithAggregationInput | MeridloOrderByWithAggregationInput[]
    by: MeridloScalarFieldEnum[] | MeridloScalarFieldEnum
    having?: MeridloScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: MeridloCountAggregateInputType | true
    _avg?: MeridloAvgAggregateInputType
    _sum?: MeridloSumAggregateInputType
    _min?: MeridloMinAggregateInputType
    _max?: MeridloMaxAggregateInputType
  }

  export type MeridloGroupByOutputType = {
    id: number
    typ: string
    hodnota: number
    datum: Date
    najemnikId: number
    _count: MeridloCountAggregateOutputType | null
    _avg: MeridloAvgAggregateOutputType | null
    _sum: MeridloSumAggregateOutputType | null
    _min: MeridloMinAggregateOutputType | null
    _max: MeridloMaxAggregateOutputType | null
  }

  type GetMeridloGroupByPayload<T extends MeridloGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<MeridloGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof MeridloGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], MeridloGroupByOutputType[P]>
            : GetScalarType<T[P], MeridloGroupByOutputType[P]>
        }
      >
    >


  export type MeridloSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    typ?: boolean
    hodnota?: boolean
    datum?: boolean
    najemnikId?: boolean
    najemnik?: boolean | NajemnikDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["meridlo"]>

  export type MeridloSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    typ?: boolean
    hodnota?: boolean
    datum?: boolean
    najemnikId?: boolean
    najemnik?: boolean | NajemnikDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["meridlo"]>

  export type MeridloSelectScalar = {
    id?: boolean
    typ?: boolean
    hodnota?: boolean
    datum?: boolean
    najemnikId?: boolean
  }

  export type MeridloInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    najemnik?: boolean | NajemnikDefaultArgs<ExtArgs>
  }
  export type MeridloIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    najemnik?: boolean | NajemnikDefaultArgs<ExtArgs>
  }

  export type $MeridloPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Meridlo"
    objects: {
      najemnik: Prisma.$NajemnikPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      typ: string
      hodnota: number
      datum: Date
      najemnikId: number
    }, ExtArgs["result"]["meridlo"]>
    composites: {}
  }

  type MeridloGetPayload<S extends boolean | null | undefined | MeridloDefaultArgs> = $Result.GetResult<Prisma.$MeridloPayload, S>

  type MeridloCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<MeridloFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: MeridloCountAggregateInputType | true
    }

  export interface MeridloDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Meridlo'], meta: { name: 'Meridlo' } }
    /**
     * Find zero or one Meridlo that matches the filter.
     * @param {MeridloFindUniqueArgs} args - Arguments to find a Meridlo
     * @example
     * // Get one Meridlo
     * const meridlo = await prisma.meridlo.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends MeridloFindUniqueArgs>(args: SelectSubset<T, MeridloFindUniqueArgs<ExtArgs>>): Prisma__MeridloClient<$Result.GetResult<Prisma.$MeridloPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Meridlo that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {MeridloFindUniqueOrThrowArgs} args - Arguments to find a Meridlo
     * @example
     * // Get one Meridlo
     * const meridlo = await prisma.meridlo.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends MeridloFindUniqueOrThrowArgs>(args: SelectSubset<T, MeridloFindUniqueOrThrowArgs<ExtArgs>>): Prisma__MeridloClient<$Result.GetResult<Prisma.$MeridloPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Meridlo that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MeridloFindFirstArgs} args - Arguments to find a Meridlo
     * @example
     * // Get one Meridlo
     * const meridlo = await prisma.meridlo.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends MeridloFindFirstArgs>(args?: SelectSubset<T, MeridloFindFirstArgs<ExtArgs>>): Prisma__MeridloClient<$Result.GetResult<Prisma.$MeridloPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Meridlo that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MeridloFindFirstOrThrowArgs} args - Arguments to find a Meridlo
     * @example
     * // Get one Meridlo
     * const meridlo = await prisma.meridlo.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends MeridloFindFirstOrThrowArgs>(args?: SelectSubset<T, MeridloFindFirstOrThrowArgs<ExtArgs>>): Prisma__MeridloClient<$Result.GetResult<Prisma.$MeridloPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Meridlos that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MeridloFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Meridlos
     * const meridlos = await prisma.meridlo.findMany()
     * 
     * // Get first 10 Meridlos
     * const meridlos = await prisma.meridlo.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const meridloWithIdOnly = await prisma.meridlo.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends MeridloFindManyArgs>(args?: SelectSubset<T, MeridloFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MeridloPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Meridlo.
     * @param {MeridloCreateArgs} args - Arguments to create a Meridlo.
     * @example
     * // Create one Meridlo
     * const Meridlo = await prisma.meridlo.create({
     *   data: {
     *     // ... data to create a Meridlo
     *   }
     * })
     * 
     */
    create<T extends MeridloCreateArgs>(args: SelectSubset<T, MeridloCreateArgs<ExtArgs>>): Prisma__MeridloClient<$Result.GetResult<Prisma.$MeridloPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Meridlos.
     * @param {MeridloCreateManyArgs} args - Arguments to create many Meridlos.
     * @example
     * // Create many Meridlos
     * const meridlo = await prisma.meridlo.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends MeridloCreateManyArgs>(args?: SelectSubset<T, MeridloCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Meridlos and returns the data saved in the database.
     * @param {MeridloCreateManyAndReturnArgs} args - Arguments to create many Meridlos.
     * @example
     * // Create many Meridlos
     * const meridlo = await prisma.meridlo.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Meridlos and only return the `id`
     * const meridloWithIdOnly = await prisma.meridlo.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends MeridloCreateManyAndReturnArgs>(args?: SelectSubset<T, MeridloCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MeridloPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Meridlo.
     * @param {MeridloDeleteArgs} args - Arguments to delete one Meridlo.
     * @example
     * // Delete one Meridlo
     * const Meridlo = await prisma.meridlo.delete({
     *   where: {
     *     // ... filter to delete one Meridlo
     *   }
     * })
     * 
     */
    delete<T extends MeridloDeleteArgs>(args: SelectSubset<T, MeridloDeleteArgs<ExtArgs>>): Prisma__MeridloClient<$Result.GetResult<Prisma.$MeridloPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Meridlo.
     * @param {MeridloUpdateArgs} args - Arguments to update one Meridlo.
     * @example
     * // Update one Meridlo
     * const meridlo = await prisma.meridlo.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends MeridloUpdateArgs>(args: SelectSubset<T, MeridloUpdateArgs<ExtArgs>>): Prisma__MeridloClient<$Result.GetResult<Prisma.$MeridloPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Meridlos.
     * @param {MeridloDeleteManyArgs} args - Arguments to filter Meridlos to delete.
     * @example
     * // Delete a few Meridlos
     * const { count } = await prisma.meridlo.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends MeridloDeleteManyArgs>(args?: SelectSubset<T, MeridloDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Meridlos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MeridloUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Meridlos
     * const meridlo = await prisma.meridlo.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends MeridloUpdateManyArgs>(args: SelectSubset<T, MeridloUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Meridlo.
     * @param {MeridloUpsertArgs} args - Arguments to update or create a Meridlo.
     * @example
     * // Update or create a Meridlo
     * const meridlo = await prisma.meridlo.upsert({
     *   create: {
     *     // ... data to create a Meridlo
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Meridlo we want to update
     *   }
     * })
     */
    upsert<T extends MeridloUpsertArgs>(args: SelectSubset<T, MeridloUpsertArgs<ExtArgs>>): Prisma__MeridloClient<$Result.GetResult<Prisma.$MeridloPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Meridlos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MeridloCountArgs} args - Arguments to filter Meridlos to count.
     * @example
     * // Count the number of Meridlos
     * const count = await prisma.meridlo.count({
     *   where: {
     *     // ... the filter for the Meridlos we want to count
     *   }
     * })
    **/
    count<T extends MeridloCountArgs>(
      args?: Subset<T, MeridloCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], MeridloCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Meridlo.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MeridloAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends MeridloAggregateArgs>(args: Subset<T, MeridloAggregateArgs>): Prisma.PrismaPromise<GetMeridloAggregateType<T>>

    /**
     * Group by Meridlo.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MeridloGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends MeridloGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: MeridloGroupByArgs['orderBy'] }
        : { orderBy?: MeridloGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, MeridloGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMeridloGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Meridlo model
   */
  readonly fields: MeridloFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Meridlo.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__MeridloClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    najemnik<T extends NajemnikDefaultArgs<ExtArgs> = {}>(args?: Subset<T, NajemnikDefaultArgs<ExtArgs>>): Prisma__NajemnikClient<$Result.GetResult<Prisma.$NajemnikPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Meridlo model
   */ 
  interface MeridloFieldRefs {
    readonly id: FieldRef<"Meridlo", 'Int'>
    readonly typ: FieldRef<"Meridlo", 'String'>
    readonly hodnota: FieldRef<"Meridlo", 'Float'>
    readonly datum: FieldRef<"Meridlo", 'DateTime'>
    readonly najemnikId: FieldRef<"Meridlo", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Meridlo findUnique
   */
  export type MeridloFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Meridlo
     */
    select?: MeridloSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MeridloInclude<ExtArgs> | null
    /**
     * Filter, which Meridlo to fetch.
     */
    where: MeridloWhereUniqueInput
  }

  /**
   * Meridlo findUniqueOrThrow
   */
  export type MeridloFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Meridlo
     */
    select?: MeridloSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MeridloInclude<ExtArgs> | null
    /**
     * Filter, which Meridlo to fetch.
     */
    where: MeridloWhereUniqueInput
  }

  /**
   * Meridlo findFirst
   */
  export type MeridloFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Meridlo
     */
    select?: MeridloSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MeridloInclude<ExtArgs> | null
    /**
     * Filter, which Meridlo to fetch.
     */
    where?: MeridloWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Meridlos to fetch.
     */
    orderBy?: MeridloOrderByWithRelationInput | MeridloOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Meridlos.
     */
    cursor?: MeridloWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Meridlos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Meridlos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Meridlos.
     */
    distinct?: MeridloScalarFieldEnum | MeridloScalarFieldEnum[]
  }

  /**
   * Meridlo findFirstOrThrow
   */
  export type MeridloFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Meridlo
     */
    select?: MeridloSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MeridloInclude<ExtArgs> | null
    /**
     * Filter, which Meridlo to fetch.
     */
    where?: MeridloWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Meridlos to fetch.
     */
    orderBy?: MeridloOrderByWithRelationInput | MeridloOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Meridlos.
     */
    cursor?: MeridloWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Meridlos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Meridlos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Meridlos.
     */
    distinct?: MeridloScalarFieldEnum | MeridloScalarFieldEnum[]
  }

  /**
   * Meridlo findMany
   */
  export type MeridloFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Meridlo
     */
    select?: MeridloSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MeridloInclude<ExtArgs> | null
    /**
     * Filter, which Meridlos to fetch.
     */
    where?: MeridloWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Meridlos to fetch.
     */
    orderBy?: MeridloOrderByWithRelationInput | MeridloOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Meridlos.
     */
    cursor?: MeridloWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Meridlos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Meridlos.
     */
    skip?: number
    distinct?: MeridloScalarFieldEnum | MeridloScalarFieldEnum[]
  }

  /**
   * Meridlo create
   */
  export type MeridloCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Meridlo
     */
    select?: MeridloSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MeridloInclude<ExtArgs> | null
    /**
     * The data needed to create a Meridlo.
     */
    data: XOR<MeridloCreateInput, MeridloUncheckedCreateInput>
  }

  /**
   * Meridlo createMany
   */
  export type MeridloCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Meridlos.
     */
    data: MeridloCreateManyInput | MeridloCreateManyInput[]
  }

  /**
   * Meridlo createManyAndReturn
   */
  export type MeridloCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Meridlo
     */
    select?: MeridloSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Meridlos.
     */
    data: MeridloCreateManyInput | MeridloCreateManyInput[]
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MeridloIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Meridlo update
   */
  export type MeridloUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Meridlo
     */
    select?: MeridloSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MeridloInclude<ExtArgs> | null
    /**
     * The data needed to update a Meridlo.
     */
    data: XOR<MeridloUpdateInput, MeridloUncheckedUpdateInput>
    /**
     * Choose, which Meridlo to update.
     */
    where: MeridloWhereUniqueInput
  }

  /**
   * Meridlo updateMany
   */
  export type MeridloUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Meridlos.
     */
    data: XOR<MeridloUpdateManyMutationInput, MeridloUncheckedUpdateManyInput>
    /**
     * Filter which Meridlos to update
     */
    where?: MeridloWhereInput
  }

  /**
   * Meridlo upsert
   */
  export type MeridloUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Meridlo
     */
    select?: MeridloSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MeridloInclude<ExtArgs> | null
    /**
     * The filter to search for the Meridlo to update in case it exists.
     */
    where: MeridloWhereUniqueInput
    /**
     * In case the Meridlo found by the `where` argument doesn't exist, create a new Meridlo with this data.
     */
    create: XOR<MeridloCreateInput, MeridloUncheckedCreateInput>
    /**
     * In case the Meridlo was found with the provided `where` argument, update it with this data.
     */
    update: XOR<MeridloUpdateInput, MeridloUncheckedUpdateInput>
  }

  /**
   * Meridlo delete
   */
  export type MeridloDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Meridlo
     */
    select?: MeridloSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MeridloInclude<ExtArgs> | null
    /**
     * Filter which Meridlo to delete.
     */
    where: MeridloWhereUniqueInput
  }

  /**
   * Meridlo deleteMany
   */
  export type MeridloDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Meridlos to delete
     */
    where?: MeridloWhereInput
  }

  /**
   * Meridlo without action
   */
  export type MeridloDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Meridlo
     */
    select?: MeridloSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MeridloInclude<ExtArgs> | null
  }


  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserAvgAggregateOutputType = {
    id: number | null
  }

  export type UserSumAggregateOutputType = {
    id: number | null
  }

  export type UserMinAggregateOutputType = {
    id: number | null
    email: string | null
    password: string | null
    role: string | null
    isActive: boolean | null
  }

  export type UserMaxAggregateOutputType = {
    id: number | null
    email: string | null
    password: string | null
    role: string | null
    isActive: boolean | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    email: number
    password: number
    role: number
    isActive: number
    _all: number
  }


  export type UserAvgAggregateInputType = {
    id?: true
  }

  export type UserSumAggregateInputType = {
    id?: true
  }

  export type UserMinAggregateInputType = {
    id?: true
    email?: true
    password?: true
    role?: true
    isActive?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    email?: true
    password?: true
    role?: true
    isActive?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    email?: true
    password?: true
    role?: true
    isActive?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _avg?: UserAvgAggregateInputType
    _sum?: UserSumAggregateInputType
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    id: number
    email: string
    password: string
    role: string
    isActive: boolean
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    password?: boolean
    role?: boolean
    isActive?: boolean
    apartments?: boolean | User$apartmentsArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    password?: boolean
    role?: boolean
    isActive?: boolean
  }, ExtArgs["result"]["user"]>

  export type UserSelectScalar = {
    id?: boolean
    email?: boolean
    password?: boolean
    role?: boolean
    isActive?: boolean
  }

  export type UserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    apartments?: boolean | User$apartmentsArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type UserIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {
      apartments: Prisma.$ApartmentPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      email: string
      password: string
      role: string
      isActive: boolean
    }, ExtArgs["result"]["user"]>
    composites: {}
  }

  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<UserFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserFindUniqueArgs>(args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one User that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(args: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserFindFirstArgs>(args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserFindManyArgs>(args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
     */
    create<T extends UserCreateArgs>(args: SelectSubset<T, UserCreateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Users.
     * @param {UserCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserCreateManyArgs>(args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Users and returns the data saved in the database.
     * @param {UserCreateManyAndReturnArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Users and only return the `id`
     * const userWithIdOnly = await prisma.user.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserCreateManyAndReturnArgs>(args?: SelectSubset<T, UserCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
     */
    delete<T extends UserDeleteArgs>(args: SelectSubset<T, UserDeleteArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserUpdateArgs>(args: SelectSubset<T, UserUpdateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserDeleteManyArgs>(args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserUpdateManyArgs>(args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
     */
    upsert<T extends UserUpsertArgs>(args: SelectSubset<T, UserUpsertArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    apartments<T extends User$apartmentsArgs<ExtArgs> = {}>(args?: Subset<T, User$apartmentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ApartmentPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the User model
   */ 
  interface UserFieldRefs {
    readonly id: FieldRef<"User", 'Int'>
    readonly email: FieldRef<"User", 'String'>
    readonly password: FieldRef<"User", 'String'>
    readonly role: FieldRef<"User", 'String'>
    readonly isActive: FieldRef<"User", 'Boolean'>
  }
    

  // Custom InputTypes
  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }

  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
  }

  /**
   * User createManyAndReturn
   */
  export type UserCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
  }

  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
  }

  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }

  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
  }

  /**
   * User.apartments
   */
  export type User$apartmentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Apartment
     */
    select?: ApartmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ApartmentInclude<ExtArgs> | null
    where?: ApartmentWhereInput
    orderBy?: ApartmentOrderByWithRelationInput | ApartmentOrderByWithRelationInput[]
    cursor?: ApartmentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ApartmentScalarFieldEnum | ApartmentScalarFieldEnum[]
  }

  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
  }


  /**
   * Model Apartment
   */

  export type AggregateApartment = {
    _count: ApartmentCountAggregateOutputType | null
    _avg: ApartmentAvgAggregateOutputType | null
    _sum: ApartmentSumAggregateOutputType | null
    _min: ApartmentMinAggregateOutputType | null
    _max: ApartmentMaxAggregateOutputType | null
  }

  export type ApartmentAvgAggregateOutputType = {
    id: number | null
    purchasePrice: number | null
    currentValue: number | null
    parentId: number | null
    ownerId: number | null
    insuranceAnnualPrice: number | null
    area: number | null
    floorNumber: number | null
    totalFloorsAbove: number | null
    totalFloorsBelow: number | null
  }

  export type ApartmentSumAggregateOutputType = {
    id: number | null
    purchasePrice: number | null
    currentValue: number | null
    parentId: number | null
    ownerId: number | null
    insuranceAnnualPrice: number | null
    area: number | null
    floorNumber: number | null
    totalFloorsAbove: number | null
    totalFloorsBelow: number | null
  }

  export type ApartmentMinAggregateOutputType = {
    id: number | null
    address: string | null
    city: string | null
    postalCode: string | null
    purchasePrice: number | null
    currentValue: number | null
    purchaseDate: Date | null
    parentId: number | null
    ownerId: number | null
    createdAt: Date | null
    updatedAt: Date | null
    insuranceAnnualPrice: number | null
    insuranceNumber: string | null
    insuranceNote: string | null
    ownershipType: string | null
    buildingType: string | null
    buildingConstruction: string | null
    heatingType: string | null
    area: number | null
    eicCode: string | null
    eanCode: string | null
    floorNumber: number | null
    totalFloorsAbove: number | null
    totalFloorsBelow: number | null
    hasElevator: boolean | null
    hasBalcony: boolean | null
    hasLoggia: boolean | null
    hasTerrace: boolean | null
    hasStorage: boolean | null
    technicalNote: string | null
  }

  export type ApartmentMaxAggregateOutputType = {
    id: number | null
    address: string | null
    city: string | null
    postalCode: string | null
    purchasePrice: number | null
    currentValue: number | null
    purchaseDate: Date | null
    parentId: number | null
    ownerId: number | null
    createdAt: Date | null
    updatedAt: Date | null
    insuranceAnnualPrice: number | null
    insuranceNumber: string | null
    insuranceNote: string | null
    ownershipType: string | null
    buildingType: string | null
    buildingConstruction: string | null
    heatingType: string | null
    area: number | null
    eicCode: string | null
    eanCode: string | null
    floorNumber: number | null
    totalFloorsAbove: number | null
    totalFloorsBelow: number | null
    hasElevator: boolean | null
    hasBalcony: boolean | null
    hasLoggia: boolean | null
    hasTerrace: boolean | null
    hasStorage: boolean | null
    technicalNote: string | null
  }

  export type ApartmentCountAggregateOutputType = {
    id: number
    address: number
    city: number
    postalCode: number
    purchasePrice: number
    currentValue: number
    purchaseDate: number
    parentId: number
    ownerId: number
    createdAt: number
    updatedAt: number
    insuranceAnnualPrice: number
    insuranceNumber: number
    insuranceNote: number
    ownershipType: number
    buildingType: number
    buildingConstruction: number
    heatingType: number
    area: number
    eicCode: number
    eanCode: number
    floorNumber: number
    totalFloorsAbove: number
    totalFloorsBelow: number
    hasElevator: number
    hasBalcony: number
    hasLoggia: number
    hasTerrace: number
    hasStorage: number
    technicalNote: number
    _all: number
  }


  export type ApartmentAvgAggregateInputType = {
    id?: true
    purchasePrice?: true
    currentValue?: true
    parentId?: true
    ownerId?: true
    insuranceAnnualPrice?: true
    area?: true
    floorNumber?: true
    totalFloorsAbove?: true
    totalFloorsBelow?: true
  }

  export type ApartmentSumAggregateInputType = {
    id?: true
    purchasePrice?: true
    currentValue?: true
    parentId?: true
    ownerId?: true
    insuranceAnnualPrice?: true
    area?: true
    floorNumber?: true
    totalFloorsAbove?: true
    totalFloorsBelow?: true
  }

  export type ApartmentMinAggregateInputType = {
    id?: true
    address?: true
    city?: true
    postalCode?: true
    purchasePrice?: true
    currentValue?: true
    purchaseDate?: true
    parentId?: true
    ownerId?: true
    createdAt?: true
    updatedAt?: true
    insuranceAnnualPrice?: true
    insuranceNumber?: true
    insuranceNote?: true
    ownershipType?: true
    buildingType?: true
    buildingConstruction?: true
    heatingType?: true
    area?: true
    eicCode?: true
    eanCode?: true
    floorNumber?: true
    totalFloorsAbove?: true
    totalFloorsBelow?: true
    hasElevator?: true
    hasBalcony?: true
    hasLoggia?: true
    hasTerrace?: true
    hasStorage?: true
    technicalNote?: true
  }

  export type ApartmentMaxAggregateInputType = {
    id?: true
    address?: true
    city?: true
    postalCode?: true
    purchasePrice?: true
    currentValue?: true
    purchaseDate?: true
    parentId?: true
    ownerId?: true
    createdAt?: true
    updatedAt?: true
    insuranceAnnualPrice?: true
    insuranceNumber?: true
    insuranceNote?: true
    ownershipType?: true
    buildingType?: true
    buildingConstruction?: true
    heatingType?: true
    area?: true
    eicCode?: true
    eanCode?: true
    floorNumber?: true
    totalFloorsAbove?: true
    totalFloorsBelow?: true
    hasElevator?: true
    hasBalcony?: true
    hasLoggia?: true
    hasTerrace?: true
    hasStorage?: true
    technicalNote?: true
  }

  export type ApartmentCountAggregateInputType = {
    id?: true
    address?: true
    city?: true
    postalCode?: true
    purchasePrice?: true
    currentValue?: true
    purchaseDate?: true
    parentId?: true
    ownerId?: true
    createdAt?: true
    updatedAt?: true
    insuranceAnnualPrice?: true
    insuranceNumber?: true
    insuranceNote?: true
    ownershipType?: true
    buildingType?: true
    buildingConstruction?: true
    heatingType?: true
    area?: true
    eicCode?: true
    eanCode?: true
    floorNumber?: true
    totalFloorsAbove?: true
    totalFloorsBelow?: true
    hasElevator?: true
    hasBalcony?: true
    hasLoggia?: true
    hasTerrace?: true
    hasStorage?: true
    technicalNote?: true
    _all?: true
  }

  export type ApartmentAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Apartment to aggregate.
     */
    where?: ApartmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Apartments to fetch.
     */
    orderBy?: ApartmentOrderByWithRelationInput | ApartmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ApartmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Apartments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Apartments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Apartments
    **/
    _count?: true | ApartmentCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ApartmentAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ApartmentSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ApartmentMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ApartmentMaxAggregateInputType
  }

  export type GetApartmentAggregateType<T extends ApartmentAggregateArgs> = {
        [P in keyof T & keyof AggregateApartment]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateApartment[P]>
      : GetScalarType<T[P], AggregateApartment[P]>
  }




  export type ApartmentGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ApartmentWhereInput
    orderBy?: ApartmentOrderByWithAggregationInput | ApartmentOrderByWithAggregationInput[]
    by: ApartmentScalarFieldEnum[] | ApartmentScalarFieldEnum
    having?: ApartmentScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ApartmentCountAggregateInputType | true
    _avg?: ApartmentAvgAggregateInputType
    _sum?: ApartmentSumAggregateInputType
    _min?: ApartmentMinAggregateInputType
    _max?: ApartmentMaxAggregateInputType
  }

  export type ApartmentGroupByOutputType = {
    id: number
    address: string
    city: string
    postalCode: string
    purchasePrice: number | null
    currentValue: number | null
    purchaseDate: Date | null
    parentId: number | null
    ownerId: number
    createdAt: Date
    updatedAt: Date
    insuranceAnnualPrice: number | null
    insuranceNumber: string | null
    insuranceNote: string | null
    ownershipType: string | null
    buildingType: string | null
    buildingConstruction: string | null
    heatingType: string | null
    area: number | null
    eicCode: string | null
    eanCode: string | null
    floorNumber: number | null
    totalFloorsAbove: number | null
    totalFloorsBelow: number | null
    hasElevator: boolean | null
    hasBalcony: boolean | null
    hasLoggia: boolean | null
    hasTerrace: boolean | null
    hasStorage: boolean | null
    technicalNote: string | null
    _count: ApartmentCountAggregateOutputType | null
    _avg: ApartmentAvgAggregateOutputType | null
    _sum: ApartmentSumAggregateOutputType | null
    _min: ApartmentMinAggregateOutputType | null
    _max: ApartmentMaxAggregateOutputType | null
  }

  type GetApartmentGroupByPayload<T extends ApartmentGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ApartmentGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ApartmentGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ApartmentGroupByOutputType[P]>
            : GetScalarType<T[P], ApartmentGroupByOutputType[P]>
        }
      >
    >


  export type ApartmentSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    address?: boolean
    city?: boolean
    postalCode?: boolean
    purchasePrice?: boolean
    currentValue?: boolean
    purchaseDate?: boolean
    parentId?: boolean
    ownerId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    insuranceAnnualPrice?: boolean
    insuranceNumber?: boolean
    insuranceNote?: boolean
    ownershipType?: boolean
    buildingType?: boolean
    buildingConstruction?: boolean
    heatingType?: boolean
    area?: boolean
    eicCode?: boolean
    eanCode?: boolean
    floorNumber?: boolean
    totalFloorsAbove?: boolean
    totalFloorsBelow?: boolean
    hasElevator?: boolean
    hasBalcony?: boolean
    hasLoggia?: boolean
    hasTerrace?: boolean
    hasStorage?: boolean
    technicalNote?: boolean
    parent?: boolean | Apartment$parentArgs<ExtArgs>
    children?: boolean | Apartment$childrenArgs<ExtArgs>
    owner?: boolean | UserDefaultArgs<ExtArgs>
    tenants?: boolean | Apartment$tenantsArgs<ExtArgs>
    _count?: boolean | ApartmentCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["apartment"]>

  export type ApartmentSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    address?: boolean
    city?: boolean
    postalCode?: boolean
    purchasePrice?: boolean
    currentValue?: boolean
    purchaseDate?: boolean
    parentId?: boolean
    ownerId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    insuranceAnnualPrice?: boolean
    insuranceNumber?: boolean
    insuranceNote?: boolean
    ownershipType?: boolean
    buildingType?: boolean
    buildingConstruction?: boolean
    heatingType?: boolean
    area?: boolean
    eicCode?: boolean
    eanCode?: boolean
    floorNumber?: boolean
    totalFloorsAbove?: boolean
    totalFloorsBelow?: boolean
    hasElevator?: boolean
    hasBalcony?: boolean
    hasLoggia?: boolean
    hasTerrace?: boolean
    hasStorage?: boolean
    technicalNote?: boolean
    parent?: boolean | Apartment$parentArgs<ExtArgs>
    owner?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["apartment"]>

  export type ApartmentSelectScalar = {
    id?: boolean
    address?: boolean
    city?: boolean
    postalCode?: boolean
    purchasePrice?: boolean
    currentValue?: boolean
    purchaseDate?: boolean
    parentId?: boolean
    ownerId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    insuranceAnnualPrice?: boolean
    insuranceNumber?: boolean
    insuranceNote?: boolean
    ownershipType?: boolean
    buildingType?: boolean
    buildingConstruction?: boolean
    heatingType?: boolean
    area?: boolean
    eicCode?: boolean
    eanCode?: boolean
    floorNumber?: boolean
    totalFloorsAbove?: boolean
    totalFloorsBelow?: boolean
    hasElevator?: boolean
    hasBalcony?: boolean
    hasLoggia?: boolean
    hasTerrace?: boolean
    hasStorage?: boolean
    technicalNote?: boolean
  }

  export type ApartmentInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    parent?: boolean | Apartment$parentArgs<ExtArgs>
    children?: boolean | Apartment$childrenArgs<ExtArgs>
    owner?: boolean | UserDefaultArgs<ExtArgs>
    tenants?: boolean | Apartment$tenantsArgs<ExtArgs>
    _count?: boolean | ApartmentCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type ApartmentIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    parent?: boolean | Apartment$parentArgs<ExtArgs>
    owner?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $ApartmentPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Apartment"
    objects: {
      parent: Prisma.$ApartmentPayload<ExtArgs> | null
      children: Prisma.$ApartmentPayload<ExtArgs>[]
      owner: Prisma.$UserPayload<ExtArgs>
      tenants: Prisma.$TenantPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      address: string
      city: string
      postalCode: string
      purchasePrice: number | null
      currentValue: number | null
      purchaseDate: Date | null
      parentId: number | null
      ownerId: number
      createdAt: Date
      updatedAt: Date
      insuranceAnnualPrice: number | null
      insuranceNumber: string | null
      insuranceNote: string | null
      ownershipType: string | null
      buildingType: string | null
      buildingConstruction: string | null
      heatingType: string | null
      area: number | null
      eicCode: string | null
      eanCode: string | null
      floorNumber: number | null
      totalFloorsAbove: number | null
      totalFloorsBelow: number | null
      hasElevator: boolean | null
      hasBalcony: boolean | null
      hasLoggia: boolean | null
      hasTerrace: boolean | null
      hasStorage: boolean | null
      technicalNote: string | null
    }, ExtArgs["result"]["apartment"]>
    composites: {}
  }

  type ApartmentGetPayload<S extends boolean | null | undefined | ApartmentDefaultArgs> = $Result.GetResult<Prisma.$ApartmentPayload, S>

  type ApartmentCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ApartmentFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ApartmentCountAggregateInputType | true
    }

  export interface ApartmentDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Apartment'], meta: { name: 'Apartment' } }
    /**
     * Find zero or one Apartment that matches the filter.
     * @param {ApartmentFindUniqueArgs} args - Arguments to find a Apartment
     * @example
     * // Get one Apartment
     * const apartment = await prisma.apartment.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ApartmentFindUniqueArgs>(args: SelectSubset<T, ApartmentFindUniqueArgs<ExtArgs>>): Prisma__ApartmentClient<$Result.GetResult<Prisma.$ApartmentPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Apartment that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {ApartmentFindUniqueOrThrowArgs} args - Arguments to find a Apartment
     * @example
     * // Get one Apartment
     * const apartment = await prisma.apartment.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ApartmentFindUniqueOrThrowArgs>(args: SelectSubset<T, ApartmentFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ApartmentClient<$Result.GetResult<Prisma.$ApartmentPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Apartment that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ApartmentFindFirstArgs} args - Arguments to find a Apartment
     * @example
     * // Get one Apartment
     * const apartment = await prisma.apartment.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ApartmentFindFirstArgs>(args?: SelectSubset<T, ApartmentFindFirstArgs<ExtArgs>>): Prisma__ApartmentClient<$Result.GetResult<Prisma.$ApartmentPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Apartment that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ApartmentFindFirstOrThrowArgs} args - Arguments to find a Apartment
     * @example
     * // Get one Apartment
     * const apartment = await prisma.apartment.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ApartmentFindFirstOrThrowArgs>(args?: SelectSubset<T, ApartmentFindFirstOrThrowArgs<ExtArgs>>): Prisma__ApartmentClient<$Result.GetResult<Prisma.$ApartmentPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Apartments that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ApartmentFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Apartments
     * const apartments = await prisma.apartment.findMany()
     * 
     * // Get first 10 Apartments
     * const apartments = await prisma.apartment.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const apartmentWithIdOnly = await prisma.apartment.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ApartmentFindManyArgs>(args?: SelectSubset<T, ApartmentFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ApartmentPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Apartment.
     * @param {ApartmentCreateArgs} args - Arguments to create a Apartment.
     * @example
     * // Create one Apartment
     * const Apartment = await prisma.apartment.create({
     *   data: {
     *     // ... data to create a Apartment
     *   }
     * })
     * 
     */
    create<T extends ApartmentCreateArgs>(args: SelectSubset<T, ApartmentCreateArgs<ExtArgs>>): Prisma__ApartmentClient<$Result.GetResult<Prisma.$ApartmentPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Apartments.
     * @param {ApartmentCreateManyArgs} args - Arguments to create many Apartments.
     * @example
     * // Create many Apartments
     * const apartment = await prisma.apartment.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ApartmentCreateManyArgs>(args?: SelectSubset<T, ApartmentCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Apartments and returns the data saved in the database.
     * @param {ApartmentCreateManyAndReturnArgs} args - Arguments to create many Apartments.
     * @example
     * // Create many Apartments
     * const apartment = await prisma.apartment.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Apartments and only return the `id`
     * const apartmentWithIdOnly = await prisma.apartment.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ApartmentCreateManyAndReturnArgs>(args?: SelectSubset<T, ApartmentCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ApartmentPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Apartment.
     * @param {ApartmentDeleteArgs} args - Arguments to delete one Apartment.
     * @example
     * // Delete one Apartment
     * const Apartment = await prisma.apartment.delete({
     *   where: {
     *     // ... filter to delete one Apartment
     *   }
     * })
     * 
     */
    delete<T extends ApartmentDeleteArgs>(args: SelectSubset<T, ApartmentDeleteArgs<ExtArgs>>): Prisma__ApartmentClient<$Result.GetResult<Prisma.$ApartmentPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Apartment.
     * @param {ApartmentUpdateArgs} args - Arguments to update one Apartment.
     * @example
     * // Update one Apartment
     * const apartment = await prisma.apartment.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ApartmentUpdateArgs>(args: SelectSubset<T, ApartmentUpdateArgs<ExtArgs>>): Prisma__ApartmentClient<$Result.GetResult<Prisma.$ApartmentPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Apartments.
     * @param {ApartmentDeleteManyArgs} args - Arguments to filter Apartments to delete.
     * @example
     * // Delete a few Apartments
     * const { count } = await prisma.apartment.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ApartmentDeleteManyArgs>(args?: SelectSubset<T, ApartmentDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Apartments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ApartmentUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Apartments
     * const apartment = await prisma.apartment.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ApartmentUpdateManyArgs>(args: SelectSubset<T, ApartmentUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Apartment.
     * @param {ApartmentUpsertArgs} args - Arguments to update or create a Apartment.
     * @example
     * // Update or create a Apartment
     * const apartment = await prisma.apartment.upsert({
     *   create: {
     *     // ... data to create a Apartment
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Apartment we want to update
     *   }
     * })
     */
    upsert<T extends ApartmentUpsertArgs>(args: SelectSubset<T, ApartmentUpsertArgs<ExtArgs>>): Prisma__ApartmentClient<$Result.GetResult<Prisma.$ApartmentPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Apartments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ApartmentCountArgs} args - Arguments to filter Apartments to count.
     * @example
     * // Count the number of Apartments
     * const count = await prisma.apartment.count({
     *   where: {
     *     // ... the filter for the Apartments we want to count
     *   }
     * })
    **/
    count<T extends ApartmentCountArgs>(
      args?: Subset<T, ApartmentCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ApartmentCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Apartment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ApartmentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ApartmentAggregateArgs>(args: Subset<T, ApartmentAggregateArgs>): Prisma.PrismaPromise<GetApartmentAggregateType<T>>

    /**
     * Group by Apartment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ApartmentGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ApartmentGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ApartmentGroupByArgs['orderBy'] }
        : { orderBy?: ApartmentGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ApartmentGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetApartmentGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Apartment model
   */
  readonly fields: ApartmentFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Apartment.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ApartmentClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    parent<T extends Apartment$parentArgs<ExtArgs> = {}>(args?: Subset<T, Apartment$parentArgs<ExtArgs>>): Prisma__ApartmentClient<$Result.GetResult<Prisma.$ApartmentPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    children<T extends Apartment$childrenArgs<ExtArgs> = {}>(args?: Subset<T, Apartment$childrenArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ApartmentPayload<ExtArgs>, T, "findMany"> | Null>
    owner<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    tenants<T extends Apartment$tenantsArgs<ExtArgs> = {}>(args?: Subset<T, Apartment$tenantsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TenantPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Apartment model
   */ 
  interface ApartmentFieldRefs {
    readonly id: FieldRef<"Apartment", 'Int'>
    readonly address: FieldRef<"Apartment", 'String'>
    readonly city: FieldRef<"Apartment", 'String'>
    readonly postalCode: FieldRef<"Apartment", 'String'>
    readonly purchasePrice: FieldRef<"Apartment", 'Float'>
    readonly currentValue: FieldRef<"Apartment", 'Float'>
    readonly purchaseDate: FieldRef<"Apartment", 'DateTime'>
    readonly parentId: FieldRef<"Apartment", 'Int'>
    readonly ownerId: FieldRef<"Apartment", 'Int'>
    readonly createdAt: FieldRef<"Apartment", 'DateTime'>
    readonly updatedAt: FieldRef<"Apartment", 'DateTime'>
    readonly insuranceAnnualPrice: FieldRef<"Apartment", 'Float'>
    readonly insuranceNumber: FieldRef<"Apartment", 'String'>
    readonly insuranceNote: FieldRef<"Apartment", 'String'>
    readonly ownershipType: FieldRef<"Apartment", 'String'>
    readonly buildingType: FieldRef<"Apartment", 'String'>
    readonly buildingConstruction: FieldRef<"Apartment", 'String'>
    readonly heatingType: FieldRef<"Apartment", 'String'>
    readonly area: FieldRef<"Apartment", 'Float'>
    readonly eicCode: FieldRef<"Apartment", 'String'>
    readonly eanCode: FieldRef<"Apartment", 'String'>
    readonly floorNumber: FieldRef<"Apartment", 'Int'>
    readonly totalFloorsAbove: FieldRef<"Apartment", 'Int'>
    readonly totalFloorsBelow: FieldRef<"Apartment", 'Int'>
    readonly hasElevator: FieldRef<"Apartment", 'Boolean'>
    readonly hasBalcony: FieldRef<"Apartment", 'Boolean'>
    readonly hasLoggia: FieldRef<"Apartment", 'Boolean'>
    readonly hasTerrace: FieldRef<"Apartment", 'Boolean'>
    readonly hasStorage: FieldRef<"Apartment", 'Boolean'>
    readonly technicalNote: FieldRef<"Apartment", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Apartment findUnique
   */
  export type ApartmentFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Apartment
     */
    select?: ApartmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ApartmentInclude<ExtArgs> | null
    /**
     * Filter, which Apartment to fetch.
     */
    where: ApartmentWhereUniqueInput
  }

  /**
   * Apartment findUniqueOrThrow
   */
  export type ApartmentFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Apartment
     */
    select?: ApartmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ApartmentInclude<ExtArgs> | null
    /**
     * Filter, which Apartment to fetch.
     */
    where: ApartmentWhereUniqueInput
  }

  /**
   * Apartment findFirst
   */
  export type ApartmentFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Apartment
     */
    select?: ApartmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ApartmentInclude<ExtArgs> | null
    /**
     * Filter, which Apartment to fetch.
     */
    where?: ApartmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Apartments to fetch.
     */
    orderBy?: ApartmentOrderByWithRelationInput | ApartmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Apartments.
     */
    cursor?: ApartmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Apartments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Apartments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Apartments.
     */
    distinct?: ApartmentScalarFieldEnum | ApartmentScalarFieldEnum[]
  }

  /**
   * Apartment findFirstOrThrow
   */
  export type ApartmentFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Apartment
     */
    select?: ApartmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ApartmentInclude<ExtArgs> | null
    /**
     * Filter, which Apartment to fetch.
     */
    where?: ApartmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Apartments to fetch.
     */
    orderBy?: ApartmentOrderByWithRelationInput | ApartmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Apartments.
     */
    cursor?: ApartmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Apartments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Apartments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Apartments.
     */
    distinct?: ApartmentScalarFieldEnum | ApartmentScalarFieldEnum[]
  }

  /**
   * Apartment findMany
   */
  export type ApartmentFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Apartment
     */
    select?: ApartmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ApartmentInclude<ExtArgs> | null
    /**
     * Filter, which Apartments to fetch.
     */
    where?: ApartmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Apartments to fetch.
     */
    orderBy?: ApartmentOrderByWithRelationInput | ApartmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Apartments.
     */
    cursor?: ApartmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Apartments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Apartments.
     */
    skip?: number
    distinct?: ApartmentScalarFieldEnum | ApartmentScalarFieldEnum[]
  }

  /**
   * Apartment create
   */
  export type ApartmentCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Apartment
     */
    select?: ApartmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ApartmentInclude<ExtArgs> | null
    /**
     * The data needed to create a Apartment.
     */
    data: XOR<ApartmentCreateInput, ApartmentUncheckedCreateInput>
  }

  /**
   * Apartment createMany
   */
  export type ApartmentCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Apartments.
     */
    data: ApartmentCreateManyInput | ApartmentCreateManyInput[]
  }

  /**
   * Apartment createManyAndReturn
   */
  export type ApartmentCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Apartment
     */
    select?: ApartmentSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Apartments.
     */
    data: ApartmentCreateManyInput | ApartmentCreateManyInput[]
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ApartmentIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Apartment update
   */
  export type ApartmentUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Apartment
     */
    select?: ApartmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ApartmentInclude<ExtArgs> | null
    /**
     * The data needed to update a Apartment.
     */
    data: XOR<ApartmentUpdateInput, ApartmentUncheckedUpdateInput>
    /**
     * Choose, which Apartment to update.
     */
    where: ApartmentWhereUniqueInput
  }

  /**
   * Apartment updateMany
   */
  export type ApartmentUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Apartments.
     */
    data: XOR<ApartmentUpdateManyMutationInput, ApartmentUncheckedUpdateManyInput>
    /**
     * Filter which Apartments to update
     */
    where?: ApartmentWhereInput
  }

  /**
   * Apartment upsert
   */
  export type ApartmentUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Apartment
     */
    select?: ApartmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ApartmentInclude<ExtArgs> | null
    /**
     * The filter to search for the Apartment to update in case it exists.
     */
    where: ApartmentWhereUniqueInput
    /**
     * In case the Apartment found by the `where` argument doesn't exist, create a new Apartment with this data.
     */
    create: XOR<ApartmentCreateInput, ApartmentUncheckedCreateInput>
    /**
     * In case the Apartment was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ApartmentUpdateInput, ApartmentUncheckedUpdateInput>
  }

  /**
   * Apartment delete
   */
  export type ApartmentDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Apartment
     */
    select?: ApartmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ApartmentInclude<ExtArgs> | null
    /**
     * Filter which Apartment to delete.
     */
    where: ApartmentWhereUniqueInput
  }

  /**
   * Apartment deleteMany
   */
  export type ApartmentDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Apartments to delete
     */
    where?: ApartmentWhereInput
  }

  /**
   * Apartment.parent
   */
  export type Apartment$parentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Apartment
     */
    select?: ApartmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ApartmentInclude<ExtArgs> | null
    where?: ApartmentWhereInput
  }

  /**
   * Apartment.children
   */
  export type Apartment$childrenArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Apartment
     */
    select?: ApartmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ApartmentInclude<ExtArgs> | null
    where?: ApartmentWhereInput
    orderBy?: ApartmentOrderByWithRelationInput | ApartmentOrderByWithRelationInput[]
    cursor?: ApartmentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ApartmentScalarFieldEnum | ApartmentScalarFieldEnum[]
  }

  /**
   * Apartment.tenants
   */
  export type Apartment$tenantsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tenant
     */
    select?: TenantSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TenantInclude<ExtArgs> | null
    where?: TenantWhereInput
    orderBy?: TenantOrderByWithRelationInput | TenantOrderByWithRelationInput[]
    cursor?: TenantWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TenantScalarFieldEnum | TenantScalarFieldEnum[]
  }

  /**
   * Apartment without action
   */
  export type ApartmentDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Apartment
     */
    select?: ApartmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ApartmentInclude<ExtArgs> | null
  }


  /**
   * Model Tenant
   */

  export type AggregateTenant = {
    _count: TenantCountAggregateOutputType | null
    _avg: TenantAvgAggregateOutputType | null
    _sum: TenantSumAggregateOutputType | null
    _min: TenantMinAggregateOutputType | null
    _max: TenantMaxAggregateOutputType | null
  }

  export type TenantAvgAggregateOutputType = {
    id: number | null
    apartmentId: number | null
  }

  export type TenantSumAggregateOutputType = {
    id: number | null
    apartmentId: number | null
  }

  export type TenantMinAggregateOutputType = {
    id: number | null
    name: string | null
    phone: string | null
    apartmentId: number | null
  }

  export type TenantMaxAggregateOutputType = {
    id: number | null
    name: string | null
    phone: string | null
    apartmentId: number | null
  }

  export type TenantCountAggregateOutputType = {
    id: number
    name: number
    phone: number
    apartmentId: number
    _all: number
  }


  export type TenantAvgAggregateInputType = {
    id?: true
    apartmentId?: true
  }

  export type TenantSumAggregateInputType = {
    id?: true
    apartmentId?: true
  }

  export type TenantMinAggregateInputType = {
    id?: true
    name?: true
    phone?: true
    apartmentId?: true
  }

  export type TenantMaxAggregateInputType = {
    id?: true
    name?: true
    phone?: true
    apartmentId?: true
  }

  export type TenantCountAggregateInputType = {
    id?: true
    name?: true
    phone?: true
    apartmentId?: true
    _all?: true
  }

  export type TenantAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Tenant to aggregate.
     */
    where?: TenantWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tenants to fetch.
     */
    orderBy?: TenantOrderByWithRelationInput | TenantOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TenantWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tenants from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tenants.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Tenants
    **/
    _count?: true | TenantCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TenantAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TenantSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TenantMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TenantMaxAggregateInputType
  }

  export type GetTenantAggregateType<T extends TenantAggregateArgs> = {
        [P in keyof T & keyof AggregateTenant]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTenant[P]>
      : GetScalarType<T[P], AggregateTenant[P]>
  }




  export type TenantGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TenantWhereInput
    orderBy?: TenantOrderByWithAggregationInput | TenantOrderByWithAggregationInput[]
    by: TenantScalarFieldEnum[] | TenantScalarFieldEnum
    having?: TenantScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TenantCountAggregateInputType | true
    _avg?: TenantAvgAggregateInputType
    _sum?: TenantSumAggregateInputType
    _min?: TenantMinAggregateInputType
    _max?: TenantMaxAggregateInputType
  }

  export type TenantGroupByOutputType = {
    id: number
    name: string
    phone: string | null
    apartmentId: number | null
    _count: TenantCountAggregateOutputType | null
    _avg: TenantAvgAggregateOutputType | null
    _sum: TenantSumAggregateOutputType | null
    _min: TenantMinAggregateOutputType | null
    _max: TenantMaxAggregateOutputType | null
  }

  type GetTenantGroupByPayload<T extends TenantGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TenantGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TenantGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TenantGroupByOutputType[P]>
            : GetScalarType<T[P], TenantGroupByOutputType[P]>
        }
      >
    >


  export type TenantSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    phone?: boolean
    apartmentId?: boolean
    apartment?: boolean | Tenant$apartmentArgs<ExtArgs>
  }, ExtArgs["result"]["tenant"]>

  export type TenantSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    phone?: boolean
    apartmentId?: boolean
    apartment?: boolean | Tenant$apartmentArgs<ExtArgs>
  }, ExtArgs["result"]["tenant"]>

  export type TenantSelectScalar = {
    id?: boolean
    name?: boolean
    phone?: boolean
    apartmentId?: boolean
  }

  export type TenantInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    apartment?: boolean | Tenant$apartmentArgs<ExtArgs>
  }
  export type TenantIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    apartment?: boolean | Tenant$apartmentArgs<ExtArgs>
  }

  export type $TenantPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Tenant"
    objects: {
      apartment: Prisma.$ApartmentPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
      phone: string | null
      apartmentId: number | null
    }, ExtArgs["result"]["tenant"]>
    composites: {}
  }

  type TenantGetPayload<S extends boolean | null | undefined | TenantDefaultArgs> = $Result.GetResult<Prisma.$TenantPayload, S>

  type TenantCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<TenantFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: TenantCountAggregateInputType | true
    }

  export interface TenantDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Tenant'], meta: { name: 'Tenant' } }
    /**
     * Find zero or one Tenant that matches the filter.
     * @param {TenantFindUniqueArgs} args - Arguments to find a Tenant
     * @example
     * // Get one Tenant
     * const tenant = await prisma.tenant.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends TenantFindUniqueArgs>(args: SelectSubset<T, TenantFindUniqueArgs<ExtArgs>>): Prisma__TenantClient<$Result.GetResult<Prisma.$TenantPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Tenant that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {TenantFindUniqueOrThrowArgs} args - Arguments to find a Tenant
     * @example
     * // Get one Tenant
     * const tenant = await prisma.tenant.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends TenantFindUniqueOrThrowArgs>(args: SelectSubset<T, TenantFindUniqueOrThrowArgs<ExtArgs>>): Prisma__TenantClient<$Result.GetResult<Prisma.$TenantPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Tenant that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TenantFindFirstArgs} args - Arguments to find a Tenant
     * @example
     * // Get one Tenant
     * const tenant = await prisma.tenant.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends TenantFindFirstArgs>(args?: SelectSubset<T, TenantFindFirstArgs<ExtArgs>>): Prisma__TenantClient<$Result.GetResult<Prisma.$TenantPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Tenant that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TenantFindFirstOrThrowArgs} args - Arguments to find a Tenant
     * @example
     * // Get one Tenant
     * const tenant = await prisma.tenant.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends TenantFindFirstOrThrowArgs>(args?: SelectSubset<T, TenantFindFirstOrThrowArgs<ExtArgs>>): Prisma__TenantClient<$Result.GetResult<Prisma.$TenantPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Tenants that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TenantFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Tenants
     * const tenants = await prisma.tenant.findMany()
     * 
     * // Get first 10 Tenants
     * const tenants = await prisma.tenant.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const tenantWithIdOnly = await prisma.tenant.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends TenantFindManyArgs>(args?: SelectSubset<T, TenantFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TenantPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Tenant.
     * @param {TenantCreateArgs} args - Arguments to create a Tenant.
     * @example
     * // Create one Tenant
     * const Tenant = await prisma.tenant.create({
     *   data: {
     *     // ... data to create a Tenant
     *   }
     * })
     * 
     */
    create<T extends TenantCreateArgs>(args: SelectSubset<T, TenantCreateArgs<ExtArgs>>): Prisma__TenantClient<$Result.GetResult<Prisma.$TenantPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Tenants.
     * @param {TenantCreateManyArgs} args - Arguments to create many Tenants.
     * @example
     * // Create many Tenants
     * const tenant = await prisma.tenant.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends TenantCreateManyArgs>(args?: SelectSubset<T, TenantCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Tenants and returns the data saved in the database.
     * @param {TenantCreateManyAndReturnArgs} args - Arguments to create many Tenants.
     * @example
     * // Create many Tenants
     * const tenant = await prisma.tenant.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Tenants and only return the `id`
     * const tenantWithIdOnly = await prisma.tenant.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends TenantCreateManyAndReturnArgs>(args?: SelectSubset<T, TenantCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TenantPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Tenant.
     * @param {TenantDeleteArgs} args - Arguments to delete one Tenant.
     * @example
     * // Delete one Tenant
     * const Tenant = await prisma.tenant.delete({
     *   where: {
     *     // ... filter to delete one Tenant
     *   }
     * })
     * 
     */
    delete<T extends TenantDeleteArgs>(args: SelectSubset<T, TenantDeleteArgs<ExtArgs>>): Prisma__TenantClient<$Result.GetResult<Prisma.$TenantPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Tenant.
     * @param {TenantUpdateArgs} args - Arguments to update one Tenant.
     * @example
     * // Update one Tenant
     * const tenant = await prisma.tenant.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends TenantUpdateArgs>(args: SelectSubset<T, TenantUpdateArgs<ExtArgs>>): Prisma__TenantClient<$Result.GetResult<Prisma.$TenantPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Tenants.
     * @param {TenantDeleteManyArgs} args - Arguments to filter Tenants to delete.
     * @example
     * // Delete a few Tenants
     * const { count } = await prisma.tenant.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends TenantDeleteManyArgs>(args?: SelectSubset<T, TenantDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Tenants.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TenantUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Tenants
     * const tenant = await prisma.tenant.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends TenantUpdateManyArgs>(args: SelectSubset<T, TenantUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Tenant.
     * @param {TenantUpsertArgs} args - Arguments to update or create a Tenant.
     * @example
     * // Update or create a Tenant
     * const tenant = await prisma.tenant.upsert({
     *   create: {
     *     // ... data to create a Tenant
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Tenant we want to update
     *   }
     * })
     */
    upsert<T extends TenantUpsertArgs>(args: SelectSubset<T, TenantUpsertArgs<ExtArgs>>): Prisma__TenantClient<$Result.GetResult<Prisma.$TenantPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Tenants.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TenantCountArgs} args - Arguments to filter Tenants to count.
     * @example
     * // Count the number of Tenants
     * const count = await prisma.tenant.count({
     *   where: {
     *     // ... the filter for the Tenants we want to count
     *   }
     * })
    **/
    count<T extends TenantCountArgs>(
      args?: Subset<T, TenantCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TenantCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Tenant.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TenantAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TenantAggregateArgs>(args: Subset<T, TenantAggregateArgs>): Prisma.PrismaPromise<GetTenantAggregateType<T>>

    /**
     * Group by Tenant.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TenantGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TenantGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TenantGroupByArgs['orderBy'] }
        : { orderBy?: TenantGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TenantGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTenantGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Tenant model
   */
  readonly fields: TenantFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Tenant.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__TenantClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    apartment<T extends Tenant$apartmentArgs<ExtArgs> = {}>(args?: Subset<T, Tenant$apartmentArgs<ExtArgs>>): Prisma__ApartmentClient<$Result.GetResult<Prisma.$ApartmentPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Tenant model
   */ 
  interface TenantFieldRefs {
    readonly id: FieldRef<"Tenant", 'Int'>
    readonly name: FieldRef<"Tenant", 'String'>
    readonly phone: FieldRef<"Tenant", 'String'>
    readonly apartmentId: FieldRef<"Tenant", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Tenant findUnique
   */
  export type TenantFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tenant
     */
    select?: TenantSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TenantInclude<ExtArgs> | null
    /**
     * Filter, which Tenant to fetch.
     */
    where: TenantWhereUniqueInput
  }

  /**
   * Tenant findUniqueOrThrow
   */
  export type TenantFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tenant
     */
    select?: TenantSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TenantInclude<ExtArgs> | null
    /**
     * Filter, which Tenant to fetch.
     */
    where: TenantWhereUniqueInput
  }

  /**
   * Tenant findFirst
   */
  export type TenantFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tenant
     */
    select?: TenantSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TenantInclude<ExtArgs> | null
    /**
     * Filter, which Tenant to fetch.
     */
    where?: TenantWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tenants to fetch.
     */
    orderBy?: TenantOrderByWithRelationInput | TenantOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Tenants.
     */
    cursor?: TenantWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tenants from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tenants.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Tenants.
     */
    distinct?: TenantScalarFieldEnum | TenantScalarFieldEnum[]
  }

  /**
   * Tenant findFirstOrThrow
   */
  export type TenantFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tenant
     */
    select?: TenantSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TenantInclude<ExtArgs> | null
    /**
     * Filter, which Tenant to fetch.
     */
    where?: TenantWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tenants to fetch.
     */
    orderBy?: TenantOrderByWithRelationInput | TenantOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Tenants.
     */
    cursor?: TenantWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tenants from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tenants.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Tenants.
     */
    distinct?: TenantScalarFieldEnum | TenantScalarFieldEnum[]
  }

  /**
   * Tenant findMany
   */
  export type TenantFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tenant
     */
    select?: TenantSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TenantInclude<ExtArgs> | null
    /**
     * Filter, which Tenants to fetch.
     */
    where?: TenantWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tenants to fetch.
     */
    orderBy?: TenantOrderByWithRelationInput | TenantOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Tenants.
     */
    cursor?: TenantWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tenants from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tenants.
     */
    skip?: number
    distinct?: TenantScalarFieldEnum | TenantScalarFieldEnum[]
  }

  /**
   * Tenant create
   */
  export type TenantCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tenant
     */
    select?: TenantSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TenantInclude<ExtArgs> | null
    /**
     * The data needed to create a Tenant.
     */
    data: XOR<TenantCreateInput, TenantUncheckedCreateInput>
  }

  /**
   * Tenant createMany
   */
  export type TenantCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Tenants.
     */
    data: TenantCreateManyInput | TenantCreateManyInput[]
  }

  /**
   * Tenant createManyAndReturn
   */
  export type TenantCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tenant
     */
    select?: TenantSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Tenants.
     */
    data: TenantCreateManyInput | TenantCreateManyInput[]
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TenantIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Tenant update
   */
  export type TenantUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tenant
     */
    select?: TenantSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TenantInclude<ExtArgs> | null
    /**
     * The data needed to update a Tenant.
     */
    data: XOR<TenantUpdateInput, TenantUncheckedUpdateInput>
    /**
     * Choose, which Tenant to update.
     */
    where: TenantWhereUniqueInput
  }

  /**
   * Tenant updateMany
   */
  export type TenantUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Tenants.
     */
    data: XOR<TenantUpdateManyMutationInput, TenantUncheckedUpdateManyInput>
    /**
     * Filter which Tenants to update
     */
    where?: TenantWhereInput
  }

  /**
   * Tenant upsert
   */
  export type TenantUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tenant
     */
    select?: TenantSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TenantInclude<ExtArgs> | null
    /**
     * The filter to search for the Tenant to update in case it exists.
     */
    where: TenantWhereUniqueInput
    /**
     * In case the Tenant found by the `where` argument doesn't exist, create a new Tenant with this data.
     */
    create: XOR<TenantCreateInput, TenantUncheckedCreateInput>
    /**
     * In case the Tenant was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TenantUpdateInput, TenantUncheckedUpdateInput>
  }

  /**
   * Tenant delete
   */
  export type TenantDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tenant
     */
    select?: TenantSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TenantInclude<ExtArgs> | null
    /**
     * Filter which Tenant to delete.
     */
    where: TenantWhereUniqueInput
  }

  /**
   * Tenant deleteMany
   */
  export type TenantDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Tenants to delete
     */
    where?: TenantWhereInput
  }

  /**
   * Tenant.apartment
   */
  export type Tenant$apartmentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Apartment
     */
    select?: ApartmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ApartmentInclude<ExtArgs> | null
    where?: ApartmentWhereInput
  }

  /**
   * Tenant without action
   */
  export type TenantDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tenant
     */
    select?: TenantSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TenantInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const NemovitostScalarFieldEnum: {
    id: 'id',
    nazev: 'nazev',
    adresa: 'adresa'
  };

  export type NemovitostScalarFieldEnum = (typeof NemovitostScalarFieldEnum)[keyof typeof NemovitostScalarFieldEnum]


  export const NajemnikScalarFieldEnum: {
    id: 'id',
    jmeno: 'jmeno',
    email: 'email',
    nemovitostId: 'nemovitostId',
    mesicniNajem: 'mesicniNajem'
  };

  export type NajemnikScalarFieldEnum = (typeof NajemnikScalarFieldEnum)[keyof typeof NajemnikScalarFieldEnum]


  export const PlatbaScalarFieldEnum: {
    id: 'id',
    castka: 'castka',
    datum: 'datum',
    najemnikId: 'najemnikId'
  };

  export type PlatbaScalarFieldEnum = (typeof PlatbaScalarFieldEnum)[keyof typeof PlatbaScalarFieldEnum]


  export const UkolScalarFieldEnum: {
    id: 'id',
    popis: 'popis',
    datum: 'datum',
    status: 'status',
    najemnikId: 'najemnikId'
  };

  export type UkolScalarFieldEnum = (typeof UkolScalarFieldEnum)[keyof typeof UkolScalarFieldEnum]


  export const MeridloScalarFieldEnum: {
    id: 'id',
    typ: 'typ',
    hodnota: 'hodnota',
    datum: 'datum',
    najemnikId: 'najemnikId'
  };

  export type MeridloScalarFieldEnum = (typeof MeridloScalarFieldEnum)[keyof typeof MeridloScalarFieldEnum]


  export const UserScalarFieldEnum: {
    id: 'id',
    email: 'email',
    password: 'password',
    role: 'role',
    isActive: 'isActive'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const ApartmentScalarFieldEnum: {
    id: 'id',
    address: 'address',
    city: 'city',
    postalCode: 'postalCode',
    purchasePrice: 'purchasePrice',
    currentValue: 'currentValue',
    purchaseDate: 'purchaseDate',
    parentId: 'parentId',
    ownerId: 'ownerId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    insuranceAnnualPrice: 'insuranceAnnualPrice',
    insuranceNumber: 'insuranceNumber',
    insuranceNote: 'insuranceNote',
    ownershipType: 'ownershipType',
    buildingType: 'buildingType',
    buildingConstruction: 'buildingConstruction',
    heatingType: 'heatingType',
    area: 'area',
    eicCode: 'eicCode',
    eanCode: 'eanCode',
    floorNumber: 'floorNumber',
    totalFloorsAbove: 'totalFloorsAbove',
    totalFloorsBelow: 'totalFloorsBelow',
    hasElevator: 'hasElevator',
    hasBalcony: 'hasBalcony',
    hasLoggia: 'hasLoggia',
    hasTerrace: 'hasTerrace',
    hasStorage: 'hasStorage',
    technicalNote: 'technicalNote'
  };

  export type ApartmentScalarFieldEnum = (typeof ApartmentScalarFieldEnum)[keyof typeof ApartmentScalarFieldEnum]


  export const TenantScalarFieldEnum: {
    id: 'id',
    name: 'name',
    phone: 'phone',
    apartmentId: 'apartmentId'
  };

  export type TenantScalarFieldEnum = (typeof TenantScalarFieldEnum)[keyof typeof TenantScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    
  /**
   * Deep Input Types
   */


  export type NemovitostWhereInput = {
    AND?: NemovitostWhereInput | NemovitostWhereInput[]
    OR?: NemovitostWhereInput[]
    NOT?: NemovitostWhereInput | NemovitostWhereInput[]
    id?: IntFilter<"Nemovitost"> | number
    nazev?: StringFilter<"Nemovitost"> | string
    adresa?: StringFilter<"Nemovitost"> | string
    najemnici?: NajemnikListRelationFilter
  }

  export type NemovitostOrderByWithRelationInput = {
    id?: SortOrder
    nazev?: SortOrder
    adresa?: SortOrder
    najemnici?: NajemnikOrderByRelationAggregateInput
  }

  export type NemovitostWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: NemovitostWhereInput | NemovitostWhereInput[]
    OR?: NemovitostWhereInput[]
    NOT?: NemovitostWhereInput | NemovitostWhereInput[]
    nazev?: StringFilter<"Nemovitost"> | string
    adresa?: StringFilter<"Nemovitost"> | string
    najemnici?: NajemnikListRelationFilter
  }, "id">

  export type NemovitostOrderByWithAggregationInput = {
    id?: SortOrder
    nazev?: SortOrder
    adresa?: SortOrder
    _count?: NemovitostCountOrderByAggregateInput
    _avg?: NemovitostAvgOrderByAggregateInput
    _max?: NemovitostMaxOrderByAggregateInput
    _min?: NemovitostMinOrderByAggregateInput
    _sum?: NemovitostSumOrderByAggregateInput
  }

  export type NemovitostScalarWhereWithAggregatesInput = {
    AND?: NemovitostScalarWhereWithAggregatesInput | NemovitostScalarWhereWithAggregatesInput[]
    OR?: NemovitostScalarWhereWithAggregatesInput[]
    NOT?: NemovitostScalarWhereWithAggregatesInput | NemovitostScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Nemovitost"> | number
    nazev?: StringWithAggregatesFilter<"Nemovitost"> | string
    adresa?: StringWithAggregatesFilter<"Nemovitost"> | string
  }

  export type NajemnikWhereInput = {
    AND?: NajemnikWhereInput | NajemnikWhereInput[]
    OR?: NajemnikWhereInput[]
    NOT?: NajemnikWhereInput | NajemnikWhereInput[]
    id?: IntFilter<"Najemnik"> | number
    jmeno?: StringFilter<"Najemnik"> | string
    email?: StringFilter<"Najemnik"> | string
    nemovitostId?: IntFilter<"Najemnik"> | number
    mesicniNajem?: FloatFilter<"Najemnik"> | number
    nemovitost?: XOR<NemovitostRelationFilter, NemovitostWhereInput>
    platby?: PlatbaListRelationFilter
    meridla?: MeridloListRelationFilter
    ukoly?: UkolListRelationFilter
  }

  export type NajemnikOrderByWithRelationInput = {
    id?: SortOrder
    jmeno?: SortOrder
    email?: SortOrder
    nemovitostId?: SortOrder
    mesicniNajem?: SortOrder
    nemovitost?: NemovitostOrderByWithRelationInput
    platby?: PlatbaOrderByRelationAggregateInput
    meridla?: MeridloOrderByRelationAggregateInput
    ukoly?: UkolOrderByRelationAggregateInput
  }

  export type NajemnikWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: NajemnikWhereInput | NajemnikWhereInput[]
    OR?: NajemnikWhereInput[]
    NOT?: NajemnikWhereInput | NajemnikWhereInput[]
    jmeno?: StringFilter<"Najemnik"> | string
    email?: StringFilter<"Najemnik"> | string
    nemovitostId?: IntFilter<"Najemnik"> | number
    mesicniNajem?: FloatFilter<"Najemnik"> | number
    nemovitost?: XOR<NemovitostRelationFilter, NemovitostWhereInput>
    platby?: PlatbaListRelationFilter
    meridla?: MeridloListRelationFilter
    ukoly?: UkolListRelationFilter
  }, "id">

  export type NajemnikOrderByWithAggregationInput = {
    id?: SortOrder
    jmeno?: SortOrder
    email?: SortOrder
    nemovitostId?: SortOrder
    mesicniNajem?: SortOrder
    _count?: NajemnikCountOrderByAggregateInput
    _avg?: NajemnikAvgOrderByAggregateInput
    _max?: NajemnikMaxOrderByAggregateInput
    _min?: NajemnikMinOrderByAggregateInput
    _sum?: NajemnikSumOrderByAggregateInput
  }

  export type NajemnikScalarWhereWithAggregatesInput = {
    AND?: NajemnikScalarWhereWithAggregatesInput | NajemnikScalarWhereWithAggregatesInput[]
    OR?: NajemnikScalarWhereWithAggregatesInput[]
    NOT?: NajemnikScalarWhereWithAggregatesInput | NajemnikScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Najemnik"> | number
    jmeno?: StringWithAggregatesFilter<"Najemnik"> | string
    email?: StringWithAggregatesFilter<"Najemnik"> | string
    nemovitostId?: IntWithAggregatesFilter<"Najemnik"> | number
    mesicniNajem?: FloatWithAggregatesFilter<"Najemnik"> | number
  }

  export type PlatbaWhereInput = {
    AND?: PlatbaWhereInput | PlatbaWhereInput[]
    OR?: PlatbaWhereInput[]
    NOT?: PlatbaWhereInput | PlatbaWhereInput[]
    id?: IntFilter<"Platba"> | number
    castka?: FloatFilter<"Platba"> | number
    datum?: DateTimeFilter<"Platba"> | Date | string
    najemnikId?: IntFilter<"Platba"> | number
    najemnik?: XOR<NajemnikRelationFilter, NajemnikWhereInput>
  }

  export type PlatbaOrderByWithRelationInput = {
    id?: SortOrder
    castka?: SortOrder
    datum?: SortOrder
    najemnikId?: SortOrder
    najemnik?: NajemnikOrderByWithRelationInput
  }

  export type PlatbaWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: PlatbaWhereInput | PlatbaWhereInput[]
    OR?: PlatbaWhereInput[]
    NOT?: PlatbaWhereInput | PlatbaWhereInput[]
    castka?: FloatFilter<"Platba"> | number
    datum?: DateTimeFilter<"Platba"> | Date | string
    najemnikId?: IntFilter<"Platba"> | number
    najemnik?: XOR<NajemnikRelationFilter, NajemnikWhereInput>
  }, "id">

  export type PlatbaOrderByWithAggregationInput = {
    id?: SortOrder
    castka?: SortOrder
    datum?: SortOrder
    najemnikId?: SortOrder
    _count?: PlatbaCountOrderByAggregateInput
    _avg?: PlatbaAvgOrderByAggregateInput
    _max?: PlatbaMaxOrderByAggregateInput
    _min?: PlatbaMinOrderByAggregateInput
    _sum?: PlatbaSumOrderByAggregateInput
  }

  export type PlatbaScalarWhereWithAggregatesInput = {
    AND?: PlatbaScalarWhereWithAggregatesInput | PlatbaScalarWhereWithAggregatesInput[]
    OR?: PlatbaScalarWhereWithAggregatesInput[]
    NOT?: PlatbaScalarWhereWithAggregatesInput | PlatbaScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Platba"> | number
    castka?: FloatWithAggregatesFilter<"Platba"> | number
    datum?: DateTimeWithAggregatesFilter<"Platba"> | Date | string
    najemnikId?: IntWithAggregatesFilter<"Platba"> | number
  }

  export type UkolWhereInput = {
    AND?: UkolWhereInput | UkolWhereInput[]
    OR?: UkolWhereInput[]
    NOT?: UkolWhereInput | UkolWhereInput[]
    id?: IntFilter<"Ukol"> | number
    popis?: StringFilter<"Ukol"> | string
    datum?: DateTimeFilter<"Ukol"> | Date | string
    status?: StringFilter<"Ukol"> | string
    najemnikId?: IntFilter<"Ukol"> | number
    najemnik?: XOR<NajemnikRelationFilter, NajemnikWhereInput>
  }

  export type UkolOrderByWithRelationInput = {
    id?: SortOrder
    popis?: SortOrder
    datum?: SortOrder
    status?: SortOrder
    najemnikId?: SortOrder
    najemnik?: NajemnikOrderByWithRelationInput
  }

  export type UkolWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: UkolWhereInput | UkolWhereInput[]
    OR?: UkolWhereInput[]
    NOT?: UkolWhereInput | UkolWhereInput[]
    popis?: StringFilter<"Ukol"> | string
    datum?: DateTimeFilter<"Ukol"> | Date | string
    status?: StringFilter<"Ukol"> | string
    najemnikId?: IntFilter<"Ukol"> | number
    najemnik?: XOR<NajemnikRelationFilter, NajemnikWhereInput>
  }, "id">

  export type UkolOrderByWithAggregationInput = {
    id?: SortOrder
    popis?: SortOrder
    datum?: SortOrder
    status?: SortOrder
    najemnikId?: SortOrder
    _count?: UkolCountOrderByAggregateInput
    _avg?: UkolAvgOrderByAggregateInput
    _max?: UkolMaxOrderByAggregateInput
    _min?: UkolMinOrderByAggregateInput
    _sum?: UkolSumOrderByAggregateInput
  }

  export type UkolScalarWhereWithAggregatesInput = {
    AND?: UkolScalarWhereWithAggregatesInput | UkolScalarWhereWithAggregatesInput[]
    OR?: UkolScalarWhereWithAggregatesInput[]
    NOT?: UkolScalarWhereWithAggregatesInput | UkolScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Ukol"> | number
    popis?: StringWithAggregatesFilter<"Ukol"> | string
    datum?: DateTimeWithAggregatesFilter<"Ukol"> | Date | string
    status?: StringWithAggregatesFilter<"Ukol"> | string
    najemnikId?: IntWithAggregatesFilter<"Ukol"> | number
  }

  export type MeridloWhereInput = {
    AND?: MeridloWhereInput | MeridloWhereInput[]
    OR?: MeridloWhereInput[]
    NOT?: MeridloWhereInput | MeridloWhereInput[]
    id?: IntFilter<"Meridlo"> | number
    typ?: StringFilter<"Meridlo"> | string
    hodnota?: FloatFilter<"Meridlo"> | number
    datum?: DateTimeFilter<"Meridlo"> | Date | string
    najemnikId?: IntFilter<"Meridlo"> | number
    najemnik?: XOR<NajemnikRelationFilter, NajemnikWhereInput>
  }

  export type MeridloOrderByWithRelationInput = {
    id?: SortOrder
    typ?: SortOrder
    hodnota?: SortOrder
    datum?: SortOrder
    najemnikId?: SortOrder
    najemnik?: NajemnikOrderByWithRelationInput
  }

  export type MeridloWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: MeridloWhereInput | MeridloWhereInput[]
    OR?: MeridloWhereInput[]
    NOT?: MeridloWhereInput | MeridloWhereInput[]
    typ?: StringFilter<"Meridlo"> | string
    hodnota?: FloatFilter<"Meridlo"> | number
    datum?: DateTimeFilter<"Meridlo"> | Date | string
    najemnikId?: IntFilter<"Meridlo"> | number
    najemnik?: XOR<NajemnikRelationFilter, NajemnikWhereInput>
  }, "id">

  export type MeridloOrderByWithAggregationInput = {
    id?: SortOrder
    typ?: SortOrder
    hodnota?: SortOrder
    datum?: SortOrder
    najemnikId?: SortOrder
    _count?: MeridloCountOrderByAggregateInput
    _avg?: MeridloAvgOrderByAggregateInput
    _max?: MeridloMaxOrderByAggregateInput
    _min?: MeridloMinOrderByAggregateInput
    _sum?: MeridloSumOrderByAggregateInput
  }

  export type MeridloScalarWhereWithAggregatesInput = {
    AND?: MeridloScalarWhereWithAggregatesInput | MeridloScalarWhereWithAggregatesInput[]
    OR?: MeridloScalarWhereWithAggregatesInput[]
    NOT?: MeridloScalarWhereWithAggregatesInput | MeridloScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Meridlo"> | number
    typ?: StringWithAggregatesFilter<"Meridlo"> | string
    hodnota?: FloatWithAggregatesFilter<"Meridlo"> | number
    datum?: DateTimeWithAggregatesFilter<"Meridlo"> | Date | string
    najemnikId?: IntWithAggregatesFilter<"Meridlo"> | number
  }

  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    id?: IntFilter<"User"> | number
    email?: StringFilter<"User"> | string
    password?: StringFilter<"User"> | string
    role?: StringFilter<"User"> | string
    isActive?: BoolFilter<"User"> | boolean
    apartments?: ApartmentListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    role?: SortOrder
    isActive?: SortOrder
    apartments?: ApartmentOrderByRelationAggregateInput
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    email?: string
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    password?: StringFilter<"User"> | string
    role?: StringFilter<"User"> | string
    isActive?: BoolFilter<"User"> | boolean
    apartments?: ApartmentListRelationFilter
  }, "id" | "email">

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    role?: SortOrder
    isActive?: SortOrder
    _count?: UserCountOrderByAggregateInput
    _avg?: UserAvgOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
    _sum?: UserSumOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"User"> | number
    email?: StringWithAggregatesFilter<"User"> | string
    password?: StringWithAggregatesFilter<"User"> | string
    role?: StringWithAggregatesFilter<"User"> | string
    isActive?: BoolWithAggregatesFilter<"User"> | boolean
  }

  export type ApartmentWhereInput = {
    AND?: ApartmentWhereInput | ApartmentWhereInput[]
    OR?: ApartmentWhereInput[]
    NOT?: ApartmentWhereInput | ApartmentWhereInput[]
    id?: IntFilter<"Apartment"> | number
    address?: StringFilter<"Apartment"> | string
    city?: StringFilter<"Apartment"> | string
    postalCode?: StringFilter<"Apartment"> | string
    purchasePrice?: FloatNullableFilter<"Apartment"> | number | null
    currentValue?: FloatNullableFilter<"Apartment"> | number | null
    purchaseDate?: DateTimeNullableFilter<"Apartment"> | Date | string | null
    parentId?: IntNullableFilter<"Apartment"> | number | null
    ownerId?: IntFilter<"Apartment"> | number
    createdAt?: DateTimeFilter<"Apartment"> | Date | string
    updatedAt?: DateTimeFilter<"Apartment"> | Date | string
    insuranceAnnualPrice?: FloatNullableFilter<"Apartment"> | number | null
    insuranceNumber?: StringNullableFilter<"Apartment"> | string | null
    insuranceNote?: StringNullableFilter<"Apartment"> | string | null
    ownershipType?: StringNullableFilter<"Apartment"> | string | null
    buildingType?: StringNullableFilter<"Apartment"> | string | null
    buildingConstruction?: StringNullableFilter<"Apartment"> | string | null
    heatingType?: StringNullableFilter<"Apartment"> | string | null
    area?: FloatNullableFilter<"Apartment"> | number | null
    eicCode?: StringNullableFilter<"Apartment"> | string | null
    eanCode?: StringNullableFilter<"Apartment"> | string | null
    floorNumber?: IntNullableFilter<"Apartment"> | number | null
    totalFloorsAbove?: IntNullableFilter<"Apartment"> | number | null
    totalFloorsBelow?: IntNullableFilter<"Apartment"> | number | null
    hasElevator?: BoolNullableFilter<"Apartment"> | boolean | null
    hasBalcony?: BoolNullableFilter<"Apartment"> | boolean | null
    hasLoggia?: BoolNullableFilter<"Apartment"> | boolean | null
    hasTerrace?: BoolNullableFilter<"Apartment"> | boolean | null
    hasStorage?: BoolNullableFilter<"Apartment"> | boolean | null
    technicalNote?: StringNullableFilter<"Apartment"> | string | null
    parent?: XOR<ApartmentNullableRelationFilter, ApartmentWhereInput> | null
    children?: ApartmentListRelationFilter
    owner?: XOR<UserRelationFilter, UserWhereInput>
    tenants?: TenantListRelationFilter
  }

  export type ApartmentOrderByWithRelationInput = {
    id?: SortOrder
    address?: SortOrder
    city?: SortOrder
    postalCode?: SortOrder
    purchasePrice?: SortOrderInput | SortOrder
    currentValue?: SortOrderInput | SortOrder
    purchaseDate?: SortOrderInput | SortOrder
    parentId?: SortOrderInput | SortOrder
    ownerId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    insuranceAnnualPrice?: SortOrderInput | SortOrder
    insuranceNumber?: SortOrderInput | SortOrder
    insuranceNote?: SortOrderInput | SortOrder
    ownershipType?: SortOrderInput | SortOrder
    buildingType?: SortOrderInput | SortOrder
    buildingConstruction?: SortOrderInput | SortOrder
    heatingType?: SortOrderInput | SortOrder
    area?: SortOrderInput | SortOrder
    eicCode?: SortOrderInput | SortOrder
    eanCode?: SortOrderInput | SortOrder
    floorNumber?: SortOrderInput | SortOrder
    totalFloorsAbove?: SortOrderInput | SortOrder
    totalFloorsBelow?: SortOrderInput | SortOrder
    hasElevator?: SortOrderInput | SortOrder
    hasBalcony?: SortOrderInput | SortOrder
    hasLoggia?: SortOrderInput | SortOrder
    hasTerrace?: SortOrderInput | SortOrder
    hasStorage?: SortOrderInput | SortOrder
    technicalNote?: SortOrderInput | SortOrder
    parent?: ApartmentOrderByWithRelationInput
    children?: ApartmentOrderByRelationAggregateInput
    owner?: UserOrderByWithRelationInput
    tenants?: TenantOrderByRelationAggregateInput
  }

  export type ApartmentWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: ApartmentWhereInput | ApartmentWhereInput[]
    OR?: ApartmentWhereInput[]
    NOT?: ApartmentWhereInput | ApartmentWhereInput[]
    address?: StringFilter<"Apartment"> | string
    city?: StringFilter<"Apartment"> | string
    postalCode?: StringFilter<"Apartment"> | string
    purchasePrice?: FloatNullableFilter<"Apartment"> | number | null
    currentValue?: FloatNullableFilter<"Apartment"> | number | null
    purchaseDate?: DateTimeNullableFilter<"Apartment"> | Date | string | null
    parentId?: IntNullableFilter<"Apartment"> | number | null
    ownerId?: IntFilter<"Apartment"> | number
    createdAt?: DateTimeFilter<"Apartment"> | Date | string
    updatedAt?: DateTimeFilter<"Apartment"> | Date | string
    insuranceAnnualPrice?: FloatNullableFilter<"Apartment"> | number | null
    insuranceNumber?: StringNullableFilter<"Apartment"> | string | null
    insuranceNote?: StringNullableFilter<"Apartment"> | string | null
    ownershipType?: StringNullableFilter<"Apartment"> | string | null
    buildingType?: StringNullableFilter<"Apartment"> | string | null
    buildingConstruction?: StringNullableFilter<"Apartment"> | string | null
    heatingType?: StringNullableFilter<"Apartment"> | string | null
    area?: FloatNullableFilter<"Apartment"> | number | null
    eicCode?: StringNullableFilter<"Apartment"> | string | null
    eanCode?: StringNullableFilter<"Apartment"> | string | null
    floorNumber?: IntNullableFilter<"Apartment"> | number | null
    totalFloorsAbove?: IntNullableFilter<"Apartment"> | number | null
    totalFloorsBelow?: IntNullableFilter<"Apartment"> | number | null
    hasElevator?: BoolNullableFilter<"Apartment"> | boolean | null
    hasBalcony?: BoolNullableFilter<"Apartment"> | boolean | null
    hasLoggia?: BoolNullableFilter<"Apartment"> | boolean | null
    hasTerrace?: BoolNullableFilter<"Apartment"> | boolean | null
    hasStorage?: BoolNullableFilter<"Apartment"> | boolean | null
    technicalNote?: StringNullableFilter<"Apartment"> | string | null
    parent?: XOR<ApartmentNullableRelationFilter, ApartmentWhereInput> | null
    children?: ApartmentListRelationFilter
    owner?: XOR<UserRelationFilter, UserWhereInput>
    tenants?: TenantListRelationFilter
  }, "id">

  export type ApartmentOrderByWithAggregationInput = {
    id?: SortOrder
    address?: SortOrder
    city?: SortOrder
    postalCode?: SortOrder
    purchasePrice?: SortOrderInput | SortOrder
    currentValue?: SortOrderInput | SortOrder
    purchaseDate?: SortOrderInput | SortOrder
    parentId?: SortOrderInput | SortOrder
    ownerId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    insuranceAnnualPrice?: SortOrderInput | SortOrder
    insuranceNumber?: SortOrderInput | SortOrder
    insuranceNote?: SortOrderInput | SortOrder
    ownershipType?: SortOrderInput | SortOrder
    buildingType?: SortOrderInput | SortOrder
    buildingConstruction?: SortOrderInput | SortOrder
    heatingType?: SortOrderInput | SortOrder
    area?: SortOrderInput | SortOrder
    eicCode?: SortOrderInput | SortOrder
    eanCode?: SortOrderInput | SortOrder
    floorNumber?: SortOrderInput | SortOrder
    totalFloorsAbove?: SortOrderInput | SortOrder
    totalFloorsBelow?: SortOrderInput | SortOrder
    hasElevator?: SortOrderInput | SortOrder
    hasBalcony?: SortOrderInput | SortOrder
    hasLoggia?: SortOrderInput | SortOrder
    hasTerrace?: SortOrderInput | SortOrder
    hasStorage?: SortOrderInput | SortOrder
    technicalNote?: SortOrderInput | SortOrder
    _count?: ApartmentCountOrderByAggregateInput
    _avg?: ApartmentAvgOrderByAggregateInput
    _max?: ApartmentMaxOrderByAggregateInput
    _min?: ApartmentMinOrderByAggregateInput
    _sum?: ApartmentSumOrderByAggregateInput
  }

  export type ApartmentScalarWhereWithAggregatesInput = {
    AND?: ApartmentScalarWhereWithAggregatesInput | ApartmentScalarWhereWithAggregatesInput[]
    OR?: ApartmentScalarWhereWithAggregatesInput[]
    NOT?: ApartmentScalarWhereWithAggregatesInput | ApartmentScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Apartment"> | number
    address?: StringWithAggregatesFilter<"Apartment"> | string
    city?: StringWithAggregatesFilter<"Apartment"> | string
    postalCode?: StringWithAggregatesFilter<"Apartment"> | string
    purchasePrice?: FloatNullableWithAggregatesFilter<"Apartment"> | number | null
    currentValue?: FloatNullableWithAggregatesFilter<"Apartment"> | number | null
    purchaseDate?: DateTimeNullableWithAggregatesFilter<"Apartment"> | Date | string | null
    parentId?: IntNullableWithAggregatesFilter<"Apartment"> | number | null
    ownerId?: IntWithAggregatesFilter<"Apartment"> | number
    createdAt?: DateTimeWithAggregatesFilter<"Apartment"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Apartment"> | Date | string
    insuranceAnnualPrice?: FloatNullableWithAggregatesFilter<"Apartment"> | number | null
    insuranceNumber?: StringNullableWithAggregatesFilter<"Apartment"> | string | null
    insuranceNote?: StringNullableWithAggregatesFilter<"Apartment"> | string | null
    ownershipType?: StringNullableWithAggregatesFilter<"Apartment"> | string | null
    buildingType?: StringNullableWithAggregatesFilter<"Apartment"> | string | null
    buildingConstruction?: StringNullableWithAggregatesFilter<"Apartment"> | string | null
    heatingType?: StringNullableWithAggregatesFilter<"Apartment"> | string | null
    area?: FloatNullableWithAggregatesFilter<"Apartment"> | number | null
    eicCode?: StringNullableWithAggregatesFilter<"Apartment"> | string | null
    eanCode?: StringNullableWithAggregatesFilter<"Apartment"> | string | null
    floorNumber?: IntNullableWithAggregatesFilter<"Apartment"> | number | null
    totalFloorsAbove?: IntNullableWithAggregatesFilter<"Apartment"> | number | null
    totalFloorsBelow?: IntNullableWithAggregatesFilter<"Apartment"> | number | null
    hasElevator?: BoolNullableWithAggregatesFilter<"Apartment"> | boolean | null
    hasBalcony?: BoolNullableWithAggregatesFilter<"Apartment"> | boolean | null
    hasLoggia?: BoolNullableWithAggregatesFilter<"Apartment"> | boolean | null
    hasTerrace?: BoolNullableWithAggregatesFilter<"Apartment"> | boolean | null
    hasStorage?: BoolNullableWithAggregatesFilter<"Apartment"> | boolean | null
    technicalNote?: StringNullableWithAggregatesFilter<"Apartment"> | string | null
  }

  export type TenantWhereInput = {
    AND?: TenantWhereInput | TenantWhereInput[]
    OR?: TenantWhereInput[]
    NOT?: TenantWhereInput | TenantWhereInput[]
    id?: IntFilter<"Tenant"> | number
    name?: StringFilter<"Tenant"> | string
    phone?: StringNullableFilter<"Tenant"> | string | null
    apartmentId?: IntNullableFilter<"Tenant"> | number | null
    apartment?: XOR<ApartmentNullableRelationFilter, ApartmentWhereInput> | null
  }

  export type TenantOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    phone?: SortOrderInput | SortOrder
    apartmentId?: SortOrderInput | SortOrder
    apartment?: ApartmentOrderByWithRelationInput
  }

  export type TenantWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: TenantWhereInput | TenantWhereInput[]
    OR?: TenantWhereInput[]
    NOT?: TenantWhereInput | TenantWhereInput[]
    name?: StringFilter<"Tenant"> | string
    phone?: StringNullableFilter<"Tenant"> | string | null
    apartmentId?: IntNullableFilter<"Tenant"> | number | null
    apartment?: XOR<ApartmentNullableRelationFilter, ApartmentWhereInput> | null
  }, "id">

  export type TenantOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    phone?: SortOrderInput | SortOrder
    apartmentId?: SortOrderInput | SortOrder
    _count?: TenantCountOrderByAggregateInput
    _avg?: TenantAvgOrderByAggregateInput
    _max?: TenantMaxOrderByAggregateInput
    _min?: TenantMinOrderByAggregateInput
    _sum?: TenantSumOrderByAggregateInput
  }

  export type TenantScalarWhereWithAggregatesInput = {
    AND?: TenantScalarWhereWithAggregatesInput | TenantScalarWhereWithAggregatesInput[]
    OR?: TenantScalarWhereWithAggregatesInput[]
    NOT?: TenantScalarWhereWithAggregatesInput | TenantScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Tenant"> | number
    name?: StringWithAggregatesFilter<"Tenant"> | string
    phone?: StringNullableWithAggregatesFilter<"Tenant"> | string | null
    apartmentId?: IntNullableWithAggregatesFilter<"Tenant"> | number | null
  }

  export type NemovitostCreateInput = {
    nazev: string
    adresa: string
    najemnici?: NajemnikCreateNestedManyWithoutNemovitostInput
  }

  export type NemovitostUncheckedCreateInput = {
    id?: number
    nazev: string
    adresa: string
    najemnici?: NajemnikUncheckedCreateNestedManyWithoutNemovitostInput
  }

  export type NemovitostUpdateInput = {
    nazev?: StringFieldUpdateOperationsInput | string
    adresa?: StringFieldUpdateOperationsInput | string
    najemnici?: NajemnikUpdateManyWithoutNemovitostNestedInput
  }

  export type NemovitostUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    nazev?: StringFieldUpdateOperationsInput | string
    adresa?: StringFieldUpdateOperationsInput | string
    najemnici?: NajemnikUncheckedUpdateManyWithoutNemovitostNestedInput
  }

  export type NemovitostCreateManyInput = {
    id?: number
    nazev: string
    adresa: string
  }

  export type NemovitostUpdateManyMutationInput = {
    nazev?: StringFieldUpdateOperationsInput | string
    adresa?: StringFieldUpdateOperationsInput | string
  }

  export type NemovitostUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    nazev?: StringFieldUpdateOperationsInput | string
    adresa?: StringFieldUpdateOperationsInput | string
  }

  export type NajemnikCreateInput = {
    jmeno: string
    email: string
    mesicniNajem?: number
    nemovitost: NemovitostCreateNestedOneWithoutNajemniciInput
    platby?: PlatbaCreateNestedManyWithoutNajemnikInput
    meridla?: MeridloCreateNestedManyWithoutNajemnikInput
    ukoly?: UkolCreateNestedManyWithoutNajemnikInput
  }

  export type NajemnikUncheckedCreateInput = {
    id?: number
    jmeno: string
    email: string
    nemovitostId: number
    mesicniNajem?: number
    platby?: PlatbaUncheckedCreateNestedManyWithoutNajemnikInput
    meridla?: MeridloUncheckedCreateNestedManyWithoutNajemnikInput
    ukoly?: UkolUncheckedCreateNestedManyWithoutNajemnikInput
  }

  export type NajemnikUpdateInput = {
    jmeno?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    mesicniNajem?: FloatFieldUpdateOperationsInput | number
    nemovitost?: NemovitostUpdateOneRequiredWithoutNajemniciNestedInput
    platby?: PlatbaUpdateManyWithoutNajemnikNestedInput
    meridla?: MeridloUpdateManyWithoutNajemnikNestedInput
    ukoly?: UkolUpdateManyWithoutNajemnikNestedInput
  }

  export type NajemnikUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    jmeno?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    nemovitostId?: IntFieldUpdateOperationsInput | number
    mesicniNajem?: FloatFieldUpdateOperationsInput | number
    platby?: PlatbaUncheckedUpdateManyWithoutNajemnikNestedInput
    meridla?: MeridloUncheckedUpdateManyWithoutNajemnikNestedInput
    ukoly?: UkolUncheckedUpdateManyWithoutNajemnikNestedInput
  }

  export type NajemnikCreateManyInput = {
    id?: number
    jmeno: string
    email: string
    nemovitostId: number
    mesicniNajem?: number
  }

  export type NajemnikUpdateManyMutationInput = {
    jmeno?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    mesicniNajem?: FloatFieldUpdateOperationsInput | number
  }

  export type NajemnikUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    jmeno?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    nemovitostId?: IntFieldUpdateOperationsInput | number
    mesicniNajem?: FloatFieldUpdateOperationsInput | number
  }

  export type PlatbaCreateInput = {
    castka: number
    datum: Date | string
    najemnik: NajemnikCreateNestedOneWithoutPlatbyInput
  }

  export type PlatbaUncheckedCreateInput = {
    id?: number
    castka: number
    datum: Date | string
    najemnikId: number
  }

  export type PlatbaUpdateInput = {
    castka?: FloatFieldUpdateOperationsInput | number
    datum?: DateTimeFieldUpdateOperationsInput | Date | string
    najemnik?: NajemnikUpdateOneRequiredWithoutPlatbyNestedInput
  }

  export type PlatbaUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    castka?: FloatFieldUpdateOperationsInput | number
    datum?: DateTimeFieldUpdateOperationsInput | Date | string
    najemnikId?: IntFieldUpdateOperationsInput | number
  }

  export type PlatbaCreateManyInput = {
    id?: number
    castka: number
    datum: Date | string
    najemnikId: number
  }

  export type PlatbaUpdateManyMutationInput = {
    castka?: FloatFieldUpdateOperationsInput | number
    datum?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PlatbaUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    castka?: FloatFieldUpdateOperationsInput | number
    datum?: DateTimeFieldUpdateOperationsInput | Date | string
    najemnikId?: IntFieldUpdateOperationsInput | number
  }

  export type UkolCreateInput = {
    popis: string
    datum?: Date | string
    status?: string
    najemnik: NajemnikCreateNestedOneWithoutUkolyInput
  }

  export type UkolUncheckedCreateInput = {
    id?: number
    popis: string
    datum?: Date | string
    status?: string
    najemnikId: number
  }

  export type UkolUpdateInput = {
    popis?: StringFieldUpdateOperationsInput | string
    datum?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    najemnik?: NajemnikUpdateOneRequiredWithoutUkolyNestedInput
  }

  export type UkolUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    popis?: StringFieldUpdateOperationsInput | string
    datum?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    najemnikId?: IntFieldUpdateOperationsInput | number
  }

  export type UkolCreateManyInput = {
    id?: number
    popis: string
    datum?: Date | string
    status?: string
    najemnikId: number
  }

  export type UkolUpdateManyMutationInput = {
    popis?: StringFieldUpdateOperationsInput | string
    datum?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
  }

  export type UkolUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    popis?: StringFieldUpdateOperationsInput | string
    datum?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    najemnikId?: IntFieldUpdateOperationsInput | number
  }

  export type MeridloCreateInput = {
    typ: string
    hodnota: number
    datum?: Date | string
    najemnik: NajemnikCreateNestedOneWithoutMeridlaInput
  }

  export type MeridloUncheckedCreateInput = {
    id?: number
    typ: string
    hodnota: number
    datum?: Date | string
    najemnikId: number
  }

  export type MeridloUpdateInput = {
    typ?: StringFieldUpdateOperationsInput | string
    hodnota?: FloatFieldUpdateOperationsInput | number
    datum?: DateTimeFieldUpdateOperationsInput | Date | string
    najemnik?: NajemnikUpdateOneRequiredWithoutMeridlaNestedInput
  }

  export type MeridloUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    typ?: StringFieldUpdateOperationsInput | string
    hodnota?: FloatFieldUpdateOperationsInput | number
    datum?: DateTimeFieldUpdateOperationsInput | Date | string
    najemnikId?: IntFieldUpdateOperationsInput | number
  }

  export type MeridloCreateManyInput = {
    id?: number
    typ: string
    hodnota: number
    datum?: Date | string
    najemnikId: number
  }

  export type MeridloUpdateManyMutationInput = {
    typ?: StringFieldUpdateOperationsInput | string
    hodnota?: FloatFieldUpdateOperationsInput | number
    datum?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MeridloUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    typ?: StringFieldUpdateOperationsInput | string
    hodnota?: FloatFieldUpdateOperationsInput | number
    datum?: DateTimeFieldUpdateOperationsInput | Date | string
    najemnikId?: IntFieldUpdateOperationsInput | number
  }

  export type UserCreateInput = {
    email: string
    password: string
    role: string
    isActive?: boolean
    apartments?: ApartmentCreateNestedManyWithoutOwnerInput
  }

  export type UserUncheckedCreateInput = {
    id?: number
    email: string
    password: string
    role: string
    isActive?: boolean
    apartments?: ApartmentUncheckedCreateNestedManyWithoutOwnerInput
  }

  export type UserUpdateInput = {
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    apartments?: ApartmentUpdateManyWithoutOwnerNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    apartments?: ApartmentUncheckedUpdateManyWithoutOwnerNestedInput
  }

  export type UserCreateManyInput = {
    id?: number
    email: string
    password: string
    role: string
    isActive?: boolean
  }

  export type UserUpdateManyMutationInput = {
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
  }

  export type UserUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
  }

  export type ApartmentCreateInput = {
    address: string
    city: string
    postalCode: string
    purchasePrice?: number | null
    currentValue?: number | null
    purchaseDate?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    insuranceAnnualPrice?: number | null
    insuranceNumber?: string | null
    insuranceNote?: string | null
    ownershipType?: string | null
    buildingType?: string | null
    buildingConstruction?: string | null
    heatingType?: string | null
    area?: number | null
    eicCode?: string | null
    eanCode?: string | null
    floorNumber?: number | null
    totalFloorsAbove?: number | null
    totalFloorsBelow?: number | null
    hasElevator?: boolean | null
    hasBalcony?: boolean | null
    hasLoggia?: boolean | null
    hasTerrace?: boolean | null
    hasStorage?: boolean | null
    technicalNote?: string | null
    parent?: ApartmentCreateNestedOneWithoutChildrenInput
    children?: ApartmentCreateNestedManyWithoutParentInput
    owner: UserCreateNestedOneWithoutApartmentsInput
    tenants?: TenantCreateNestedManyWithoutApartmentInput
  }

  export type ApartmentUncheckedCreateInput = {
    id?: number
    address: string
    city: string
    postalCode: string
    purchasePrice?: number | null
    currentValue?: number | null
    purchaseDate?: Date | string | null
    parentId?: number | null
    ownerId: number
    createdAt?: Date | string
    updatedAt?: Date | string
    insuranceAnnualPrice?: number | null
    insuranceNumber?: string | null
    insuranceNote?: string | null
    ownershipType?: string | null
    buildingType?: string | null
    buildingConstruction?: string | null
    heatingType?: string | null
    area?: number | null
    eicCode?: string | null
    eanCode?: string | null
    floorNumber?: number | null
    totalFloorsAbove?: number | null
    totalFloorsBelow?: number | null
    hasElevator?: boolean | null
    hasBalcony?: boolean | null
    hasLoggia?: boolean | null
    hasTerrace?: boolean | null
    hasStorage?: boolean | null
    technicalNote?: string | null
    children?: ApartmentUncheckedCreateNestedManyWithoutParentInput
    tenants?: TenantUncheckedCreateNestedManyWithoutApartmentInput
  }

  export type ApartmentUpdateInput = {
    address?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    postalCode?: StringFieldUpdateOperationsInput | string
    purchasePrice?: NullableFloatFieldUpdateOperationsInput | number | null
    currentValue?: NullableFloatFieldUpdateOperationsInput | number | null
    purchaseDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    insuranceAnnualPrice?: NullableFloatFieldUpdateOperationsInput | number | null
    insuranceNumber?: NullableStringFieldUpdateOperationsInput | string | null
    insuranceNote?: NullableStringFieldUpdateOperationsInput | string | null
    ownershipType?: NullableStringFieldUpdateOperationsInput | string | null
    buildingType?: NullableStringFieldUpdateOperationsInput | string | null
    buildingConstruction?: NullableStringFieldUpdateOperationsInput | string | null
    heatingType?: NullableStringFieldUpdateOperationsInput | string | null
    area?: NullableFloatFieldUpdateOperationsInput | number | null
    eicCode?: NullableStringFieldUpdateOperationsInput | string | null
    eanCode?: NullableStringFieldUpdateOperationsInput | string | null
    floorNumber?: NullableIntFieldUpdateOperationsInput | number | null
    totalFloorsAbove?: NullableIntFieldUpdateOperationsInput | number | null
    totalFloorsBelow?: NullableIntFieldUpdateOperationsInput | number | null
    hasElevator?: NullableBoolFieldUpdateOperationsInput | boolean | null
    hasBalcony?: NullableBoolFieldUpdateOperationsInput | boolean | null
    hasLoggia?: NullableBoolFieldUpdateOperationsInput | boolean | null
    hasTerrace?: NullableBoolFieldUpdateOperationsInput | boolean | null
    hasStorage?: NullableBoolFieldUpdateOperationsInput | boolean | null
    technicalNote?: NullableStringFieldUpdateOperationsInput | string | null
    parent?: ApartmentUpdateOneWithoutChildrenNestedInput
    children?: ApartmentUpdateManyWithoutParentNestedInput
    owner?: UserUpdateOneRequiredWithoutApartmentsNestedInput
    tenants?: TenantUpdateManyWithoutApartmentNestedInput
  }

  export type ApartmentUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    address?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    postalCode?: StringFieldUpdateOperationsInput | string
    purchasePrice?: NullableFloatFieldUpdateOperationsInput | number | null
    currentValue?: NullableFloatFieldUpdateOperationsInput | number | null
    purchaseDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    parentId?: NullableIntFieldUpdateOperationsInput | number | null
    ownerId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    insuranceAnnualPrice?: NullableFloatFieldUpdateOperationsInput | number | null
    insuranceNumber?: NullableStringFieldUpdateOperationsInput | string | null
    insuranceNote?: NullableStringFieldUpdateOperationsInput | string | null
    ownershipType?: NullableStringFieldUpdateOperationsInput | string | null
    buildingType?: NullableStringFieldUpdateOperationsInput | string | null
    buildingConstruction?: NullableStringFieldUpdateOperationsInput | string | null
    heatingType?: NullableStringFieldUpdateOperationsInput | string | null
    area?: NullableFloatFieldUpdateOperationsInput | number | null
    eicCode?: NullableStringFieldUpdateOperationsInput | string | null
    eanCode?: NullableStringFieldUpdateOperationsInput | string | null
    floorNumber?: NullableIntFieldUpdateOperationsInput | number | null
    totalFloorsAbove?: NullableIntFieldUpdateOperationsInput | number | null
    totalFloorsBelow?: NullableIntFieldUpdateOperationsInput | number | null
    hasElevator?: NullableBoolFieldUpdateOperationsInput | boolean | null
    hasBalcony?: NullableBoolFieldUpdateOperationsInput | boolean | null
    hasLoggia?: NullableBoolFieldUpdateOperationsInput | boolean | null
    hasTerrace?: NullableBoolFieldUpdateOperationsInput | boolean | null
    hasStorage?: NullableBoolFieldUpdateOperationsInput | boolean | null
    technicalNote?: NullableStringFieldUpdateOperationsInput | string | null
    children?: ApartmentUncheckedUpdateManyWithoutParentNestedInput
    tenants?: TenantUncheckedUpdateManyWithoutApartmentNestedInput
  }

  export type ApartmentCreateManyInput = {
    id?: number
    address: string
    city: string
    postalCode: string
    purchasePrice?: number | null
    currentValue?: number | null
    purchaseDate?: Date | string | null
    parentId?: number | null
    ownerId: number
    createdAt?: Date | string
    updatedAt?: Date | string
    insuranceAnnualPrice?: number | null
    insuranceNumber?: string | null
    insuranceNote?: string | null
    ownershipType?: string | null
    buildingType?: string | null
    buildingConstruction?: string | null
    heatingType?: string | null
    area?: number | null
    eicCode?: string | null
    eanCode?: string | null
    floorNumber?: number | null
    totalFloorsAbove?: number | null
    totalFloorsBelow?: number | null
    hasElevator?: boolean | null
    hasBalcony?: boolean | null
    hasLoggia?: boolean | null
    hasTerrace?: boolean | null
    hasStorage?: boolean | null
    technicalNote?: string | null
  }

  export type ApartmentUpdateManyMutationInput = {
    address?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    postalCode?: StringFieldUpdateOperationsInput | string
    purchasePrice?: NullableFloatFieldUpdateOperationsInput | number | null
    currentValue?: NullableFloatFieldUpdateOperationsInput | number | null
    purchaseDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    insuranceAnnualPrice?: NullableFloatFieldUpdateOperationsInput | number | null
    insuranceNumber?: NullableStringFieldUpdateOperationsInput | string | null
    insuranceNote?: NullableStringFieldUpdateOperationsInput | string | null
    ownershipType?: NullableStringFieldUpdateOperationsInput | string | null
    buildingType?: NullableStringFieldUpdateOperationsInput | string | null
    buildingConstruction?: NullableStringFieldUpdateOperationsInput | string | null
    heatingType?: NullableStringFieldUpdateOperationsInput | string | null
    area?: NullableFloatFieldUpdateOperationsInput | number | null
    eicCode?: NullableStringFieldUpdateOperationsInput | string | null
    eanCode?: NullableStringFieldUpdateOperationsInput | string | null
    floorNumber?: NullableIntFieldUpdateOperationsInput | number | null
    totalFloorsAbove?: NullableIntFieldUpdateOperationsInput | number | null
    totalFloorsBelow?: NullableIntFieldUpdateOperationsInput | number | null
    hasElevator?: NullableBoolFieldUpdateOperationsInput | boolean | null
    hasBalcony?: NullableBoolFieldUpdateOperationsInput | boolean | null
    hasLoggia?: NullableBoolFieldUpdateOperationsInput | boolean | null
    hasTerrace?: NullableBoolFieldUpdateOperationsInput | boolean | null
    hasStorage?: NullableBoolFieldUpdateOperationsInput | boolean | null
    technicalNote?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ApartmentUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    address?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    postalCode?: StringFieldUpdateOperationsInput | string
    purchasePrice?: NullableFloatFieldUpdateOperationsInput | number | null
    currentValue?: NullableFloatFieldUpdateOperationsInput | number | null
    purchaseDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    parentId?: NullableIntFieldUpdateOperationsInput | number | null
    ownerId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    insuranceAnnualPrice?: NullableFloatFieldUpdateOperationsInput | number | null
    insuranceNumber?: NullableStringFieldUpdateOperationsInput | string | null
    insuranceNote?: NullableStringFieldUpdateOperationsInput | string | null
    ownershipType?: NullableStringFieldUpdateOperationsInput | string | null
    buildingType?: NullableStringFieldUpdateOperationsInput | string | null
    buildingConstruction?: NullableStringFieldUpdateOperationsInput | string | null
    heatingType?: NullableStringFieldUpdateOperationsInput | string | null
    area?: NullableFloatFieldUpdateOperationsInput | number | null
    eicCode?: NullableStringFieldUpdateOperationsInput | string | null
    eanCode?: NullableStringFieldUpdateOperationsInput | string | null
    floorNumber?: NullableIntFieldUpdateOperationsInput | number | null
    totalFloorsAbove?: NullableIntFieldUpdateOperationsInput | number | null
    totalFloorsBelow?: NullableIntFieldUpdateOperationsInput | number | null
    hasElevator?: NullableBoolFieldUpdateOperationsInput | boolean | null
    hasBalcony?: NullableBoolFieldUpdateOperationsInput | boolean | null
    hasLoggia?: NullableBoolFieldUpdateOperationsInput | boolean | null
    hasTerrace?: NullableBoolFieldUpdateOperationsInput | boolean | null
    hasStorage?: NullableBoolFieldUpdateOperationsInput | boolean | null
    technicalNote?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type TenantCreateInput = {
    name: string
    phone?: string | null
    apartment?: ApartmentCreateNestedOneWithoutTenantsInput
  }

  export type TenantUncheckedCreateInput = {
    id?: number
    name: string
    phone?: string | null
    apartmentId?: number | null
  }

  export type TenantUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    apartment?: ApartmentUpdateOneWithoutTenantsNestedInput
  }

  export type TenantUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    apartmentId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type TenantCreateManyInput = {
    id?: number
    name: string
    phone?: string | null
    apartmentId?: number | null
  }

  export type TenantUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type TenantUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    apartmentId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NajemnikListRelationFilter = {
    every?: NajemnikWhereInput
    some?: NajemnikWhereInput
    none?: NajemnikWhereInput
  }

  export type NajemnikOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type NemovitostCountOrderByAggregateInput = {
    id?: SortOrder
    nazev?: SortOrder
    adresa?: SortOrder
  }

  export type NemovitostAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type NemovitostMaxOrderByAggregateInput = {
    id?: SortOrder
    nazev?: SortOrder
    adresa?: SortOrder
  }

  export type NemovitostMinOrderByAggregateInput = {
    id?: SortOrder
    nazev?: SortOrder
    adresa?: SortOrder
  }

  export type NemovitostSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type FloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NemovitostRelationFilter = {
    is?: NemovitostWhereInput
    isNot?: NemovitostWhereInput
  }

  export type PlatbaListRelationFilter = {
    every?: PlatbaWhereInput
    some?: PlatbaWhereInput
    none?: PlatbaWhereInput
  }

  export type MeridloListRelationFilter = {
    every?: MeridloWhereInput
    some?: MeridloWhereInput
    none?: MeridloWhereInput
  }

  export type UkolListRelationFilter = {
    every?: UkolWhereInput
    some?: UkolWhereInput
    none?: UkolWhereInput
  }

  export type PlatbaOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type MeridloOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UkolOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type NajemnikCountOrderByAggregateInput = {
    id?: SortOrder
    jmeno?: SortOrder
    email?: SortOrder
    nemovitostId?: SortOrder
    mesicniNajem?: SortOrder
  }

  export type NajemnikAvgOrderByAggregateInput = {
    id?: SortOrder
    nemovitostId?: SortOrder
    mesicniNajem?: SortOrder
  }

  export type NajemnikMaxOrderByAggregateInput = {
    id?: SortOrder
    jmeno?: SortOrder
    email?: SortOrder
    nemovitostId?: SortOrder
    mesicniNajem?: SortOrder
  }

  export type NajemnikMinOrderByAggregateInput = {
    id?: SortOrder
    jmeno?: SortOrder
    email?: SortOrder
    nemovitostId?: SortOrder
    mesicniNajem?: SortOrder
  }

  export type NajemnikSumOrderByAggregateInput = {
    id?: SortOrder
    nemovitostId?: SortOrder
    mesicniNajem?: SortOrder
  }

  export type FloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NajemnikRelationFilter = {
    is?: NajemnikWhereInput
    isNot?: NajemnikWhereInput
  }

  export type PlatbaCountOrderByAggregateInput = {
    id?: SortOrder
    castka?: SortOrder
    datum?: SortOrder
    najemnikId?: SortOrder
  }

  export type PlatbaAvgOrderByAggregateInput = {
    id?: SortOrder
    castka?: SortOrder
    najemnikId?: SortOrder
  }

  export type PlatbaMaxOrderByAggregateInput = {
    id?: SortOrder
    castka?: SortOrder
    datum?: SortOrder
    najemnikId?: SortOrder
  }

  export type PlatbaMinOrderByAggregateInput = {
    id?: SortOrder
    castka?: SortOrder
    datum?: SortOrder
    najemnikId?: SortOrder
  }

  export type PlatbaSumOrderByAggregateInput = {
    id?: SortOrder
    castka?: SortOrder
    najemnikId?: SortOrder
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type UkolCountOrderByAggregateInput = {
    id?: SortOrder
    popis?: SortOrder
    datum?: SortOrder
    status?: SortOrder
    najemnikId?: SortOrder
  }

  export type UkolAvgOrderByAggregateInput = {
    id?: SortOrder
    najemnikId?: SortOrder
  }

  export type UkolMaxOrderByAggregateInput = {
    id?: SortOrder
    popis?: SortOrder
    datum?: SortOrder
    status?: SortOrder
    najemnikId?: SortOrder
  }

  export type UkolMinOrderByAggregateInput = {
    id?: SortOrder
    popis?: SortOrder
    datum?: SortOrder
    status?: SortOrder
    najemnikId?: SortOrder
  }

  export type UkolSumOrderByAggregateInput = {
    id?: SortOrder
    najemnikId?: SortOrder
  }

  export type MeridloCountOrderByAggregateInput = {
    id?: SortOrder
    typ?: SortOrder
    hodnota?: SortOrder
    datum?: SortOrder
    najemnikId?: SortOrder
  }

  export type MeridloAvgOrderByAggregateInput = {
    id?: SortOrder
    hodnota?: SortOrder
    najemnikId?: SortOrder
  }

  export type MeridloMaxOrderByAggregateInput = {
    id?: SortOrder
    typ?: SortOrder
    hodnota?: SortOrder
    datum?: SortOrder
    najemnikId?: SortOrder
  }

  export type MeridloMinOrderByAggregateInput = {
    id?: SortOrder
    typ?: SortOrder
    hodnota?: SortOrder
    datum?: SortOrder
    najemnikId?: SortOrder
  }

  export type MeridloSumOrderByAggregateInput = {
    id?: SortOrder
    hodnota?: SortOrder
    najemnikId?: SortOrder
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type ApartmentListRelationFilter = {
    every?: ApartmentWhereInput
    some?: ApartmentWhereInput
    none?: ApartmentWhereInput
  }

  export type ApartmentOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    role?: SortOrder
    isActive?: SortOrder
  }

  export type UserAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    role?: SortOrder
    isActive?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    role?: SortOrder
    isActive?: SortOrder
  }

  export type UserSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type FloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type BoolNullableFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel> | null
    not?: NestedBoolNullableFilter<$PrismaModel> | boolean | null
  }

  export type ApartmentNullableRelationFilter = {
    is?: ApartmentWhereInput | null
    isNot?: ApartmentWhereInput | null
  }

  export type UserRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type TenantListRelationFilter = {
    every?: TenantWhereInput
    some?: TenantWhereInput
    none?: TenantWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type TenantOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ApartmentCountOrderByAggregateInput = {
    id?: SortOrder
    address?: SortOrder
    city?: SortOrder
    postalCode?: SortOrder
    purchasePrice?: SortOrder
    currentValue?: SortOrder
    purchaseDate?: SortOrder
    parentId?: SortOrder
    ownerId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    insuranceAnnualPrice?: SortOrder
    insuranceNumber?: SortOrder
    insuranceNote?: SortOrder
    ownershipType?: SortOrder
    buildingType?: SortOrder
    buildingConstruction?: SortOrder
    heatingType?: SortOrder
    area?: SortOrder
    eicCode?: SortOrder
    eanCode?: SortOrder
    floorNumber?: SortOrder
    totalFloorsAbove?: SortOrder
    totalFloorsBelow?: SortOrder
    hasElevator?: SortOrder
    hasBalcony?: SortOrder
    hasLoggia?: SortOrder
    hasTerrace?: SortOrder
    hasStorage?: SortOrder
    technicalNote?: SortOrder
  }

  export type ApartmentAvgOrderByAggregateInput = {
    id?: SortOrder
    purchasePrice?: SortOrder
    currentValue?: SortOrder
    parentId?: SortOrder
    ownerId?: SortOrder
    insuranceAnnualPrice?: SortOrder
    area?: SortOrder
    floorNumber?: SortOrder
    totalFloorsAbove?: SortOrder
    totalFloorsBelow?: SortOrder
  }

  export type ApartmentMaxOrderByAggregateInput = {
    id?: SortOrder
    address?: SortOrder
    city?: SortOrder
    postalCode?: SortOrder
    purchasePrice?: SortOrder
    currentValue?: SortOrder
    purchaseDate?: SortOrder
    parentId?: SortOrder
    ownerId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    insuranceAnnualPrice?: SortOrder
    insuranceNumber?: SortOrder
    insuranceNote?: SortOrder
    ownershipType?: SortOrder
    buildingType?: SortOrder
    buildingConstruction?: SortOrder
    heatingType?: SortOrder
    area?: SortOrder
    eicCode?: SortOrder
    eanCode?: SortOrder
    floorNumber?: SortOrder
    totalFloorsAbove?: SortOrder
    totalFloorsBelow?: SortOrder
    hasElevator?: SortOrder
    hasBalcony?: SortOrder
    hasLoggia?: SortOrder
    hasTerrace?: SortOrder
    hasStorage?: SortOrder
    technicalNote?: SortOrder
  }

  export type ApartmentMinOrderByAggregateInput = {
    id?: SortOrder
    address?: SortOrder
    city?: SortOrder
    postalCode?: SortOrder
    purchasePrice?: SortOrder
    currentValue?: SortOrder
    purchaseDate?: SortOrder
    parentId?: SortOrder
    ownerId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    insuranceAnnualPrice?: SortOrder
    insuranceNumber?: SortOrder
    insuranceNote?: SortOrder
    ownershipType?: SortOrder
    buildingType?: SortOrder
    buildingConstruction?: SortOrder
    heatingType?: SortOrder
    area?: SortOrder
    eicCode?: SortOrder
    eanCode?: SortOrder
    floorNumber?: SortOrder
    totalFloorsAbove?: SortOrder
    totalFloorsBelow?: SortOrder
    hasElevator?: SortOrder
    hasBalcony?: SortOrder
    hasLoggia?: SortOrder
    hasTerrace?: SortOrder
    hasStorage?: SortOrder
    technicalNote?: SortOrder
  }

  export type ApartmentSumOrderByAggregateInput = {
    id?: SortOrder
    purchasePrice?: SortOrder
    currentValue?: SortOrder
    parentId?: SortOrder
    ownerId?: SortOrder
    insuranceAnnualPrice?: SortOrder
    area?: SortOrder
    floorNumber?: SortOrder
    totalFloorsAbove?: SortOrder
    totalFloorsBelow?: SortOrder
  }

  export type FloatNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedFloatNullableFilter<$PrismaModel>
    _min?: NestedFloatNullableFilter<$PrismaModel>
    _max?: NestedFloatNullableFilter<$PrismaModel>
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type BoolNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel> | null
    not?: NestedBoolNullableWithAggregatesFilter<$PrismaModel> | boolean | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedBoolNullableFilter<$PrismaModel>
    _max?: NestedBoolNullableFilter<$PrismaModel>
  }

  export type TenantCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    phone?: SortOrder
    apartmentId?: SortOrder
  }

  export type TenantAvgOrderByAggregateInput = {
    id?: SortOrder
    apartmentId?: SortOrder
  }

  export type TenantMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    phone?: SortOrder
    apartmentId?: SortOrder
  }

  export type TenantMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    phone?: SortOrder
    apartmentId?: SortOrder
  }

  export type TenantSumOrderByAggregateInput = {
    id?: SortOrder
    apartmentId?: SortOrder
  }

  export type NajemnikCreateNestedManyWithoutNemovitostInput = {
    create?: XOR<NajemnikCreateWithoutNemovitostInput, NajemnikUncheckedCreateWithoutNemovitostInput> | NajemnikCreateWithoutNemovitostInput[] | NajemnikUncheckedCreateWithoutNemovitostInput[]
    connectOrCreate?: NajemnikCreateOrConnectWithoutNemovitostInput | NajemnikCreateOrConnectWithoutNemovitostInput[]
    createMany?: NajemnikCreateManyNemovitostInputEnvelope
    connect?: NajemnikWhereUniqueInput | NajemnikWhereUniqueInput[]
  }

  export type NajemnikUncheckedCreateNestedManyWithoutNemovitostInput = {
    create?: XOR<NajemnikCreateWithoutNemovitostInput, NajemnikUncheckedCreateWithoutNemovitostInput> | NajemnikCreateWithoutNemovitostInput[] | NajemnikUncheckedCreateWithoutNemovitostInput[]
    connectOrCreate?: NajemnikCreateOrConnectWithoutNemovitostInput | NajemnikCreateOrConnectWithoutNemovitostInput[]
    createMany?: NajemnikCreateManyNemovitostInputEnvelope
    connect?: NajemnikWhereUniqueInput | NajemnikWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type NajemnikUpdateManyWithoutNemovitostNestedInput = {
    create?: XOR<NajemnikCreateWithoutNemovitostInput, NajemnikUncheckedCreateWithoutNemovitostInput> | NajemnikCreateWithoutNemovitostInput[] | NajemnikUncheckedCreateWithoutNemovitostInput[]
    connectOrCreate?: NajemnikCreateOrConnectWithoutNemovitostInput | NajemnikCreateOrConnectWithoutNemovitostInput[]
    upsert?: NajemnikUpsertWithWhereUniqueWithoutNemovitostInput | NajemnikUpsertWithWhereUniqueWithoutNemovitostInput[]
    createMany?: NajemnikCreateManyNemovitostInputEnvelope
    set?: NajemnikWhereUniqueInput | NajemnikWhereUniqueInput[]
    disconnect?: NajemnikWhereUniqueInput | NajemnikWhereUniqueInput[]
    delete?: NajemnikWhereUniqueInput | NajemnikWhereUniqueInput[]
    connect?: NajemnikWhereUniqueInput | NajemnikWhereUniqueInput[]
    update?: NajemnikUpdateWithWhereUniqueWithoutNemovitostInput | NajemnikUpdateWithWhereUniqueWithoutNemovitostInput[]
    updateMany?: NajemnikUpdateManyWithWhereWithoutNemovitostInput | NajemnikUpdateManyWithWhereWithoutNemovitostInput[]
    deleteMany?: NajemnikScalarWhereInput | NajemnikScalarWhereInput[]
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type NajemnikUncheckedUpdateManyWithoutNemovitostNestedInput = {
    create?: XOR<NajemnikCreateWithoutNemovitostInput, NajemnikUncheckedCreateWithoutNemovitostInput> | NajemnikCreateWithoutNemovitostInput[] | NajemnikUncheckedCreateWithoutNemovitostInput[]
    connectOrCreate?: NajemnikCreateOrConnectWithoutNemovitostInput | NajemnikCreateOrConnectWithoutNemovitostInput[]
    upsert?: NajemnikUpsertWithWhereUniqueWithoutNemovitostInput | NajemnikUpsertWithWhereUniqueWithoutNemovitostInput[]
    createMany?: NajemnikCreateManyNemovitostInputEnvelope
    set?: NajemnikWhereUniqueInput | NajemnikWhereUniqueInput[]
    disconnect?: NajemnikWhereUniqueInput | NajemnikWhereUniqueInput[]
    delete?: NajemnikWhereUniqueInput | NajemnikWhereUniqueInput[]
    connect?: NajemnikWhereUniqueInput | NajemnikWhereUniqueInput[]
    update?: NajemnikUpdateWithWhereUniqueWithoutNemovitostInput | NajemnikUpdateWithWhereUniqueWithoutNemovitostInput[]
    updateMany?: NajemnikUpdateManyWithWhereWithoutNemovitostInput | NajemnikUpdateManyWithWhereWithoutNemovitostInput[]
    deleteMany?: NajemnikScalarWhereInput | NajemnikScalarWhereInput[]
  }

  export type NemovitostCreateNestedOneWithoutNajemniciInput = {
    create?: XOR<NemovitostCreateWithoutNajemniciInput, NemovitostUncheckedCreateWithoutNajemniciInput>
    connectOrCreate?: NemovitostCreateOrConnectWithoutNajemniciInput
    connect?: NemovitostWhereUniqueInput
  }

  export type PlatbaCreateNestedManyWithoutNajemnikInput = {
    create?: XOR<PlatbaCreateWithoutNajemnikInput, PlatbaUncheckedCreateWithoutNajemnikInput> | PlatbaCreateWithoutNajemnikInput[] | PlatbaUncheckedCreateWithoutNajemnikInput[]
    connectOrCreate?: PlatbaCreateOrConnectWithoutNajemnikInput | PlatbaCreateOrConnectWithoutNajemnikInput[]
    createMany?: PlatbaCreateManyNajemnikInputEnvelope
    connect?: PlatbaWhereUniqueInput | PlatbaWhereUniqueInput[]
  }

  export type MeridloCreateNestedManyWithoutNajemnikInput = {
    create?: XOR<MeridloCreateWithoutNajemnikInput, MeridloUncheckedCreateWithoutNajemnikInput> | MeridloCreateWithoutNajemnikInput[] | MeridloUncheckedCreateWithoutNajemnikInput[]
    connectOrCreate?: MeridloCreateOrConnectWithoutNajemnikInput | MeridloCreateOrConnectWithoutNajemnikInput[]
    createMany?: MeridloCreateManyNajemnikInputEnvelope
    connect?: MeridloWhereUniqueInput | MeridloWhereUniqueInput[]
  }

  export type UkolCreateNestedManyWithoutNajemnikInput = {
    create?: XOR<UkolCreateWithoutNajemnikInput, UkolUncheckedCreateWithoutNajemnikInput> | UkolCreateWithoutNajemnikInput[] | UkolUncheckedCreateWithoutNajemnikInput[]
    connectOrCreate?: UkolCreateOrConnectWithoutNajemnikInput | UkolCreateOrConnectWithoutNajemnikInput[]
    createMany?: UkolCreateManyNajemnikInputEnvelope
    connect?: UkolWhereUniqueInput | UkolWhereUniqueInput[]
  }

  export type PlatbaUncheckedCreateNestedManyWithoutNajemnikInput = {
    create?: XOR<PlatbaCreateWithoutNajemnikInput, PlatbaUncheckedCreateWithoutNajemnikInput> | PlatbaCreateWithoutNajemnikInput[] | PlatbaUncheckedCreateWithoutNajemnikInput[]
    connectOrCreate?: PlatbaCreateOrConnectWithoutNajemnikInput | PlatbaCreateOrConnectWithoutNajemnikInput[]
    createMany?: PlatbaCreateManyNajemnikInputEnvelope
    connect?: PlatbaWhereUniqueInput | PlatbaWhereUniqueInput[]
  }

  export type MeridloUncheckedCreateNestedManyWithoutNajemnikInput = {
    create?: XOR<MeridloCreateWithoutNajemnikInput, MeridloUncheckedCreateWithoutNajemnikInput> | MeridloCreateWithoutNajemnikInput[] | MeridloUncheckedCreateWithoutNajemnikInput[]
    connectOrCreate?: MeridloCreateOrConnectWithoutNajemnikInput | MeridloCreateOrConnectWithoutNajemnikInput[]
    createMany?: MeridloCreateManyNajemnikInputEnvelope
    connect?: MeridloWhereUniqueInput | MeridloWhereUniqueInput[]
  }

  export type UkolUncheckedCreateNestedManyWithoutNajemnikInput = {
    create?: XOR<UkolCreateWithoutNajemnikInput, UkolUncheckedCreateWithoutNajemnikInput> | UkolCreateWithoutNajemnikInput[] | UkolUncheckedCreateWithoutNajemnikInput[]
    connectOrCreate?: UkolCreateOrConnectWithoutNajemnikInput | UkolCreateOrConnectWithoutNajemnikInput[]
    createMany?: UkolCreateManyNajemnikInputEnvelope
    connect?: UkolWhereUniqueInput | UkolWhereUniqueInput[]
  }

  export type FloatFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type NemovitostUpdateOneRequiredWithoutNajemniciNestedInput = {
    create?: XOR<NemovitostCreateWithoutNajemniciInput, NemovitostUncheckedCreateWithoutNajemniciInput>
    connectOrCreate?: NemovitostCreateOrConnectWithoutNajemniciInput
    upsert?: NemovitostUpsertWithoutNajemniciInput
    connect?: NemovitostWhereUniqueInput
    update?: XOR<XOR<NemovitostUpdateToOneWithWhereWithoutNajemniciInput, NemovitostUpdateWithoutNajemniciInput>, NemovitostUncheckedUpdateWithoutNajemniciInput>
  }

  export type PlatbaUpdateManyWithoutNajemnikNestedInput = {
    create?: XOR<PlatbaCreateWithoutNajemnikInput, PlatbaUncheckedCreateWithoutNajemnikInput> | PlatbaCreateWithoutNajemnikInput[] | PlatbaUncheckedCreateWithoutNajemnikInput[]
    connectOrCreate?: PlatbaCreateOrConnectWithoutNajemnikInput | PlatbaCreateOrConnectWithoutNajemnikInput[]
    upsert?: PlatbaUpsertWithWhereUniqueWithoutNajemnikInput | PlatbaUpsertWithWhereUniqueWithoutNajemnikInput[]
    createMany?: PlatbaCreateManyNajemnikInputEnvelope
    set?: PlatbaWhereUniqueInput | PlatbaWhereUniqueInput[]
    disconnect?: PlatbaWhereUniqueInput | PlatbaWhereUniqueInput[]
    delete?: PlatbaWhereUniqueInput | PlatbaWhereUniqueInput[]
    connect?: PlatbaWhereUniqueInput | PlatbaWhereUniqueInput[]
    update?: PlatbaUpdateWithWhereUniqueWithoutNajemnikInput | PlatbaUpdateWithWhereUniqueWithoutNajemnikInput[]
    updateMany?: PlatbaUpdateManyWithWhereWithoutNajemnikInput | PlatbaUpdateManyWithWhereWithoutNajemnikInput[]
    deleteMany?: PlatbaScalarWhereInput | PlatbaScalarWhereInput[]
  }

  export type MeridloUpdateManyWithoutNajemnikNestedInput = {
    create?: XOR<MeridloCreateWithoutNajemnikInput, MeridloUncheckedCreateWithoutNajemnikInput> | MeridloCreateWithoutNajemnikInput[] | MeridloUncheckedCreateWithoutNajemnikInput[]
    connectOrCreate?: MeridloCreateOrConnectWithoutNajemnikInput | MeridloCreateOrConnectWithoutNajemnikInput[]
    upsert?: MeridloUpsertWithWhereUniqueWithoutNajemnikInput | MeridloUpsertWithWhereUniqueWithoutNajemnikInput[]
    createMany?: MeridloCreateManyNajemnikInputEnvelope
    set?: MeridloWhereUniqueInput | MeridloWhereUniqueInput[]
    disconnect?: MeridloWhereUniqueInput | MeridloWhereUniqueInput[]
    delete?: MeridloWhereUniqueInput | MeridloWhereUniqueInput[]
    connect?: MeridloWhereUniqueInput | MeridloWhereUniqueInput[]
    update?: MeridloUpdateWithWhereUniqueWithoutNajemnikInput | MeridloUpdateWithWhereUniqueWithoutNajemnikInput[]
    updateMany?: MeridloUpdateManyWithWhereWithoutNajemnikInput | MeridloUpdateManyWithWhereWithoutNajemnikInput[]
    deleteMany?: MeridloScalarWhereInput | MeridloScalarWhereInput[]
  }

  export type UkolUpdateManyWithoutNajemnikNestedInput = {
    create?: XOR<UkolCreateWithoutNajemnikInput, UkolUncheckedCreateWithoutNajemnikInput> | UkolCreateWithoutNajemnikInput[] | UkolUncheckedCreateWithoutNajemnikInput[]
    connectOrCreate?: UkolCreateOrConnectWithoutNajemnikInput | UkolCreateOrConnectWithoutNajemnikInput[]
    upsert?: UkolUpsertWithWhereUniqueWithoutNajemnikInput | UkolUpsertWithWhereUniqueWithoutNajemnikInput[]
    createMany?: UkolCreateManyNajemnikInputEnvelope
    set?: UkolWhereUniqueInput | UkolWhereUniqueInput[]
    disconnect?: UkolWhereUniqueInput | UkolWhereUniqueInput[]
    delete?: UkolWhereUniqueInput | UkolWhereUniqueInput[]
    connect?: UkolWhereUniqueInput | UkolWhereUniqueInput[]
    update?: UkolUpdateWithWhereUniqueWithoutNajemnikInput | UkolUpdateWithWhereUniqueWithoutNajemnikInput[]
    updateMany?: UkolUpdateManyWithWhereWithoutNajemnikInput | UkolUpdateManyWithWhereWithoutNajemnikInput[]
    deleteMany?: UkolScalarWhereInput | UkolScalarWhereInput[]
  }

  export type PlatbaUncheckedUpdateManyWithoutNajemnikNestedInput = {
    create?: XOR<PlatbaCreateWithoutNajemnikInput, PlatbaUncheckedCreateWithoutNajemnikInput> | PlatbaCreateWithoutNajemnikInput[] | PlatbaUncheckedCreateWithoutNajemnikInput[]
    connectOrCreate?: PlatbaCreateOrConnectWithoutNajemnikInput | PlatbaCreateOrConnectWithoutNajemnikInput[]
    upsert?: PlatbaUpsertWithWhereUniqueWithoutNajemnikInput | PlatbaUpsertWithWhereUniqueWithoutNajemnikInput[]
    createMany?: PlatbaCreateManyNajemnikInputEnvelope
    set?: PlatbaWhereUniqueInput | PlatbaWhereUniqueInput[]
    disconnect?: PlatbaWhereUniqueInput | PlatbaWhereUniqueInput[]
    delete?: PlatbaWhereUniqueInput | PlatbaWhereUniqueInput[]
    connect?: PlatbaWhereUniqueInput | PlatbaWhereUniqueInput[]
    update?: PlatbaUpdateWithWhereUniqueWithoutNajemnikInput | PlatbaUpdateWithWhereUniqueWithoutNajemnikInput[]
    updateMany?: PlatbaUpdateManyWithWhereWithoutNajemnikInput | PlatbaUpdateManyWithWhereWithoutNajemnikInput[]
    deleteMany?: PlatbaScalarWhereInput | PlatbaScalarWhereInput[]
  }

  export type MeridloUncheckedUpdateManyWithoutNajemnikNestedInput = {
    create?: XOR<MeridloCreateWithoutNajemnikInput, MeridloUncheckedCreateWithoutNajemnikInput> | MeridloCreateWithoutNajemnikInput[] | MeridloUncheckedCreateWithoutNajemnikInput[]
    connectOrCreate?: MeridloCreateOrConnectWithoutNajemnikInput | MeridloCreateOrConnectWithoutNajemnikInput[]
    upsert?: MeridloUpsertWithWhereUniqueWithoutNajemnikInput | MeridloUpsertWithWhereUniqueWithoutNajemnikInput[]
    createMany?: MeridloCreateManyNajemnikInputEnvelope
    set?: MeridloWhereUniqueInput | MeridloWhereUniqueInput[]
    disconnect?: MeridloWhereUniqueInput | MeridloWhereUniqueInput[]
    delete?: MeridloWhereUniqueInput | MeridloWhereUniqueInput[]
    connect?: MeridloWhereUniqueInput | MeridloWhereUniqueInput[]
    update?: MeridloUpdateWithWhereUniqueWithoutNajemnikInput | MeridloUpdateWithWhereUniqueWithoutNajemnikInput[]
    updateMany?: MeridloUpdateManyWithWhereWithoutNajemnikInput | MeridloUpdateManyWithWhereWithoutNajemnikInput[]
    deleteMany?: MeridloScalarWhereInput | MeridloScalarWhereInput[]
  }

  export type UkolUncheckedUpdateManyWithoutNajemnikNestedInput = {
    create?: XOR<UkolCreateWithoutNajemnikInput, UkolUncheckedCreateWithoutNajemnikInput> | UkolCreateWithoutNajemnikInput[] | UkolUncheckedCreateWithoutNajemnikInput[]
    connectOrCreate?: UkolCreateOrConnectWithoutNajemnikInput | UkolCreateOrConnectWithoutNajemnikInput[]
    upsert?: UkolUpsertWithWhereUniqueWithoutNajemnikInput | UkolUpsertWithWhereUniqueWithoutNajemnikInput[]
    createMany?: UkolCreateManyNajemnikInputEnvelope
    set?: UkolWhereUniqueInput | UkolWhereUniqueInput[]
    disconnect?: UkolWhereUniqueInput | UkolWhereUniqueInput[]
    delete?: UkolWhereUniqueInput | UkolWhereUniqueInput[]
    connect?: UkolWhereUniqueInput | UkolWhereUniqueInput[]
    update?: UkolUpdateWithWhereUniqueWithoutNajemnikInput | UkolUpdateWithWhereUniqueWithoutNajemnikInput[]
    updateMany?: UkolUpdateManyWithWhereWithoutNajemnikInput | UkolUpdateManyWithWhereWithoutNajemnikInput[]
    deleteMany?: UkolScalarWhereInput | UkolScalarWhereInput[]
  }

  export type NajemnikCreateNestedOneWithoutPlatbyInput = {
    create?: XOR<NajemnikCreateWithoutPlatbyInput, NajemnikUncheckedCreateWithoutPlatbyInput>
    connectOrCreate?: NajemnikCreateOrConnectWithoutPlatbyInput
    connect?: NajemnikWhereUniqueInput
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type NajemnikUpdateOneRequiredWithoutPlatbyNestedInput = {
    create?: XOR<NajemnikCreateWithoutPlatbyInput, NajemnikUncheckedCreateWithoutPlatbyInput>
    connectOrCreate?: NajemnikCreateOrConnectWithoutPlatbyInput
    upsert?: NajemnikUpsertWithoutPlatbyInput
    connect?: NajemnikWhereUniqueInput
    update?: XOR<XOR<NajemnikUpdateToOneWithWhereWithoutPlatbyInput, NajemnikUpdateWithoutPlatbyInput>, NajemnikUncheckedUpdateWithoutPlatbyInput>
  }

  export type NajemnikCreateNestedOneWithoutUkolyInput = {
    create?: XOR<NajemnikCreateWithoutUkolyInput, NajemnikUncheckedCreateWithoutUkolyInput>
    connectOrCreate?: NajemnikCreateOrConnectWithoutUkolyInput
    connect?: NajemnikWhereUniqueInput
  }

  export type NajemnikUpdateOneRequiredWithoutUkolyNestedInput = {
    create?: XOR<NajemnikCreateWithoutUkolyInput, NajemnikUncheckedCreateWithoutUkolyInput>
    connectOrCreate?: NajemnikCreateOrConnectWithoutUkolyInput
    upsert?: NajemnikUpsertWithoutUkolyInput
    connect?: NajemnikWhereUniqueInput
    update?: XOR<XOR<NajemnikUpdateToOneWithWhereWithoutUkolyInput, NajemnikUpdateWithoutUkolyInput>, NajemnikUncheckedUpdateWithoutUkolyInput>
  }

  export type NajemnikCreateNestedOneWithoutMeridlaInput = {
    create?: XOR<NajemnikCreateWithoutMeridlaInput, NajemnikUncheckedCreateWithoutMeridlaInput>
    connectOrCreate?: NajemnikCreateOrConnectWithoutMeridlaInput
    connect?: NajemnikWhereUniqueInput
  }

  export type NajemnikUpdateOneRequiredWithoutMeridlaNestedInput = {
    create?: XOR<NajemnikCreateWithoutMeridlaInput, NajemnikUncheckedCreateWithoutMeridlaInput>
    connectOrCreate?: NajemnikCreateOrConnectWithoutMeridlaInput
    upsert?: NajemnikUpsertWithoutMeridlaInput
    connect?: NajemnikWhereUniqueInput
    update?: XOR<XOR<NajemnikUpdateToOneWithWhereWithoutMeridlaInput, NajemnikUpdateWithoutMeridlaInput>, NajemnikUncheckedUpdateWithoutMeridlaInput>
  }

  export type ApartmentCreateNestedManyWithoutOwnerInput = {
    create?: XOR<ApartmentCreateWithoutOwnerInput, ApartmentUncheckedCreateWithoutOwnerInput> | ApartmentCreateWithoutOwnerInput[] | ApartmentUncheckedCreateWithoutOwnerInput[]
    connectOrCreate?: ApartmentCreateOrConnectWithoutOwnerInput | ApartmentCreateOrConnectWithoutOwnerInput[]
    createMany?: ApartmentCreateManyOwnerInputEnvelope
    connect?: ApartmentWhereUniqueInput | ApartmentWhereUniqueInput[]
  }

  export type ApartmentUncheckedCreateNestedManyWithoutOwnerInput = {
    create?: XOR<ApartmentCreateWithoutOwnerInput, ApartmentUncheckedCreateWithoutOwnerInput> | ApartmentCreateWithoutOwnerInput[] | ApartmentUncheckedCreateWithoutOwnerInput[]
    connectOrCreate?: ApartmentCreateOrConnectWithoutOwnerInput | ApartmentCreateOrConnectWithoutOwnerInput[]
    createMany?: ApartmentCreateManyOwnerInputEnvelope
    connect?: ApartmentWhereUniqueInput | ApartmentWhereUniqueInput[]
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type ApartmentUpdateManyWithoutOwnerNestedInput = {
    create?: XOR<ApartmentCreateWithoutOwnerInput, ApartmentUncheckedCreateWithoutOwnerInput> | ApartmentCreateWithoutOwnerInput[] | ApartmentUncheckedCreateWithoutOwnerInput[]
    connectOrCreate?: ApartmentCreateOrConnectWithoutOwnerInput | ApartmentCreateOrConnectWithoutOwnerInput[]
    upsert?: ApartmentUpsertWithWhereUniqueWithoutOwnerInput | ApartmentUpsertWithWhereUniqueWithoutOwnerInput[]
    createMany?: ApartmentCreateManyOwnerInputEnvelope
    set?: ApartmentWhereUniqueInput | ApartmentWhereUniqueInput[]
    disconnect?: ApartmentWhereUniqueInput | ApartmentWhereUniqueInput[]
    delete?: ApartmentWhereUniqueInput | ApartmentWhereUniqueInput[]
    connect?: ApartmentWhereUniqueInput | ApartmentWhereUniqueInput[]
    update?: ApartmentUpdateWithWhereUniqueWithoutOwnerInput | ApartmentUpdateWithWhereUniqueWithoutOwnerInput[]
    updateMany?: ApartmentUpdateManyWithWhereWithoutOwnerInput | ApartmentUpdateManyWithWhereWithoutOwnerInput[]
    deleteMany?: ApartmentScalarWhereInput | ApartmentScalarWhereInput[]
  }

  export type ApartmentUncheckedUpdateManyWithoutOwnerNestedInput = {
    create?: XOR<ApartmentCreateWithoutOwnerInput, ApartmentUncheckedCreateWithoutOwnerInput> | ApartmentCreateWithoutOwnerInput[] | ApartmentUncheckedCreateWithoutOwnerInput[]
    connectOrCreate?: ApartmentCreateOrConnectWithoutOwnerInput | ApartmentCreateOrConnectWithoutOwnerInput[]
    upsert?: ApartmentUpsertWithWhereUniqueWithoutOwnerInput | ApartmentUpsertWithWhereUniqueWithoutOwnerInput[]
    createMany?: ApartmentCreateManyOwnerInputEnvelope
    set?: ApartmentWhereUniqueInput | ApartmentWhereUniqueInput[]
    disconnect?: ApartmentWhereUniqueInput | ApartmentWhereUniqueInput[]
    delete?: ApartmentWhereUniqueInput | ApartmentWhereUniqueInput[]
    connect?: ApartmentWhereUniqueInput | ApartmentWhereUniqueInput[]
    update?: ApartmentUpdateWithWhereUniqueWithoutOwnerInput | ApartmentUpdateWithWhereUniqueWithoutOwnerInput[]
    updateMany?: ApartmentUpdateManyWithWhereWithoutOwnerInput | ApartmentUpdateManyWithWhereWithoutOwnerInput[]
    deleteMany?: ApartmentScalarWhereInput | ApartmentScalarWhereInput[]
  }

  export type ApartmentCreateNestedOneWithoutChildrenInput = {
    create?: XOR<ApartmentCreateWithoutChildrenInput, ApartmentUncheckedCreateWithoutChildrenInput>
    connectOrCreate?: ApartmentCreateOrConnectWithoutChildrenInput
    connect?: ApartmentWhereUniqueInput
  }

  export type ApartmentCreateNestedManyWithoutParentInput = {
    create?: XOR<ApartmentCreateWithoutParentInput, ApartmentUncheckedCreateWithoutParentInput> | ApartmentCreateWithoutParentInput[] | ApartmentUncheckedCreateWithoutParentInput[]
    connectOrCreate?: ApartmentCreateOrConnectWithoutParentInput | ApartmentCreateOrConnectWithoutParentInput[]
    createMany?: ApartmentCreateManyParentInputEnvelope
    connect?: ApartmentWhereUniqueInput | ApartmentWhereUniqueInput[]
  }

  export type UserCreateNestedOneWithoutApartmentsInput = {
    create?: XOR<UserCreateWithoutApartmentsInput, UserUncheckedCreateWithoutApartmentsInput>
    connectOrCreate?: UserCreateOrConnectWithoutApartmentsInput
    connect?: UserWhereUniqueInput
  }

  export type TenantCreateNestedManyWithoutApartmentInput = {
    create?: XOR<TenantCreateWithoutApartmentInput, TenantUncheckedCreateWithoutApartmentInput> | TenantCreateWithoutApartmentInput[] | TenantUncheckedCreateWithoutApartmentInput[]
    connectOrCreate?: TenantCreateOrConnectWithoutApartmentInput | TenantCreateOrConnectWithoutApartmentInput[]
    createMany?: TenantCreateManyApartmentInputEnvelope
    connect?: TenantWhereUniqueInput | TenantWhereUniqueInput[]
  }

  export type ApartmentUncheckedCreateNestedManyWithoutParentInput = {
    create?: XOR<ApartmentCreateWithoutParentInput, ApartmentUncheckedCreateWithoutParentInput> | ApartmentCreateWithoutParentInput[] | ApartmentUncheckedCreateWithoutParentInput[]
    connectOrCreate?: ApartmentCreateOrConnectWithoutParentInput | ApartmentCreateOrConnectWithoutParentInput[]
    createMany?: ApartmentCreateManyParentInputEnvelope
    connect?: ApartmentWhereUniqueInput | ApartmentWhereUniqueInput[]
  }

  export type TenantUncheckedCreateNestedManyWithoutApartmentInput = {
    create?: XOR<TenantCreateWithoutApartmentInput, TenantUncheckedCreateWithoutApartmentInput> | TenantCreateWithoutApartmentInput[] | TenantUncheckedCreateWithoutApartmentInput[]
    connectOrCreate?: TenantCreateOrConnectWithoutApartmentInput | TenantCreateOrConnectWithoutApartmentInput[]
    createMany?: TenantCreateManyApartmentInputEnvelope
    connect?: TenantWhereUniqueInput | TenantWhereUniqueInput[]
  }

  export type NullableFloatFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type NullableBoolFieldUpdateOperationsInput = {
    set?: boolean | null
  }

  export type ApartmentUpdateOneWithoutChildrenNestedInput = {
    create?: XOR<ApartmentCreateWithoutChildrenInput, ApartmentUncheckedCreateWithoutChildrenInput>
    connectOrCreate?: ApartmentCreateOrConnectWithoutChildrenInput
    upsert?: ApartmentUpsertWithoutChildrenInput
    disconnect?: ApartmentWhereInput | boolean
    delete?: ApartmentWhereInput | boolean
    connect?: ApartmentWhereUniqueInput
    update?: XOR<XOR<ApartmentUpdateToOneWithWhereWithoutChildrenInput, ApartmentUpdateWithoutChildrenInput>, ApartmentUncheckedUpdateWithoutChildrenInput>
  }

  export type ApartmentUpdateManyWithoutParentNestedInput = {
    create?: XOR<ApartmentCreateWithoutParentInput, ApartmentUncheckedCreateWithoutParentInput> | ApartmentCreateWithoutParentInput[] | ApartmentUncheckedCreateWithoutParentInput[]
    connectOrCreate?: ApartmentCreateOrConnectWithoutParentInput | ApartmentCreateOrConnectWithoutParentInput[]
    upsert?: ApartmentUpsertWithWhereUniqueWithoutParentInput | ApartmentUpsertWithWhereUniqueWithoutParentInput[]
    createMany?: ApartmentCreateManyParentInputEnvelope
    set?: ApartmentWhereUniqueInput | ApartmentWhereUniqueInput[]
    disconnect?: ApartmentWhereUniqueInput | ApartmentWhereUniqueInput[]
    delete?: ApartmentWhereUniqueInput | ApartmentWhereUniqueInput[]
    connect?: ApartmentWhereUniqueInput | ApartmentWhereUniqueInput[]
    update?: ApartmentUpdateWithWhereUniqueWithoutParentInput | ApartmentUpdateWithWhereUniqueWithoutParentInput[]
    updateMany?: ApartmentUpdateManyWithWhereWithoutParentInput | ApartmentUpdateManyWithWhereWithoutParentInput[]
    deleteMany?: ApartmentScalarWhereInput | ApartmentScalarWhereInput[]
  }

  export type UserUpdateOneRequiredWithoutApartmentsNestedInput = {
    create?: XOR<UserCreateWithoutApartmentsInput, UserUncheckedCreateWithoutApartmentsInput>
    connectOrCreate?: UserCreateOrConnectWithoutApartmentsInput
    upsert?: UserUpsertWithoutApartmentsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutApartmentsInput, UserUpdateWithoutApartmentsInput>, UserUncheckedUpdateWithoutApartmentsInput>
  }

  export type TenantUpdateManyWithoutApartmentNestedInput = {
    create?: XOR<TenantCreateWithoutApartmentInput, TenantUncheckedCreateWithoutApartmentInput> | TenantCreateWithoutApartmentInput[] | TenantUncheckedCreateWithoutApartmentInput[]
    connectOrCreate?: TenantCreateOrConnectWithoutApartmentInput | TenantCreateOrConnectWithoutApartmentInput[]
    upsert?: TenantUpsertWithWhereUniqueWithoutApartmentInput | TenantUpsertWithWhereUniqueWithoutApartmentInput[]
    createMany?: TenantCreateManyApartmentInputEnvelope
    set?: TenantWhereUniqueInput | TenantWhereUniqueInput[]
    disconnect?: TenantWhereUniqueInput | TenantWhereUniqueInput[]
    delete?: TenantWhereUniqueInput | TenantWhereUniqueInput[]
    connect?: TenantWhereUniqueInput | TenantWhereUniqueInput[]
    update?: TenantUpdateWithWhereUniqueWithoutApartmentInput | TenantUpdateWithWhereUniqueWithoutApartmentInput[]
    updateMany?: TenantUpdateManyWithWhereWithoutApartmentInput | TenantUpdateManyWithWhereWithoutApartmentInput[]
    deleteMany?: TenantScalarWhereInput | TenantScalarWhereInput[]
  }

  export type ApartmentUncheckedUpdateManyWithoutParentNestedInput = {
    create?: XOR<ApartmentCreateWithoutParentInput, ApartmentUncheckedCreateWithoutParentInput> | ApartmentCreateWithoutParentInput[] | ApartmentUncheckedCreateWithoutParentInput[]
    connectOrCreate?: ApartmentCreateOrConnectWithoutParentInput | ApartmentCreateOrConnectWithoutParentInput[]
    upsert?: ApartmentUpsertWithWhereUniqueWithoutParentInput | ApartmentUpsertWithWhereUniqueWithoutParentInput[]
    createMany?: ApartmentCreateManyParentInputEnvelope
    set?: ApartmentWhereUniqueInput | ApartmentWhereUniqueInput[]
    disconnect?: ApartmentWhereUniqueInput | ApartmentWhereUniqueInput[]
    delete?: ApartmentWhereUniqueInput | ApartmentWhereUniqueInput[]
    connect?: ApartmentWhereUniqueInput | ApartmentWhereUniqueInput[]
    update?: ApartmentUpdateWithWhereUniqueWithoutParentInput | ApartmentUpdateWithWhereUniqueWithoutParentInput[]
    updateMany?: ApartmentUpdateManyWithWhereWithoutParentInput | ApartmentUpdateManyWithWhereWithoutParentInput[]
    deleteMany?: ApartmentScalarWhereInput | ApartmentScalarWhereInput[]
  }

  export type TenantUncheckedUpdateManyWithoutApartmentNestedInput = {
    create?: XOR<TenantCreateWithoutApartmentInput, TenantUncheckedCreateWithoutApartmentInput> | TenantCreateWithoutApartmentInput[] | TenantUncheckedCreateWithoutApartmentInput[]
    connectOrCreate?: TenantCreateOrConnectWithoutApartmentInput | TenantCreateOrConnectWithoutApartmentInput[]
    upsert?: TenantUpsertWithWhereUniqueWithoutApartmentInput | TenantUpsertWithWhereUniqueWithoutApartmentInput[]
    createMany?: TenantCreateManyApartmentInputEnvelope
    set?: TenantWhereUniqueInput | TenantWhereUniqueInput[]
    disconnect?: TenantWhereUniqueInput | TenantWhereUniqueInput[]
    delete?: TenantWhereUniqueInput | TenantWhereUniqueInput[]
    connect?: TenantWhereUniqueInput | TenantWhereUniqueInput[]
    update?: TenantUpdateWithWhereUniqueWithoutApartmentInput | TenantUpdateWithWhereUniqueWithoutApartmentInput[]
    updateMany?: TenantUpdateManyWithWhereWithoutApartmentInput | TenantUpdateManyWithWhereWithoutApartmentInput[]
    deleteMany?: TenantScalarWhereInput | TenantScalarWhereInput[]
  }

  export type ApartmentCreateNestedOneWithoutTenantsInput = {
    create?: XOR<ApartmentCreateWithoutTenantsInput, ApartmentUncheckedCreateWithoutTenantsInput>
    connectOrCreate?: ApartmentCreateOrConnectWithoutTenantsInput
    connect?: ApartmentWhereUniqueInput
  }

  export type ApartmentUpdateOneWithoutTenantsNestedInput = {
    create?: XOR<ApartmentCreateWithoutTenantsInput, ApartmentUncheckedCreateWithoutTenantsInput>
    connectOrCreate?: ApartmentCreateOrConnectWithoutTenantsInput
    upsert?: ApartmentUpsertWithoutTenantsInput
    disconnect?: ApartmentWhereInput | boolean
    delete?: ApartmentWhereInput | boolean
    connect?: ApartmentWhereUniqueInput
    update?: XOR<XOR<ApartmentUpdateToOneWithWhereWithoutTenantsInput, ApartmentUpdateWithoutTenantsInput>, ApartmentUncheckedUpdateWithoutTenantsInput>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedFloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedBoolNullableFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel> | null
    not?: NestedBoolNullableFilter<$PrismaModel> | boolean | null
  }

  export type NestedFloatNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedFloatNullableFilter<$PrismaModel>
    _min?: NestedFloatNullableFilter<$PrismaModel>
    _max?: NestedFloatNullableFilter<$PrismaModel>
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedBoolNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel> | null
    not?: NestedBoolNullableWithAggregatesFilter<$PrismaModel> | boolean | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedBoolNullableFilter<$PrismaModel>
    _max?: NestedBoolNullableFilter<$PrismaModel>
  }

  export type NajemnikCreateWithoutNemovitostInput = {
    jmeno: string
    email: string
    mesicniNajem?: number
    platby?: PlatbaCreateNestedManyWithoutNajemnikInput
    meridla?: MeridloCreateNestedManyWithoutNajemnikInput
    ukoly?: UkolCreateNestedManyWithoutNajemnikInput
  }

  export type NajemnikUncheckedCreateWithoutNemovitostInput = {
    id?: number
    jmeno: string
    email: string
    mesicniNajem?: number
    platby?: PlatbaUncheckedCreateNestedManyWithoutNajemnikInput
    meridla?: MeridloUncheckedCreateNestedManyWithoutNajemnikInput
    ukoly?: UkolUncheckedCreateNestedManyWithoutNajemnikInput
  }

  export type NajemnikCreateOrConnectWithoutNemovitostInput = {
    where: NajemnikWhereUniqueInput
    create: XOR<NajemnikCreateWithoutNemovitostInput, NajemnikUncheckedCreateWithoutNemovitostInput>
  }

  export type NajemnikCreateManyNemovitostInputEnvelope = {
    data: NajemnikCreateManyNemovitostInput | NajemnikCreateManyNemovitostInput[]
  }

  export type NajemnikUpsertWithWhereUniqueWithoutNemovitostInput = {
    where: NajemnikWhereUniqueInput
    update: XOR<NajemnikUpdateWithoutNemovitostInput, NajemnikUncheckedUpdateWithoutNemovitostInput>
    create: XOR<NajemnikCreateWithoutNemovitostInput, NajemnikUncheckedCreateWithoutNemovitostInput>
  }

  export type NajemnikUpdateWithWhereUniqueWithoutNemovitostInput = {
    where: NajemnikWhereUniqueInput
    data: XOR<NajemnikUpdateWithoutNemovitostInput, NajemnikUncheckedUpdateWithoutNemovitostInput>
  }

  export type NajemnikUpdateManyWithWhereWithoutNemovitostInput = {
    where: NajemnikScalarWhereInput
    data: XOR<NajemnikUpdateManyMutationInput, NajemnikUncheckedUpdateManyWithoutNemovitostInput>
  }

  export type NajemnikScalarWhereInput = {
    AND?: NajemnikScalarWhereInput | NajemnikScalarWhereInput[]
    OR?: NajemnikScalarWhereInput[]
    NOT?: NajemnikScalarWhereInput | NajemnikScalarWhereInput[]
    id?: IntFilter<"Najemnik"> | number
    jmeno?: StringFilter<"Najemnik"> | string
    email?: StringFilter<"Najemnik"> | string
    nemovitostId?: IntFilter<"Najemnik"> | number
    mesicniNajem?: FloatFilter<"Najemnik"> | number
  }

  export type NemovitostCreateWithoutNajemniciInput = {
    nazev: string
    adresa: string
  }

  export type NemovitostUncheckedCreateWithoutNajemniciInput = {
    id?: number
    nazev: string
    adresa: string
  }

  export type NemovitostCreateOrConnectWithoutNajemniciInput = {
    where: NemovitostWhereUniqueInput
    create: XOR<NemovitostCreateWithoutNajemniciInput, NemovitostUncheckedCreateWithoutNajemniciInput>
  }

  export type PlatbaCreateWithoutNajemnikInput = {
    castka: number
    datum: Date | string
  }

  export type PlatbaUncheckedCreateWithoutNajemnikInput = {
    id?: number
    castka: number
    datum: Date | string
  }

  export type PlatbaCreateOrConnectWithoutNajemnikInput = {
    where: PlatbaWhereUniqueInput
    create: XOR<PlatbaCreateWithoutNajemnikInput, PlatbaUncheckedCreateWithoutNajemnikInput>
  }

  export type PlatbaCreateManyNajemnikInputEnvelope = {
    data: PlatbaCreateManyNajemnikInput | PlatbaCreateManyNajemnikInput[]
  }

  export type MeridloCreateWithoutNajemnikInput = {
    typ: string
    hodnota: number
    datum?: Date | string
  }

  export type MeridloUncheckedCreateWithoutNajemnikInput = {
    id?: number
    typ: string
    hodnota: number
    datum?: Date | string
  }

  export type MeridloCreateOrConnectWithoutNajemnikInput = {
    where: MeridloWhereUniqueInput
    create: XOR<MeridloCreateWithoutNajemnikInput, MeridloUncheckedCreateWithoutNajemnikInput>
  }

  export type MeridloCreateManyNajemnikInputEnvelope = {
    data: MeridloCreateManyNajemnikInput | MeridloCreateManyNajemnikInput[]
  }

  export type UkolCreateWithoutNajemnikInput = {
    popis: string
    datum?: Date | string
    status?: string
  }

  export type UkolUncheckedCreateWithoutNajemnikInput = {
    id?: number
    popis: string
    datum?: Date | string
    status?: string
  }

  export type UkolCreateOrConnectWithoutNajemnikInput = {
    where: UkolWhereUniqueInput
    create: XOR<UkolCreateWithoutNajemnikInput, UkolUncheckedCreateWithoutNajemnikInput>
  }

  export type UkolCreateManyNajemnikInputEnvelope = {
    data: UkolCreateManyNajemnikInput | UkolCreateManyNajemnikInput[]
  }

  export type NemovitostUpsertWithoutNajemniciInput = {
    update: XOR<NemovitostUpdateWithoutNajemniciInput, NemovitostUncheckedUpdateWithoutNajemniciInput>
    create: XOR<NemovitostCreateWithoutNajemniciInput, NemovitostUncheckedCreateWithoutNajemniciInput>
    where?: NemovitostWhereInput
  }

  export type NemovitostUpdateToOneWithWhereWithoutNajemniciInput = {
    where?: NemovitostWhereInput
    data: XOR<NemovitostUpdateWithoutNajemniciInput, NemovitostUncheckedUpdateWithoutNajemniciInput>
  }

  export type NemovitostUpdateWithoutNajemniciInput = {
    nazev?: StringFieldUpdateOperationsInput | string
    adresa?: StringFieldUpdateOperationsInput | string
  }

  export type NemovitostUncheckedUpdateWithoutNajemniciInput = {
    id?: IntFieldUpdateOperationsInput | number
    nazev?: StringFieldUpdateOperationsInput | string
    adresa?: StringFieldUpdateOperationsInput | string
  }

  export type PlatbaUpsertWithWhereUniqueWithoutNajemnikInput = {
    where: PlatbaWhereUniqueInput
    update: XOR<PlatbaUpdateWithoutNajemnikInput, PlatbaUncheckedUpdateWithoutNajemnikInput>
    create: XOR<PlatbaCreateWithoutNajemnikInput, PlatbaUncheckedCreateWithoutNajemnikInput>
  }

  export type PlatbaUpdateWithWhereUniqueWithoutNajemnikInput = {
    where: PlatbaWhereUniqueInput
    data: XOR<PlatbaUpdateWithoutNajemnikInput, PlatbaUncheckedUpdateWithoutNajemnikInput>
  }

  export type PlatbaUpdateManyWithWhereWithoutNajemnikInput = {
    where: PlatbaScalarWhereInput
    data: XOR<PlatbaUpdateManyMutationInput, PlatbaUncheckedUpdateManyWithoutNajemnikInput>
  }

  export type PlatbaScalarWhereInput = {
    AND?: PlatbaScalarWhereInput | PlatbaScalarWhereInput[]
    OR?: PlatbaScalarWhereInput[]
    NOT?: PlatbaScalarWhereInput | PlatbaScalarWhereInput[]
    id?: IntFilter<"Platba"> | number
    castka?: FloatFilter<"Platba"> | number
    datum?: DateTimeFilter<"Platba"> | Date | string
    najemnikId?: IntFilter<"Platba"> | number
  }

  export type MeridloUpsertWithWhereUniqueWithoutNajemnikInput = {
    where: MeridloWhereUniqueInput
    update: XOR<MeridloUpdateWithoutNajemnikInput, MeridloUncheckedUpdateWithoutNajemnikInput>
    create: XOR<MeridloCreateWithoutNajemnikInput, MeridloUncheckedCreateWithoutNajemnikInput>
  }

  export type MeridloUpdateWithWhereUniqueWithoutNajemnikInput = {
    where: MeridloWhereUniqueInput
    data: XOR<MeridloUpdateWithoutNajemnikInput, MeridloUncheckedUpdateWithoutNajemnikInput>
  }

  export type MeridloUpdateManyWithWhereWithoutNajemnikInput = {
    where: MeridloScalarWhereInput
    data: XOR<MeridloUpdateManyMutationInput, MeridloUncheckedUpdateManyWithoutNajemnikInput>
  }

  export type MeridloScalarWhereInput = {
    AND?: MeridloScalarWhereInput | MeridloScalarWhereInput[]
    OR?: MeridloScalarWhereInput[]
    NOT?: MeridloScalarWhereInput | MeridloScalarWhereInput[]
    id?: IntFilter<"Meridlo"> | number
    typ?: StringFilter<"Meridlo"> | string
    hodnota?: FloatFilter<"Meridlo"> | number
    datum?: DateTimeFilter<"Meridlo"> | Date | string
    najemnikId?: IntFilter<"Meridlo"> | number
  }

  export type UkolUpsertWithWhereUniqueWithoutNajemnikInput = {
    where: UkolWhereUniqueInput
    update: XOR<UkolUpdateWithoutNajemnikInput, UkolUncheckedUpdateWithoutNajemnikInput>
    create: XOR<UkolCreateWithoutNajemnikInput, UkolUncheckedCreateWithoutNajemnikInput>
  }

  export type UkolUpdateWithWhereUniqueWithoutNajemnikInput = {
    where: UkolWhereUniqueInput
    data: XOR<UkolUpdateWithoutNajemnikInput, UkolUncheckedUpdateWithoutNajemnikInput>
  }

  export type UkolUpdateManyWithWhereWithoutNajemnikInput = {
    where: UkolScalarWhereInput
    data: XOR<UkolUpdateManyMutationInput, UkolUncheckedUpdateManyWithoutNajemnikInput>
  }

  export type UkolScalarWhereInput = {
    AND?: UkolScalarWhereInput | UkolScalarWhereInput[]
    OR?: UkolScalarWhereInput[]
    NOT?: UkolScalarWhereInput | UkolScalarWhereInput[]
    id?: IntFilter<"Ukol"> | number
    popis?: StringFilter<"Ukol"> | string
    datum?: DateTimeFilter<"Ukol"> | Date | string
    status?: StringFilter<"Ukol"> | string
    najemnikId?: IntFilter<"Ukol"> | number
  }

  export type NajemnikCreateWithoutPlatbyInput = {
    jmeno: string
    email: string
    mesicniNajem?: number
    nemovitost: NemovitostCreateNestedOneWithoutNajemniciInput
    meridla?: MeridloCreateNestedManyWithoutNajemnikInput
    ukoly?: UkolCreateNestedManyWithoutNajemnikInput
  }

  export type NajemnikUncheckedCreateWithoutPlatbyInput = {
    id?: number
    jmeno: string
    email: string
    nemovitostId: number
    mesicniNajem?: number
    meridla?: MeridloUncheckedCreateNestedManyWithoutNajemnikInput
    ukoly?: UkolUncheckedCreateNestedManyWithoutNajemnikInput
  }

  export type NajemnikCreateOrConnectWithoutPlatbyInput = {
    where: NajemnikWhereUniqueInput
    create: XOR<NajemnikCreateWithoutPlatbyInput, NajemnikUncheckedCreateWithoutPlatbyInput>
  }

  export type NajemnikUpsertWithoutPlatbyInput = {
    update: XOR<NajemnikUpdateWithoutPlatbyInput, NajemnikUncheckedUpdateWithoutPlatbyInput>
    create: XOR<NajemnikCreateWithoutPlatbyInput, NajemnikUncheckedCreateWithoutPlatbyInput>
    where?: NajemnikWhereInput
  }

  export type NajemnikUpdateToOneWithWhereWithoutPlatbyInput = {
    where?: NajemnikWhereInput
    data: XOR<NajemnikUpdateWithoutPlatbyInput, NajemnikUncheckedUpdateWithoutPlatbyInput>
  }

  export type NajemnikUpdateWithoutPlatbyInput = {
    jmeno?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    mesicniNajem?: FloatFieldUpdateOperationsInput | number
    nemovitost?: NemovitostUpdateOneRequiredWithoutNajemniciNestedInput
    meridla?: MeridloUpdateManyWithoutNajemnikNestedInput
    ukoly?: UkolUpdateManyWithoutNajemnikNestedInput
  }

  export type NajemnikUncheckedUpdateWithoutPlatbyInput = {
    id?: IntFieldUpdateOperationsInput | number
    jmeno?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    nemovitostId?: IntFieldUpdateOperationsInput | number
    mesicniNajem?: FloatFieldUpdateOperationsInput | number
    meridla?: MeridloUncheckedUpdateManyWithoutNajemnikNestedInput
    ukoly?: UkolUncheckedUpdateManyWithoutNajemnikNestedInput
  }

  export type NajemnikCreateWithoutUkolyInput = {
    jmeno: string
    email: string
    mesicniNajem?: number
    nemovitost: NemovitostCreateNestedOneWithoutNajemniciInput
    platby?: PlatbaCreateNestedManyWithoutNajemnikInput
    meridla?: MeridloCreateNestedManyWithoutNajemnikInput
  }

  export type NajemnikUncheckedCreateWithoutUkolyInput = {
    id?: number
    jmeno: string
    email: string
    nemovitostId: number
    mesicniNajem?: number
    platby?: PlatbaUncheckedCreateNestedManyWithoutNajemnikInput
    meridla?: MeridloUncheckedCreateNestedManyWithoutNajemnikInput
  }

  export type NajemnikCreateOrConnectWithoutUkolyInput = {
    where: NajemnikWhereUniqueInput
    create: XOR<NajemnikCreateWithoutUkolyInput, NajemnikUncheckedCreateWithoutUkolyInput>
  }

  export type NajemnikUpsertWithoutUkolyInput = {
    update: XOR<NajemnikUpdateWithoutUkolyInput, NajemnikUncheckedUpdateWithoutUkolyInput>
    create: XOR<NajemnikCreateWithoutUkolyInput, NajemnikUncheckedCreateWithoutUkolyInput>
    where?: NajemnikWhereInput
  }

  export type NajemnikUpdateToOneWithWhereWithoutUkolyInput = {
    where?: NajemnikWhereInput
    data: XOR<NajemnikUpdateWithoutUkolyInput, NajemnikUncheckedUpdateWithoutUkolyInput>
  }

  export type NajemnikUpdateWithoutUkolyInput = {
    jmeno?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    mesicniNajem?: FloatFieldUpdateOperationsInput | number
    nemovitost?: NemovitostUpdateOneRequiredWithoutNajemniciNestedInput
    platby?: PlatbaUpdateManyWithoutNajemnikNestedInput
    meridla?: MeridloUpdateManyWithoutNajemnikNestedInput
  }

  export type NajemnikUncheckedUpdateWithoutUkolyInput = {
    id?: IntFieldUpdateOperationsInput | number
    jmeno?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    nemovitostId?: IntFieldUpdateOperationsInput | number
    mesicniNajem?: FloatFieldUpdateOperationsInput | number
    platby?: PlatbaUncheckedUpdateManyWithoutNajemnikNestedInput
    meridla?: MeridloUncheckedUpdateManyWithoutNajemnikNestedInput
  }

  export type NajemnikCreateWithoutMeridlaInput = {
    jmeno: string
    email: string
    mesicniNajem?: number
    nemovitost: NemovitostCreateNestedOneWithoutNajemniciInput
    platby?: PlatbaCreateNestedManyWithoutNajemnikInput
    ukoly?: UkolCreateNestedManyWithoutNajemnikInput
  }

  export type NajemnikUncheckedCreateWithoutMeridlaInput = {
    id?: number
    jmeno: string
    email: string
    nemovitostId: number
    mesicniNajem?: number
    platby?: PlatbaUncheckedCreateNestedManyWithoutNajemnikInput
    ukoly?: UkolUncheckedCreateNestedManyWithoutNajemnikInput
  }

  export type NajemnikCreateOrConnectWithoutMeridlaInput = {
    where: NajemnikWhereUniqueInput
    create: XOR<NajemnikCreateWithoutMeridlaInput, NajemnikUncheckedCreateWithoutMeridlaInput>
  }

  export type NajemnikUpsertWithoutMeridlaInput = {
    update: XOR<NajemnikUpdateWithoutMeridlaInput, NajemnikUncheckedUpdateWithoutMeridlaInput>
    create: XOR<NajemnikCreateWithoutMeridlaInput, NajemnikUncheckedCreateWithoutMeridlaInput>
    where?: NajemnikWhereInput
  }

  export type NajemnikUpdateToOneWithWhereWithoutMeridlaInput = {
    where?: NajemnikWhereInput
    data: XOR<NajemnikUpdateWithoutMeridlaInput, NajemnikUncheckedUpdateWithoutMeridlaInput>
  }

  export type NajemnikUpdateWithoutMeridlaInput = {
    jmeno?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    mesicniNajem?: FloatFieldUpdateOperationsInput | number
    nemovitost?: NemovitostUpdateOneRequiredWithoutNajemniciNestedInput
    platby?: PlatbaUpdateManyWithoutNajemnikNestedInput
    ukoly?: UkolUpdateManyWithoutNajemnikNestedInput
  }

  export type NajemnikUncheckedUpdateWithoutMeridlaInput = {
    id?: IntFieldUpdateOperationsInput | number
    jmeno?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    nemovitostId?: IntFieldUpdateOperationsInput | number
    mesicniNajem?: FloatFieldUpdateOperationsInput | number
    platby?: PlatbaUncheckedUpdateManyWithoutNajemnikNestedInput
    ukoly?: UkolUncheckedUpdateManyWithoutNajemnikNestedInput
  }

  export type ApartmentCreateWithoutOwnerInput = {
    address: string
    city: string
    postalCode: string
    purchasePrice?: number | null
    currentValue?: number | null
    purchaseDate?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    insuranceAnnualPrice?: number | null
    insuranceNumber?: string | null
    insuranceNote?: string | null
    ownershipType?: string | null
    buildingType?: string | null
    buildingConstruction?: string | null
    heatingType?: string | null
    area?: number | null
    eicCode?: string | null
    eanCode?: string | null
    floorNumber?: number | null
    totalFloorsAbove?: number | null
    totalFloorsBelow?: number | null
    hasElevator?: boolean | null
    hasBalcony?: boolean | null
    hasLoggia?: boolean | null
    hasTerrace?: boolean | null
    hasStorage?: boolean | null
    technicalNote?: string | null
    parent?: ApartmentCreateNestedOneWithoutChildrenInput
    children?: ApartmentCreateNestedManyWithoutParentInput
    tenants?: TenantCreateNestedManyWithoutApartmentInput
  }

  export type ApartmentUncheckedCreateWithoutOwnerInput = {
    id?: number
    address: string
    city: string
    postalCode: string
    purchasePrice?: number | null
    currentValue?: number | null
    purchaseDate?: Date | string | null
    parentId?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    insuranceAnnualPrice?: number | null
    insuranceNumber?: string | null
    insuranceNote?: string | null
    ownershipType?: string | null
    buildingType?: string | null
    buildingConstruction?: string | null
    heatingType?: string | null
    area?: number | null
    eicCode?: string | null
    eanCode?: string | null
    floorNumber?: number | null
    totalFloorsAbove?: number | null
    totalFloorsBelow?: number | null
    hasElevator?: boolean | null
    hasBalcony?: boolean | null
    hasLoggia?: boolean | null
    hasTerrace?: boolean | null
    hasStorage?: boolean | null
    technicalNote?: string | null
    children?: ApartmentUncheckedCreateNestedManyWithoutParentInput
    tenants?: TenantUncheckedCreateNestedManyWithoutApartmentInput
  }

  export type ApartmentCreateOrConnectWithoutOwnerInput = {
    where: ApartmentWhereUniqueInput
    create: XOR<ApartmentCreateWithoutOwnerInput, ApartmentUncheckedCreateWithoutOwnerInput>
  }

  export type ApartmentCreateManyOwnerInputEnvelope = {
    data: ApartmentCreateManyOwnerInput | ApartmentCreateManyOwnerInput[]
  }

  export type ApartmentUpsertWithWhereUniqueWithoutOwnerInput = {
    where: ApartmentWhereUniqueInput
    update: XOR<ApartmentUpdateWithoutOwnerInput, ApartmentUncheckedUpdateWithoutOwnerInput>
    create: XOR<ApartmentCreateWithoutOwnerInput, ApartmentUncheckedCreateWithoutOwnerInput>
  }

  export type ApartmentUpdateWithWhereUniqueWithoutOwnerInput = {
    where: ApartmentWhereUniqueInput
    data: XOR<ApartmentUpdateWithoutOwnerInput, ApartmentUncheckedUpdateWithoutOwnerInput>
  }

  export type ApartmentUpdateManyWithWhereWithoutOwnerInput = {
    where: ApartmentScalarWhereInput
    data: XOR<ApartmentUpdateManyMutationInput, ApartmentUncheckedUpdateManyWithoutOwnerInput>
  }

  export type ApartmentScalarWhereInput = {
    AND?: ApartmentScalarWhereInput | ApartmentScalarWhereInput[]
    OR?: ApartmentScalarWhereInput[]
    NOT?: ApartmentScalarWhereInput | ApartmentScalarWhereInput[]
    id?: IntFilter<"Apartment"> | number
    address?: StringFilter<"Apartment"> | string
    city?: StringFilter<"Apartment"> | string
    postalCode?: StringFilter<"Apartment"> | string
    purchasePrice?: FloatNullableFilter<"Apartment"> | number | null
    currentValue?: FloatNullableFilter<"Apartment"> | number | null
    purchaseDate?: DateTimeNullableFilter<"Apartment"> | Date | string | null
    parentId?: IntNullableFilter<"Apartment"> | number | null
    ownerId?: IntFilter<"Apartment"> | number
    createdAt?: DateTimeFilter<"Apartment"> | Date | string
    updatedAt?: DateTimeFilter<"Apartment"> | Date | string
    insuranceAnnualPrice?: FloatNullableFilter<"Apartment"> | number | null
    insuranceNumber?: StringNullableFilter<"Apartment"> | string | null
    insuranceNote?: StringNullableFilter<"Apartment"> | string | null
    ownershipType?: StringNullableFilter<"Apartment"> | string | null
    buildingType?: StringNullableFilter<"Apartment"> | string | null
    buildingConstruction?: StringNullableFilter<"Apartment"> | string | null
    heatingType?: StringNullableFilter<"Apartment"> | string | null
    area?: FloatNullableFilter<"Apartment"> | number | null
    eicCode?: StringNullableFilter<"Apartment"> | string | null
    eanCode?: StringNullableFilter<"Apartment"> | string | null
    floorNumber?: IntNullableFilter<"Apartment"> | number | null
    totalFloorsAbove?: IntNullableFilter<"Apartment"> | number | null
    totalFloorsBelow?: IntNullableFilter<"Apartment"> | number | null
    hasElevator?: BoolNullableFilter<"Apartment"> | boolean | null
    hasBalcony?: BoolNullableFilter<"Apartment"> | boolean | null
    hasLoggia?: BoolNullableFilter<"Apartment"> | boolean | null
    hasTerrace?: BoolNullableFilter<"Apartment"> | boolean | null
    hasStorage?: BoolNullableFilter<"Apartment"> | boolean | null
    technicalNote?: StringNullableFilter<"Apartment"> | string | null
  }

  export type ApartmentCreateWithoutChildrenInput = {
    address: string
    city: string
    postalCode: string
    purchasePrice?: number | null
    currentValue?: number | null
    purchaseDate?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    insuranceAnnualPrice?: number | null
    insuranceNumber?: string | null
    insuranceNote?: string | null
    ownershipType?: string | null
    buildingType?: string | null
    buildingConstruction?: string | null
    heatingType?: string | null
    area?: number | null
    eicCode?: string | null
    eanCode?: string | null
    floorNumber?: number | null
    totalFloorsAbove?: number | null
    totalFloorsBelow?: number | null
    hasElevator?: boolean | null
    hasBalcony?: boolean | null
    hasLoggia?: boolean | null
    hasTerrace?: boolean | null
    hasStorage?: boolean | null
    technicalNote?: string | null
    parent?: ApartmentCreateNestedOneWithoutChildrenInput
    owner: UserCreateNestedOneWithoutApartmentsInput
    tenants?: TenantCreateNestedManyWithoutApartmentInput
  }

  export type ApartmentUncheckedCreateWithoutChildrenInput = {
    id?: number
    address: string
    city: string
    postalCode: string
    purchasePrice?: number | null
    currentValue?: number | null
    purchaseDate?: Date | string | null
    parentId?: number | null
    ownerId: number
    createdAt?: Date | string
    updatedAt?: Date | string
    insuranceAnnualPrice?: number | null
    insuranceNumber?: string | null
    insuranceNote?: string | null
    ownershipType?: string | null
    buildingType?: string | null
    buildingConstruction?: string | null
    heatingType?: string | null
    area?: number | null
    eicCode?: string | null
    eanCode?: string | null
    floorNumber?: number | null
    totalFloorsAbove?: number | null
    totalFloorsBelow?: number | null
    hasElevator?: boolean | null
    hasBalcony?: boolean | null
    hasLoggia?: boolean | null
    hasTerrace?: boolean | null
    hasStorage?: boolean | null
    technicalNote?: string | null
    tenants?: TenantUncheckedCreateNestedManyWithoutApartmentInput
  }

  export type ApartmentCreateOrConnectWithoutChildrenInput = {
    where: ApartmentWhereUniqueInput
    create: XOR<ApartmentCreateWithoutChildrenInput, ApartmentUncheckedCreateWithoutChildrenInput>
  }

  export type ApartmentCreateWithoutParentInput = {
    address: string
    city: string
    postalCode: string
    purchasePrice?: number | null
    currentValue?: number | null
    purchaseDate?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    insuranceAnnualPrice?: number | null
    insuranceNumber?: string | null
    insuranceNote?: string | null
    ownershipType?: string | null
    buildingType?: string | null
    buildingConstruction?: string | null
    heatingType?: string | null
    area?: number | null
    eicCode?: string | null
    eanCode?: string | null
    floorNumber?: number | null
    totalFloorsAbove?: number | null
    totalFloorsBelow?: number | null
    hasElevator?: boolean | null
    hasBalcony?: boolean | null
    hasLoggia?: boolean | null
    hasTerrace?: boolean | null
    hasStorage?: boolean | null
    technicalNote?: string | null
    children?: ApartmentCreateNestedManyWithoutParentInput
    owner: UserCreateNestedOneWithoutApartmentsInput
    tenants?: TenantCreateNestedManyWithoutApartmentInput
  }

  export type ApartmentUncheckedCreateWithoutParentInput = {
    id?: number
    address: string
    city: string
    postalCode: string
    purchasePrice?: number | null
    currentValue?: number | null
    purchaseDate?: Date | string | null
    ownerId: number
    createdAt?: Date | string
    updatedAt?: Date | string
    insuranceAnnualPrice?: number | null
    insuranceNumber?: string | null
    insuranceNote?: string | null
    ownershipType?: string | null
    buildingType?: string | null
    buildingConstruction?: string | null
    heatingType?: string | null
    area?: number | null
    eicCode?: string | null
    eanCode?: string | null
    floorNumber?: number | null
    totalFloorsAbove?: number | null
    totalFloorsBelow?: number | null
    hasElevator?: boolean | null
    hasBalcony?: boolean | null
    hasLoggia?: boolean | null
    hasTerrace?: boolean | null
    hasStorage?: boolean | null
    technicalNote?: string | null
    children?: ApartmentUncheckedCreateNestedManyWithoutParentInput
    tenants?: TenantUncheckedCreateNestedManyWithoutApartmentInput
  }

  export type ApartmentCreateOrConnectWithoutParentInput = {
    where: ApartmentWhereUniqueInput
    create: XOR<ApartmentCreateWithoutParentInput, ApartmentUncheckedCreateWithoutParentInput>
  }

  export type ApartmentCreateManyParentInputEnvelope = {
    data: ApartmentCreateManyParentInput | ApartmentCreateManyParentInput[]
  }

  export type UserCreateWithoutApartmentsInput = {
    email: string
    password: string
    role: string
    isActive?: boolean
  }

  export type UserUncheckedCreateWithoutApartmentsInput = {
    id?: number
    email: string
    password: string
    role: string
    isActive?: boolean
  }

  export type UserCreateOrConnectWithoutApartmentsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutApartmentsInput, UserUncheckedCreateWithoutApartmentsInput>
  }

  export type TenantCreateWithoutApartmentInput = {
    name: string
    phone?: string | null
  }

  export type TenantUncheckedCreateWithoutApartmentInput = {
    id?: number
    name: string
    phone?: string | null
  }

  export type TenantCreateOrConnectWithoutApartmentInput = {
    where: TenantWhereUniqueInput
    create: XOR<TenantCreateWithoutApartmentInput, TenantUncheckedCreateWithoutApartmentInput>
  }

  export type TenantCreateManyApartmentInputEnvelope = {
    data: TenantCreateManyApartmentInput | TenantCreateManyApartmentInput[]
  }

  export type ApartmentUpsertWithoutChildrenInput = {
    update: XOR<ApartmentUpdateWithoutChildrenInput, ApartmentUncheckedUpdateWithoutChildrenInput>
    create: XOR<ApartmentCreateWithoutChildrenInput, ApartmentUncheckedCreateWithoutChildrenInput>
    where?: ApartmentWhereInput
  }

  export type ApartmentUpdateToOneWithWhereWithoutChildrenInput = {
    where?: ApartmentWhereInput
    data: XOR<ApartmentUpdateWithoutChildrenInput, ApartmentUncheckedUpdateWithoutChildrenInput>
  }

  export type ApartmentUpdateWithoutChildrenInput = {
    address?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    postalCode?: StringFieldUpdateOperationsInput | string
    purchasePrice?: NullableFloatFieldUpdateOperationsInput | number | null
    currentValue?: NullableFloatFieldUpdateOperationsInput | number | null
    purchaseDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    insuranceAnnualPrice?: NullableFloatFieldUpdateOperationsInput | number | null
    insuranceNumber?: NullableStringFieldUpdateOperationsInput | string | null
    insuranceNote?: NullableStringFieldUpdateOperationsInput | string | null
    ownershipType?: NullableStringFieldUpdateOperationsInput | string | null
    buildingType?: NullableStringFieldUpdateOperationsInput | string | null
    buildingConstruction?: NullableStringFieldUpdateOperationsInput | string | null
    heatingType?: NullableStringFieldUpdateOperationsInput | string | null
    area?: NullableFloatFieldUpdateOperationsInput | number | null
    eicCode?: NullableStringFieldUpdateOperationsInput | string | null
    eanCode?: NullableStringFieldUpdateOperationsInput | string | null
    floorNumber?: NullableIntFieldUpdateOperationsInput | number | null
    totalFloorsAbove?: NullableIntFieldUpdateOperationsInput | number | null
    totalFloorsBelow?: NullableIntFieldUpdateOperationsInput | number | null
    hasElevator?: NullableBoolFieldUpdateOperationsInput | boolean | null
    hasBalcony?: NullableBoolFieldUpdateOperationsInput | boolean | null
    hasLoggia?: NullableBoolFieldUpdateOperationsInput | boolean | null
    hasTerrace?: NullableBoolFieldUpdateOperationsInput | boolean | null
    hasStorage?: NullableBoolFieldUpdateOperationsInput | boolean | null
    technicalNote?: NullableStringFieldUpdateOperationsInput | string | null
    parent?: ApartmentUpdateOneWithoutChildrenNestedInput
    owner?: UserUpdateOneRequiredWithoutApartmentsNestedInput
    tenants?: TenantUpdateManyWithoutApartmentNestedInput
  }

  export type ApartmentUncheckedUpdateWithoutChildrenInput = {
    id?: IntFieldUpdateOperationsInput | number
    address?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    postalCode?: StringFieldUpdateOperationsInput | string
    purchasePrice?: NullableFloatFieldUpdateOperationsInput | number | null
    currentValue?: NullableFloatFieldUpdateOperationsInput | number | null
    purchaseDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    parentId?: NullableIntFieldUpdateOperationsInput | number | null
    ownerId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    insuranceAnnualPrice?: NullableFloatFieldUpdateOperationsInput | number | null
    insuranceNumber?: NullableStringFieldUpdateOperationsInput | string | null
    insuranceNote?: NullableStringFieldUpdateOperationsInput | string | null
    ownershipType?: NullableStringFieldUpdateOperationsInput | string | null
    buildingType?: NullableStringFieldUpdateOperationsInput | string | null
    buildingConstruction?: NullableStringFieldUpdateOperationsInput | string | null
    heatingType?: NullableStringFieldUpdateOperationsInput | string | null
    area?: NullableFloatFieldUpdateOperationsInput | number | null
    eicCode?: NullableStringFieldUpdateOperationsInput | string | null
    eanCode?: NullableStringFieldUpdateOperationsInput | string | null
    floorNumber?: NullableIntFieldUpdateOperationsInput | number | null
    totalFloorsAbove?: NullableIntFieldUpdateOperationsInput | number | null
    totalFloorsBelow?: NullableIntFieldUpdateOperationsInput | number | null
    hasElevator?: NullableBoolFieldUpdateOperationsInput | boolean | null
    hasBalcony?: NullableBoolFieldUpdateOperationsInput | boolean | null
    hasLoggia?: NullableBoolFieldUpdateOperationsInput | boolean | null
    hasTerrace?: NullableBoolFieldUpdateOperationsInput | boolean | null
    hasStorage?: NullableBoolFieldUpdateOperationsInput | boolean | null
    technicalNote?: NullableStringFieldUpdateOperationsInput | string | null
    tenants?: TenantUncheckedUpdateManyWithoutApartmentNestedInput
  }

  export type ApartmentUpsertWithWhereUniqueWithoutParentInput = {
    where: ApartmentWhereUniqueInput
    update: XOR<ApartmentUpdateWithoutParentInput, ApartmentUncheckedUpdateWithoutParentInput>
    create: XOR<ApartmentCreateWithoutParentInput, ApartmentUncheckedCreateWithoutParentInput>
  }

  export type ApartmentUpdateWithWhereUniqueWithoutParentInput = {
    where: ApartmentWhereUniqueInput
    data: XOR<ApartmentUpdateWithoutParentInput, ApartmentUncheckedUpdateWithoutParentInput>
  }

  export type ApartmentUpdateManyWithWhereWithoutParentInput = {
    where: ApartmentScalarWhereInput
    data: XOR<ApartmentUpdateManyMutationInput, ApartmentUncheckedUpdateManyWithoutParentInput>
  }

  export type UserUpsertWithoutApartmentsInput = {
    update: XOR<UserUpdateWithoutApartmentsInput, UserUncheckedUpdateWithoutApartmentsInput>
    create: XOR<UserCreateWithoutApartmentsInput, UserUncheckedCreateWithoutApartmentsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutApartmentsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutApartmentsInput, UserUncheckedUpdateWithoutApartmentsInput>
  }

  export type UserUpdateWithoutApartmentsInput = {
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
  }

  export type UserUncheckedUpdateWithoutApartmentsInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
  }

  export type TenantUpsertWithWhereUniqueWithoutApartmentInput = {
    where: TenantWhereUniqueInput
    update: XOR<TenantUpdateWithoutApartmentInput, TenantUncheckedUpdateWithoutApartmentInput>
    create: XOR<TenantCreateWithoutApartmentInput, TenantUncheckedCreateWithoutApartmentInput>
  }

  export type TenantUpdateWithWhereUniqueWithoutApartmentInput = {
    where: TenantWhereUniqueInput
    data: XOR<TenantUpdateWithoutApartmentInput, TenantUncheckedUpdateWithoutApartmentInput>
  }

  export type TenantUpdateManyWithWhereWithoutApartmentInput = {
    where: TenantScalarWhereInput
    data: XOR<TenantUpdateManyMutationInput, TenantUncheckedUpdateManyWithoutApartmentInput>
  }

  export type TenantScalarWhereInput = {
    AND?: TenantScalarWhereInput | TenantScalarWhereInput[]
    OR?: TenantScalarWhereInput[]
    NOT?: TenantScalarWhereInput | TenantScalarWhereInput[]
    id?: IntFilter<"Tenant"> | number
    name?: StringFilter<"Tenant"> | string
    phone?: StringNullableFilter<"Tenant"> | string | null
    apartmentId?: IntNullableFilter<"Tenant"> | number | null
  }

  export type ApartmentCreateWithoutTenantsInput = {
    address: string
    city: string
    postalCode: string
    purchasePrice?: number | null
    currentValue?: number | null
    purchaseDate?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    insuranceAnnualPrice?: number | null
    insuranceNumber?: string | null
    insuranceNote?: string | null
    ownershipType?: string | null
    buildingType?: string | null
    buildingConstruction?: string | null
    heatingType?: string | null
    area?: number | null
    eicCode?: string | null
    eanCode?: string | null
    floorNumber?: number | null
    totalFloorsAbove?: number | null
    totalFloorsBelow?: number | null
    hasElevator?: boolean | null
    hasBalcony?: boolean | null
    hasLoggia?: boolean | null
    hasTerrace?: boolean | null
    hasStorage?: boolean | null
    technicalNote?: string | null
    parent?: ApartmentCreateNestedOneWithoutChildrenInput
    children?: ApartmentCreateNestedManyWithoutParentInput
    owner: UserCreateNestedOneWithoutApartmentsInput
  }

  export type ApartmentUncheckedCreateWithoutTenantsInput = {
    id?: number
    address: string
    city: string
    postalCode: string
    purchasePrice?: number | null
    currentValue?: number | null
    purchaseDate?: Date | string | null
    parentId?: number | null
    ownerId: number
    createdAt?: Date | string
    updatedAt?: Date | string
    insuranceAnnualPrice?: number | null
    insuranceNumber?: string | null
    insuranceNote?: string | null
    ownershipType?: string | null
    buildingType?: string | null
    buildingConstruction?: string | null
    heatingType?: string | null
    area?: number | null
    eicCode?: string | null
    eanCode?: string | null
    floorNumber?: number | null
    totalFloorsAbove?: number | null
    totalFloorsBelow?: number | null
    hasElevator?: boolean | null
    hasBalcony?: boolean | null
    hasLoggia?: boolean | null
    hasTerrace?: boolean | null
    hasStorage?: boolean | null
    technicalNote?: string | null
    children?: ApartmentUncheckedCreateNestedManyWithoutParentInput
  }

  export type ApartmentCreateOrConnectWithoutTenantsInput = {
    where: ApartmentWhereUniqueInput
    create: XOR<ApartmentCreateWithoutTenantsInput, ApartmentUncheckedCreateWithoutTenantsInput>
  }

  export type ApartmentUpsertWithoutTenantsInput = {
    update: XOR<ApartmentUpdateWithoutTenantsInput, ApartmentUncheckedUpdateWithoutTenantsInput>
    create: XOR<ApartmentCreateWithoutTenantsInput, ApartmentUncheckedCreateWithoutTenantsInput>
    where?: ApartmentWhereInput
  }

  export type ApartmentUpdateToOneWithWhereWithoutTenantsInput = {
    where?: ApartmentWhereInput
    data: XOR<ApartmentUpdateWithoutTenantsInput, ApartmentUncheckedUpdateWithoutTenantsInput>
  }

  export type ApartmentUpdateWithoutTenantsInput = {
    address?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    postalCode?: StringFieldUpdateOperationsInput | string
    purchasePrice?: NullableFloatFieldUpdateOperationsInput | number | null
    currentValue?: NullableFloatFieldUpdateOperationsInput | number | null
    purchaseDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    insuranceAnnualPrice?: NullableFloatFieldUpdateOperationsInput | number | null
    insuranceNumber?: NullableStringFieldUpdateOperationsInput | string | null
    insuranceNote?: NullableStringFieldUpdateOperationsInput | string | null
    ownershipType?: NullableStringFieldUpdateOperationsInput | string | null
    buildingType?: NullableStringFieldUpdateOperationsInput | string | null
    buildingConstruction?: NullableStringFieldUpdateOperationsInput | string | null
    heatingType?: NullableStringFieldUpdateOperationsInput | string | null
    area?: NullableFloatFieldUpdateOperationsInput | number | null
    eicCode?: NullableStringFieldUpdateOperationsInput | string | null
    eanCode?: NullableStringFieldUpdateOperationsInput | string | null
    floorNumber?: NullableIntFieldUpdateOperationsInput | number | null
    totalFloorsAbove?: NullableIntFieldUpdateOperationsInput | number | null
    totalFloorsBelow?: NullableIntFieldUpdateOperationsInput | number | null
    hasElevator?: NullableBoolFieldUpdateOperationsInput | boolean | null
    hasBalcony?: NullableBoolFieldUpdateOperationsInput | boolean | null
    hasLoggia?: NullableBoolFieldUpdateOperationsInput | boolean | null
    hasTerrace?: NullableBoolFieldUpdateOperationsInput | boolean | null
    hasStorage?: NullableBoolFieldUpdateOperationsInput | boolean | null
    technicalNote?: NullableStringFieldUpdateOperationsInput | string | null
    parent?: ApartmentUpdateOneWithoutChildrenNestedInput
    children?: ApartmentUpdateManyWithoutParentNestedInput
    owner?: UserUpdateOneRequiredWithoutApartmentsNestedInput
  }

  export type ApartmentUncheckedUpdateWithoutTenantsInput = {
    id?: IntFieldUpdateOperationsInput | number
    address?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    postalCode?: StringFieldUpdateOperationsInput | string
    purchasePrice?: NullableFloatFieldUpdateOperationsInput | number | null
    currentValue?: NullableFloatFieldUpdateOperationsInput | number | null
    purchaseDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    parentId?: NullableIntFieldUpdateOperationsInput | number | null
    ownerId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    insuranceAnnualPrice?: NullableFloatFieldUpdateOperationsInput | number | null
    insuranceNumber?: NullableStringFieldUpdateOperationsInput | string | null
    insuranceNote?: NullableStringFieldUpdateOperationsInput | string | null
    ownershipType?: NullableStringFieldUpdateOperationsInput | string | null
    buildingType?: NullableStringFieldUpdateOperationsInput | string | null
    buildingConstruction?: NullableStringFieldUpdateOperationsInput | string | null
    heatingType?: NullableStringFieldUpdateOperationsInput | string | null
    area?: NullableFloatFieldUpdateOperationsInput | number | null
    eicCode?: NullableStringFieldUpdateOperationsInput | string | null
    eanCode?: NullableStringFieldUpdateOperationsInput | string | null
    floorNumber?: NullableIntFieldUpdateOperationsInput | number | null
    totalFloorsAbove?: NullableIntFieldUpdateOperationsInput | number | null
    totalFloorsBelow?: NullableIntFieldUpdateOperationsInput | number | null
    hasElevator?: NullableBoolFieldUpdateOperationsInput | boolean | null
    hasBalcony?: NullableBoolFieldUpdateOperationsInput | boolean | null
    hasLoggia?: NullableBoolFieldUpdateOperationsInput | boolean | null
    hasTerrace?: NullableBoolFieldUpdateOperationsInput | boolean | null
    hasStorage?: NullableBoolFieldUpdateOperationsInput | boolean | null
    technicalNote?: NullableStringFieldUpdateOperationsInput | string | null
    children?: ApartmentUncheckedUpdateManyWithoutParentNestedInput
  }

  export type NajemnikCreateManyNemovitostInput = {
    id?: number
    jmeno: string
    email: string
    mesicniNajem?: number
  }

  export type NajemnikUpdateWithoutNemovitostInput = {
    jmeno?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    mesicniNajem?: FloatFieldUpdateOperationsInput | number
    platby?: PlatbaUpdateManyWithoutNajemnikNestedInput
    meridla?: MeridloUpdateManyWithoutNajemnikNestedInput
    ukoly?: UkolUpdateManyWithoutNajemnikNestedInput
  }

  export type NajemnikUncheckedUpdateWithoutNemovitostInput = {
    id?: IntFieldUpdateOperationsInput | number
    jmeno?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    mesicniNajem?: FloatFieldUpdateOperationsInput | number
    platby?: PlatbaUncheckedUpdateManyWithoutNajemnikNestedInput
    meridla?: MeridloUncheckedUpdateManyWithoutNajemnikNestedInput
    ukoly?: UkolUncheckedUpdateManyWithoutNajemnikNestedInput
  }

  export type NajemnikUncheckedUpdateManyWithoutNemovitostInput = {
    id?: IntFieldUpdateOperationsInput | number
    jmeno?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    mesicniNajem?: FloatFieldUpdateOperationsInput | number
  }

  export type PlatbaCreateManyNajemnikInput = {
    id?: number
    castka: number
    datum: Date | string
  }

  export type MeridloCreateManyNajemnikInput = {
    id?: number
    typ: string
    hodnota: number
    datum?: Date | string
  }

  export type UkolCreateManyNajemnikInput = {
    id?: number
    popis: string
    datum?: Date | string
    status?: string
  }

  export type PlatbaUpdateWithoutNajemnikInput = {
    castka?: FloatFieldUpdateOperationsInput | number
    datum?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PlatbaUncheckedUpdateWithoutNajemnikInput = {
    id?: IntFieldUpdateOperationsInput | number
    castka?: FloatFieldUpdateOperationsInput | number
    datum?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PlatbaUncheckedUpdateManyWithoutNajemnikInput = {
    id?: IntFieldUpdateOperationsInput | number
    castka?: FloatFieldUpdateOperationsInput | number
    datum?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MeridloUpdateWithoutNajemnikInput = {
    typ?: StringFieldUpdateOperationsInput | string
    hodnota?: FloatFieldUpdateOperationsInput | number
    datum?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MeridloUncheckedUpdateWithoutNajemnikInput = {
    id?: IntFieldUpdateOperationsInput | number
    typ?: StringFieldUpdateOperationsInput | string
    hodnota?: FloatFieldUpdateOperationsInput | number
    datum?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MeridloUncheckedUpdateManyWithoutNajemnikInput = {
    id?: IntFieldUpdateOperationsInput | number
    typ?: StringFieldUpdateOperationsInput | string
    hodnota?: FloatFieldUpdateOperationsInput | number
    datum?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UkolUpdateWithoutNajemnikInput = {
    popis?: StringFieldUpdateOperationsInput | string
    datum?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
  }

  export type UkolUncheckedUpdateWithoutNajemnikInput = {
    id?: IntFieldUpdateOperationsInput | number
    popis?: StringFieldUpdateOperationsInput | string
    datum?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
  }

  export type UkolUncheckedUpdateManyWithoutNajemnikInput = {
    id?: IntFieldUpdateOperationsInput | number
    popis?: StringFieldUpdateOperationsInput | string
    datum?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
  }

  export type ApartmentCreateManyOwnerInput = {
    id?: number
    address: string
    city: string
    postalCode: string
    purchasePrice?: number | null
    currentValue?: number | null
    purchaseDate?: Date | string | null
    parentId?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    insuranceAnnualPrice?: number | null
    insuranceNumber?: string | null
    insuranceNote?: string | null
    ownershipType?: string | null
    buildingType?: string | null
    buildingConstruction?: string | null
    heatingType?: string | null
    area?: number | null
    eicCode?: string | null
    eanCode?: string | null
    floorNumber?: number | null
    totalFloorsAbove?: number | null
    totalFloorsBelow?: number | null
    hasElevator?: boolean | null
    hasBalcony?: boolean | null
    hasLoggia?: boolean | null
    hasTerrace?: boolean | null
    hasStorage?: boolean | null
    technicalNote?: string | null
  }

  export type ApartmentUpdateWithoutOwnerInput = {
    address?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    postalCode?: StringFieldUpdateOperationsInput | string
    purchasePrice?: NullableFloatFieldUpdateOperationsInput | number | null
    currentValue?: NullableFloatFieldUpdateOperationsInput | number | null
    purchaseDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    insuranceAnnualPrice?: NullableFloatFieldUpdateOperationsInput | number | null
    insuranceNumber?: NullableStringFieldUpdateOperationsInput | string | null
    insuranceNote?: NullableStringFieldUpdateOperationsInput | string | null
    ownershipType?: NullableStringFieldUpdateOperationsInput | string | null
    buildingType?: NullableStringFieldUpdateOperationsInput | string | null
    buildingConstruction?: NullableStringFieldUpdateOperationsInput | string | null
    heatingType?: NullableStringFieldUpdateOperationsInput | string | null
    area?: NullableFloatFieldUpdateOperationsInput | number | null
    eicCode?: NullableStringFieldUpdateOperationsInput | string | null
    eanCode?: NullableStringFieldUpdateOperationsInput | string | null
    floorNumber?: NullableIntFieldUpdateOperationsInput | number | null
    totalFloorsAbove?: NullableIntFieldUpdateOperationsInput | number | null
    totalFloorsBelow?: NullableIntFieldUpdateOperationsInput | number | null
    hasElevator?: NullableBoolFieldUpdateOperationsInput | boolean | null
    hasBalcony?: NullableBoolFieldUpdateOperationsInput | boolean | null
    hasLoggia?: NullableBoolFieldUpdateOperationsInput | boolean | null
    hasTerrace?: NullableBoolFieldUpdateOperationsInput | boolean | null
    hasStorage?: NullableBoolFieldUpdateOperationsInput | boolean | null
    technicalNote?: NullableStringFieldUpdateOperationsInput | string | null
    parent?: ApartmentUpdateOneWithoutChildrenNestedInput
    children?: ApartmentUpdateManyWithoutParentNestedInput
    tenants?: TenantUpdateManyWithoutApartmentNestedInput
  }

  export type ApartmentUncheckedUpdateWithoutOwnerInput = {
    id?: IntFieldUpdateOperationsInput | number
    address?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    postalCode?: StringFieldUpdateOperationsInput | string
    purchasePrice?: NullableFloatFieldUpdateOperationsInput | number | null
    currentValue?: NullableFloatFieldUpdateOperationsInput | number | null
    purchaseDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    parentId?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    insuranceAnnualPrice?: NullableFloatFieldUpdateOperationsInput | number | null
    insuranceNumber?: NullableStringFieldUpdateOperationsInput | string | null
    insuranceNote?: NullableStringFieldUpdateOperationsInput | string | null
    ownershipType?: NullableStringFieldUpdateOperationsInput | string | null
    buildingType?: NullableStringFieldUpdateOperationsInput | string | null
    buildingConstruction?: NullableStringFieldUpdateOperationsInput | string | null
    heatingType?: NullableStringFieldUpdateOperationsInput | string | null
    area?: NullableFloatFieldUpdateOperationsInput | number | null
    eicCode?: NullableStringFieldUpdateOperationsInput | string | null
    eanCode?: NullableStringFieldUpdateOperationsInput | string | null
    floorNumber?: NullableIntFieldUpdateOperationsInput | number | null
    totalFloorsAbove?: NullableIntFieldUpdateOperationsInput | number | null
    totalFloorsBelow?: NullableIntFieldUpdateOperationsInput | number | null
    hasElevator?: NullableBoolFieldUpdateOperationsInput | boolean | null
    hasBalcony?: NullableBoolFieldUpdateOperationsInput | boolean | null
    hasLoggia?: NullableBoolFieldUpdateOperationsInput | boolean | null
    hasTerrace?: NullableBoolFieldUpdateOperationsInput | boolean | null
    hasStorage?: NullableBoolFieldUpdateOperationsInput | boolean | null
    technicalNote?: NullableStringFieldUpdateOperationsInput | string | null
    children?: ApartmentUncheckedUpdateManyWithoutParentNestedInput
    tenants?: TenantUncheckedUpdateManyWithoutApartmentNestedInput
  }

  export type ApartmentUncheckedUpdateManyWithoutOwnerInput = {
    id?: IntFieldUpdateOperationsInput | number
    address?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    postalCode?: StringFieldUpdateOperationsInput | string
    purchasePrice?: NullableFloatFieldUpdateOperationsInput | number | null
    currentValue?: NullableFloatFieldUpdateOperationsInput | number | null
    purchaseDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    parentId?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    insuranceAnnualPrice?: NullableFloatFieldUpdateOperationsInput | number | null
    insuranceNumber?: NullableStringFieldUpdateOperationsInput | string | null
    insuranceNote?: NullableStringFieldUpdateOperationsInput | string | null
    ownershipType?: NullableStringFieldUpdateOperationsInput | string | null
    buildingType?: NullableStringFieldUpdateOperationsInput | string | null
    buildingConstruction?: NullableStringFieldUpdateOperationsInput | string | null
    heatingType?: NullableStringFieldUpdateOperationsInput | string | null
    area?: NullableFloatFieldUpdateOperationsInput | number | null
    eicCode?: NullableStringFieldUpdateOperationsInput | string | null
    eanCode?: NullableStringFieldUpdateOperationsInput | string | null
    floorNumber?: NullableIntFieldUpdateOperationsInput | number | null
    totalFloorsAbove?: NullableIntFieldUpdateOperationsInput | number | null
    totalFloorsBelow?: NullableIntFieldUpdateOperationsInput | number | null
    hasElevator?: NullableBoolFieldUpdateOperationsInput | boolean | null
    hasBalcony?: NullableBoolFieldUpdateOperationsInput | boolean | null
    hasLoggia?: NullableBoolFieldUpdateOperationsInput | boolean | null
    hasTerrace?: NullableBoolFieldUpdateOperationsInput | boolean | null
    hasStorage?: NullableBoolFieldUpdateOperationsInput | boolean | null
    technicalNote?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ApartmentCreateManyParentInput = {
    id?: number
    address: string
    city: string
    postalCode: string
    purchasePrice?: number | null
    currentValue?: number | null
    purchaseDate?: Date | string | null
    ownerId: number
    createdAt?: Date | string
    updatedAt?: Date | string
    insuranceAnnualPrice?: number | null
    insuranceNumber?: string | null
    insuranceNote?: string | null
    ownershipType?: string | null
    buildingType?: string | null
    buildingConstruction?: string | null
    heatingType?: string | null
    area?: number | null
    eicCode?: string | null
    eanCode?: string | null
    floorNumber?: number | null
    totalFloorsAbove?: number | null
    totalFloorsBelow?: number | null
    hasElevator?: boolean | null
    hasBalcony?: boolean | null
    hasLoggia?: boolean | null
    hasTerrace?: boolean | null
    hasStorage?: boolean | null
    technicalNote?: string | null
  }

  export type TenantCreateManyApartmentInput = {
    id?: number
    name: string
    phone?: string | null
  }

  export type ApartmentUpdateWithoutParentInput = {
    address?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    postalCode?: StringFieldUpdateOperationsInput | string
    purchasePrice?: NullableFloatFieldUpdateOperationsInput | number | null
    currentValue?: NullableFloatFieldUpdateOperationsInput | number | null
    purchaseDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    insuranceAnnualPrice?: NullableFloatFieldUpdateOperationsInput | number | null
    insuranceNumber?: NullableStringFieldUpdateOperationsInput | string | null
    insuranceNote?: NullableStringFieldUpdateOperationsInput | string | null
    ownershipType?: NullableStringFieldUpdateOperationsInput | string | null
    buildingType?: NullableStringFieldUpdateOperationsInput | string | null
    buildingConstruction?: NullableStringFieldUpdateOperationsInput | string | null
    heatingType?: NullableStringFieldUpdateOperationsInput | string | null
    area?: NullableFloatFieldUpdateOperationsInput | number | null
    eicCode?: NullableStringFieldUpdateOperationsInput | string | null
    eanCode?: NullableStringFieldUpdateOperationsInput | string | null
    floorNumber?: NullableIntFieldUpdateOperationsInput | number | null
    totalFloorsAbove?: NullableIntFieldUpdateOperationsInput | number | null
    totalFloorsBelow?: NullableIntFieldUpdateOperationsInput | number | null
    hasElevator?: NullableBoolFieldUpdateOperationsInput | boolean | null
    hasBalcony?: NullableBoolFieldUpdateOperationsInput | boolean | null
    hasLoggia?: NullableBoolFieldUpdateOperationsInput | boolean | null
    hasTerrace?: NullableBoolFieldUpdateOperationsInput | boolean | null
    hasStorage?: NullableBoolFieldUpdateOperationsInput | boolean | null
    technicalNote?: NullableStringFieldUpdateOperationsInput | string | null
    children?: ApartmentUpdateManyWithoutParentNestedInput
    owner?: UserUpdateOneRequiredWithoutApartmentsNestedInput
    tenants?: TenantUpdateManyWithoutApartmentNestedInput
  }

  export type ApartmentUncheckedUpdateWithoutParentInput = {
    id?: IntFieldUpdateOperationsInput | number
    address?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    postalCode?: StringFieldUpdateOperationsInput | string
    purchasePrice?: NullableFloatFieldUpdateOperationsInput | number | null
    currentValue?: NullableFloatFieldUpdateOperationsInput | number | null
    purchaseDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    ownerId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    insuranceAnnualPrice?: NullableFloatFieldUpdateOperationsInput | number | null
    insuranceNumber?: NullableStringFieldUpdateOperationsInput | string | null
    insuranceNote?: NullableStringFieldUpdateOperationsInput | string | null
    ownershipType?: NullableStringFieldUpdateOperationsInput | string | null
    buildingType?: NullableStringFieldUpdateOperationsInput | string | null
    buildingConstruction?: NullableStringFieldUpdateOperationsInput | string | null
    heatingType?: NullableStringFieldUpdateOperationsInput | string | null
    area?: NullableFloatFieldUpdateOperationsInput | number | null
    eicCode?: NullableStringFieldUpdateOperationsInput | string | null
    eanCode?: NullableStringFieldUpdateOperationsInput | string | null
    floorNumber?: NullableIntFieldUpdateOperationsInput | number | null
    totalFloorsAbove?: NullableIntFieldUpdateOperationsInput | number | null
    totalFloorsBelow?: NullableIntFieldUpdateOperationsInput | number | null
    hasElevator?: NullableBoolFieldUpdateOperationsInput | boolean | null
    hasBalcony?: NullableBoolFieldUpdateOperationsInput | boolean | null
    hasLoggia?: NullableBoolFieldUpdateOperationsInput | boolean | null
    hasTerrace?: NullableBoolFieldUpdateOperationsInput | boolean | null
    hasStorage?: NullableBoolFieldUpdateOperationsInput | boolean | null
    technicalNote?: NullableStringFieldUpdateOperationsInput | string | null
    children?: ApartmentUncheckedUpdateManyWithoutParentNestedInput
    tenants?: TenantUncheckedUpdateManyWithoutApartmentNestedInput
  }

  export type ApartmentUncheckedUpdateManyWithoutParentInput = {
    id?: IntFieldUpdateOperationsInput | number
    address?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    postalCode?: StringFieldUpdateOperationsInput | string
    purchasePrice?: NullableFloatFieldUpdateOperationsInput | number | null
    currentValue?: NullableFloatFieldUpdateOperationsInput | number | null
    purchaseDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    ownerId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    insuranceAnnualPrice?: NullableFloatFieldUpdateOperationsInput | number | null
    insuranceNumber?: NullableStringFieldUpdateOperationsInput | string | null
    insuranceNote?: NullableStringFieldUpdateOperationsInput | string | null
    ownershipType?: NullableStringFieldUpdateOperationsInput | string | null
    buildingType?: NullableStringFieldUpdateOperationsInput | string | null
    buildingConstruction?: NullableStringFieldUpdateOperationsInput | string | null
    heatingType?: NullableStringFieldUpdateOperationsInput | string | null
    area?: NullableFloatFieldUpdateOperationsInput | number | null
    eicCode?: NullableStringFieldUpdateOperationsInput | string | null
    eanCode?: NullableStringFieldUpdateOperationsInput | string | null
    floorNumber?: NullableIntFieldUpdateOperationsInput | number | null
    totalFloorsAbove?: NullableIntFieldUpdateOperationsInput | number | null
    totalFloorsBelow?: NullableIntFieldUpdateOperationsInput | number | null
    hasElevator?: NullableBoolFieldUpdateOperationsInput | boolean | null
    hasBalcony?: NullableBoolFieldUpdateOperationsInput | boolean | null
    hasLoggia?: NullableBoolFieldUpdateOperationsInput | boolean | null
    hasTerrace?: NullableBoolFieldUpdateOperationsInput | boolean | null
    hasStorage?: NullableBoolFieldUpdateOperationsInput | boolean | null
    technicalNote?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type TenantUpdateWithoutApartmentInput = {
    name?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type TenantUncheckedUpdateWithoutApartmentInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type TenantUncheckedUpdateManyWithoutApartmentInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use NemovitostCountOutputTypeDefaultArgs instead
     */
    export type NemovitostCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = NemovitostCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use NajemnikCountOutputTypeDefaultArgs instead
     */
    export type NajemnikCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = NajemnikCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use UserCountOutputTypeDefaultArgs instead
     */
    export type UserCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ApartmentCountOutputTypeDefaultArgs instead
     */
    export type ApartmentCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ApartmentCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use NemovitostDefaultArgs instead
     */
    export type NemovitostArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = NemovitostDefaultArgs<ExtArgs>
    /**
     * @deprecated Use NajemnikDefaultArgs instead
     */
    export type NajemnikArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = NajemnikDefaultArgs<ExtArgs>
    /**
     * @deprecated Use PlatbaDefaultArgs instead
     */
    export type PlatbaArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = PlatbaDefaultArgs<ExtArgs>
    /**
     * @deprecated Use UkolDefaultArgs instead
     */
    export type UkolArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UkolDefaultArgs<ExtArgs>
    /**
     * @deprecated Use MeridloDefaultArgs instead
     */
    export type MeridloArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = MeridloDefaultArgs<ExtArgs>
    /**
     * @deprecated Use UserDefaultArgs instead
     */
    export type UserArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ApartmentDefaultArgs instead
     */
    export type ApartmentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ApartmentDefaultArgs<ExtArgs>
    /**
     * @deprecated Use TenantDefaultArgs instead
     */
    export type TenantArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = TenantDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}