import express from "express";
import { PrismaClient } from "@prisma/client";
import { ukolSchema, ukolUpdateSchema } from "../validators/ukolValidator";
import { statusSchema } from "../validators/statusValidator";
import { authenticateToken, authorizeRole } from "../middleware/authMiddleware";


const router = express.Router();
const prisma = new PrismaClient();

// Pou≈æijeme middleware authenticateToken pro v≈°echny routy v tomto routeru
router.use(authenticateToken);

// ‚úÖ Z√≠sk√°n√≠ v≈°ech √∫kol≈Ø s mo≈ænost√≠ filtrov√°n√≠ podle n√°jemn√≠ka a/nebo stavu
router.get("/", async (req, res) => {
  console.log("üî• Endpoint GET /api/ukoly zavol√°n");

  const najemnikId = req.query.najemnikId ? parseInt(req.query.najemnikId as string, 10) : undefined;
  const status = req.query.status as string | undefined;

  console.log("üîé P≈ôijat√Ω status z query:", status);

  try {
    const ukoly = await prisma.ukol.findMany({
      where: {
        ...(najemnikId !== undefined && { najemnikId }),
        ...(status && { status }),
      },
      include: { najemnik: true },
    });

    res.json(ukoly);
  } catch (error) {
    console.error("‚ùå Chyba p≈ôi z√≠sk√°v√°n√≠ √∫kol≈Ø:", error);
    res.status(500).json({ error: "Chyba p≈ôi z√≠sk√°v√°n√≠ √∫kol≈Ø" });
  }
});

// Vytvo≈ôen√≠ nov√©ho √∫kolu s validac√≠
router.post("/", async (req, res) => {
  const parseResult = ukolSchema.safeParse(req.body);

  if (!parseResult.success) {
    return res.status(400).json({
      error: "Neplatn√° data",
      detail: parseResult.error.errors,
    });
  }

  const { popis, najemnikId, status } = parseResult.data;

  try {
    const novyUkol = await prisma.ukol.create({
      data: {
        popis,
        najemnikId,
        status,
      },
    });
    res.status(201).json(novyUkol);
  } catch (error) {
    console.error("‚ùå Chyba p≈ôi vytv√°≈ôen√≠ √∫kolu:", error);
    res.status(500).json({ error: "Chyba p≈ôi vytv√°≈ôen√≠ √∫kolu" });
  }
});

// Aktualizace √∫kolu podle ID s validac√≠ popisu a/nebo statusu
router.put("/:id", async (req, res) => {
  const id = parseInt(req.params.id, 10);
  const parseResult = ukolUpdateSchema.safeParse(req.body);

  if (!parseResult.success) {
    return res.status(400).json({ errors: parseResult.error.format() });
  }

  try {
    const existujiciUkol = await prisma.ukol.findUnique({ where: { id } });

    if (!existujiciUkol) {
      return res.status(404).json({ error: `√ökol s ID ${id} neexistuje.` });
    }

    const aktualizovanyUkol = await prisma.ukol.update({
      where: { id },
      data: parseResult.data,
    });

    res.json(aktualizovanyUkol);
  } catch (error) {
    console.error("‚ùå Chyba p≈ôi aktualizaci √∫kolu:", error);
    res.status(500).json({ error: "Chyba p≈ôi aktualizaci √∫kolu" });
  }
});

// Zmƒõna statusu √∫kolu podle ID
router.put("/:id/status", async (req, res) => {
  const id = parseInt(req.params.id, 10);
  const parseResult = statusSchema.safeParse(req.body);

  if (!parseResult.success) {
    return res.status(400).json({ error: "Neplatn√Ω form√°t statusu." });
  }

  const { status } = parseResult.data;

  try {
    const existujiciUkol = await prisma.ukol.findUnique({ where: { id } });

    if (!existujiciUkol) {
      return res.status(404).json({ error: `√ökol s ID ${id} neexistuje.` });
    }

    const aktualizovanyUkol = await prisma.ukol.update({
      where: { id },
      data: { status },
    });

    res.json(aktualizovanyUkol);
  } catch (error) {
    console.error("‚ùå Chyba p≈ôi zmƒõnƒõ statusu √∫kolu:", error);
    res.status(500).json({ error: "Chyba p≈ôi zmƒõnƒõ statusu √∫kolu" });
  }
});

// ‚úÖ Smaz√°n√≠ √∫kolu podle ID (pouze pro adminy)
router.delete(
  "/:id",
  authenticateToken,
  authorizeRole(["admin"]),
  async (req, res) => {
    const id = parseInt(req.params.id, 10);

    try {
      await prisma.ukol.delete({
        where: { id },
      });
      res.json({ message: `√ökol s ID ${id} byl √∫spƒõ≈°nƒõ smaz√°n.` });
    } catch (error) {
      console.error("‚ùå Chyba p≈ôi maz√°n√≠ √∫kolu:", error);
      res.status(500).json({ error: "Chyba p≈ôi maz√°n√≠ √∫kolu" });
    }
  }
);


// ‚úÖ Oznaƒçen√≠ √∫kolu jako hotov√Ω (PATCH)
router.patch("/:id/dokoncit", async (req, res) => {
  const id = parseInt(req.params.id, 10);

  try {
    const existujiciUkol = await prisma.ukol.findUnique({
      where: { id },
    });

    if (!existujiciUkol) {
      return res.status(404).json({ error: `√ökol s ID ${id} nebyl nalezen.` });
    }

    const dokoncenyUkol = await prisma.ukol.update({
      where: { id },
      data: { status: "hotovo" },
    });

    res.json({
      message: `√ökol s ID ${id} byl oznaƒçen jako hotov√Ω.`,
      ukol: dokoncenyUkol,
    });
  } catch (error) {
    console.error("‚ùå Chyba p≈ôi oznaƒçen√≠ √∫kolu jako hotov√Ω:", error);
    res.status(500).json({ error: "Chyba p≈ôi oznaƒçen√≠ √∫kolu jako hotov√Ω" });
  }
});

// Z√≠sk√°n√≠ jednoho √∫kolu podle ID
router.get("/:id", async (req, res) => {
  const id = parseInt(req.params.id, 10);

  if (isNaN(id)) {
    return res.status(400).json({ error: "ID mus√≠ b√Ωt ƒç√≠slo." });
  }

  try {
    const ukol = await prisma.ukol.findUnique({
      where: { id },
      include: { najemnik: true },
    });

    if (!ukol) {
      return res.status(404).json({ error: `√ökol s ID ${id} nebyl nalezen.` });
    }

    res.json(ukol);
  } catch (error) {
    console.error("‚ùå Chyba p≈ôi z√≠sk√°v√°n√≠ √∫kolu podle ID:", error);
    res.status(500).json({ error: "Chyba p≈ôi z√≠sk√°v√°n√≠ √∫kolu" });
  }
});

export default router;
